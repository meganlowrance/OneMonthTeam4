
One Month Team 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00802000  00002e22  00002eb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00802022  00802022  00002ed8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ed8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00002f78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011169  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005561  00000000  00000000  000143a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005b95  00000000  00000000  0001990a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a00  00000000  00000000  0001f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032d17  00000000  00000000  0001fea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035cc  00000000  00000000  00052bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00056183  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bb78  00000000  00000000  000563c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	2a c1       	rjmp	.+596    	; 0x256 <__ctors_end>
       2:	00 00       	nop
       4:	4e c1       	rjmp	.+668    	; 0x2a2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c1       	rjmp	.+664    	; 0x2a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c1       	rjmp	.+660    	; 0x2a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c1       	rjmp	.+656    	; 0x2a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	46 c1       	rjmp	.+652    	; 0x2a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	44 c1       	rjmp	.+648    	; 0x2a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	42 c1       	rjmp	.+644    	; 0x2a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	40 c1       	rjmp	.+640    	; 0x2a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c1       	rjmp	.+636    	; 0x2a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	3c c1       	rjmp	.+632    	; 0x2a2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	3a c1       	rjmp	.+628    	; 0x2a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	38 c1       	rjmp	.+624    	; 0x2a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	36 c1       	rjmp	.+620    	; 0x2a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	34 c1       	rjmp	.+616    	; 0x2a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c1       	rjmp	.+612    	; 0x2a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	30 c1       	rjmp	.+608    	; 0x2a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	2e c1       	rjmp	.+604    	; 0x2a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c1       	rjmp	.+600    	; 0x2a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c1       	rjmp	.+596    	; 0x2a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c1       	rjmp	.+592    	; 0x2a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	26 c1       	rjmp	.+588    	; 0x2a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	24 c1       	rjmp	.+584    	; 0x2a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c1       	rjmp	.+580    	; 0x2a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c1       	rjmp	.+576    	; 0x2a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c1       	rjmp	.+572    	; 0x2a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	1c c1       	rjmp	.+568    	; 0x2a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	1a c1       	rjmp	.+564    	; 0x2a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	18 c1       	rjmp	.+560    	; 0x2a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	16 c1       	rjmp	.+556    	; 0x2a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	14 c1       	rjmp	.+552    	; 0x2a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	12 c1       	rjmp	.+548    	; 0x2a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	10 c1       	rjmp	.+544    	; 0x2a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	0e c1       	rjmp	.+540    	; 0x2a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	0c c1       	rjmp	.+536    	; 0x2a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0a c1       	rjmp	.+532    	; 0x2a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	08 c1       	rjmp	.+528    	; 0x2a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	06 c1       	rjmp	.+524    	; 0x2a2 <__bad_interrupt>
      96:	00 00       	nop
      98:	04 c1       	rjmp	.+520    	; 0x2a2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	92 c4       	rjmp	.+2340   	; 0x9c2 <__vector_39>
      9e:	00 00       	nop
      a0:	cd c4       	rjmp	.+2458   	; 0xa3c <__vector_40>
      a2:	00 00       	nop
      a4:	08 c5       	rjmp	.+2576   	; 0xab6 <__vector_41>
      a6:	00 00       	nop
      a8:	43 c5       	rjmp	.+2694   	; 0xb30 <__vector_42>
      aa:	00 00       	nop
      ac:	fa c0       	rjmp	.+500    	; 0x2a2 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	f8 c0       	rjmp	.+496    	; 0x2a2 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	f6 c0       	rjmp	.+492    	; 0x2a2 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	f4 c0       	rjmp	.+488    	; 0x2a2 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	f2 c0       	rjmp	.+484    	; 0x2a2 <__bad_interrupt>
      be:	00 00       	nop
      c0:	f0 c0       	rjmp	.+480    	; 0x2a2 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ee c0       	rjmp	.+476    	; 0x2a2 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	ec c0       	rjmp	.+472    	; 0x2a2 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ea c0       	rjmp	.+468    	; 0x2a2 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	e8 c0       	rjmp	.+464    	; 0x2a2 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	e6 c0       	rjmp	.+460    	; 0x2a2 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	e4 c0       	rjmp	.+456    	; 0x2a2 <__bad_interrupt>
      da:	00 00       	nop
      dc:	e2 c0       	rjmp	.+452    	; 0x2a2 <__bad_interrupt>
      de:	00 00       	nop
      e0:	e0 c0       	rjmp	.+448    	; 0x2a2 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	de c0       	rjmp	.+444    	; 0x2a2 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	dc c0       	rjmp	.+440    	; 0x2a2 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	da c0       	rjmp	.+436    	; 0x2a2 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	d8 c0       	rjmp	.+432    	; 0x2a2 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	d6 c0       	rjmp	.+428    	; 0x2a2 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	d4 c0       	rjmp	.+424    	; 0x2a2 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	d2 c0       	rjmp	.+420    	; 0x2a2 <__bad_interrupt>
      fe:	00 00       	nop
     100:	d0 c0       	rjmp	.+416    	; 0x2a2 <__bad_interrupt>
     102:	00 00       	nop
     104:	ce c0       	rjmp	.+412    	; 0x2a2 <__bad_interrupt>
     106:	00 00       	nop
     108:	cc c0       	rjmp	.+408    	; 0x2a2 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	ca c0       	rjmp	.+404    	; 0x2a2 <__bad_interrupt>
     10e:	00 00       	nop
     110:	c8 c0       	rjmp	.+400    	; 0x2a2 <__bad_interrupt>
     112:	00 00       	nop
     114:	c6 c0       	rjmp	.+396    	; 0x2a2 <__bad_interrupt>
     116:	00 00       	nop
     118:	c4 c0       	rjmp	.+392    	; 0x2a2 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	5e c3       	rjmp	.+1724   	; 0x7da <__vector_71>
     11e:	00 00       	nop
     120:	99 c3       	rjmp	.+1842   	; 0x854 <__vector_72>
     122:	00 00       	nop
     124:	d4 c3       	rjmp	.+1960   	; 0x8ce <__vector_73>
     126:	00 00       	nop
     128:	0f c4       	rjmp	.+2078   	; 0x948 <__vector_74>
     12a:	00 00       	nop
     12c:	ba c0       	rjmp	.+372    	; 0x2a2 <__bad_interrupt>
     12e:	00 00       	nop
     130:	b8 c0       	rjmp	.+368    	; 0x2a2 <__bad_interrupt>
     132:	00 00       	nop
     134:	b6 c0       	rjmp	.+364    	; 0x2a2 <__bad_interrupt>
     136:	00 00       	nop
     138:	b4 c0       	rjmp	.+360    	; 0x2a2 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	b2 c0       	rjmp	.+356    	; 0x2a2 <__bad_interrupt>
     13e:	00 00       	nop
     140:	b0 c0       	rjmp	.+352    	; 0x2a2 <__bad_interrupt>
     142:	00 00       	nop
     144:	ae c0       	rjmp	.+348    	; 0x2a2 <__bad_interrupt>
     146:	00 00       	nop
     148:	ac c0       	rjmp	.+344    	; 0x2a2 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	aa c0       	rjmp	.+340    	; 0x2a2 <__bad_interrupt>
     14e:	00 00       	nop
     150:	a8 c0       	rjmp	.+336    	; 0x2a2 <__bad_interrupt>
     152:	00 00       	nop
     154:	a6 c0       	rjmp	.+332    	; 0x2a2 <__bad_interrupt>
     156:	00 00       	nop
     158:	a4 c0       	rjmp	.+328    	; 0x2a2 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	a2 c0       	rjmp	.+324    	; 0x2a2 <__bad_interrupt>
     15e:	00 00       	nop
     160:	a0 c0       	rjmp	.+320    	; 0x2a2 <__bad_interrupt>
     162:	00 00       	nop
     164:	9e c0       	rjmp	.+316    	; 0x2a2 <__bad_interrupt>
     166:	00 00       	nop
     168:	9c c0       	rjmp	.+312    	; 0x2a2 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	9a c0       	rjmp	.+308    	; 0x2a2 <__bad_interrupt>
     16e:	00 00       	nop
     170:	98 c0       	rjmp	.+304    	; 0x2a2 <__bad_interrupt>
     172:	00 00       	nop
     174:	96 c0       	rjmp	.+300    	; 0x2a2 <__bad_interrupt>
     176:	00 00       	nop
     178:	94 c0       	rjmp	.+296    	; 0x2a2 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	92 c0       	rjmp	.+292    	; 0x2a2 <__bad_interrupt>
     17e:	00 00       	nop
     180:	90 c0       	rjmp	.+288    	; 0x2a2 <__bad_interrupt>
     182:	00 00       	nop
     184:	8e c0       	rjmp	.+284    	; 0x2a2 <__bad_interrupt>
     186:	00 00       	nop
     188:	8c c0       	rjmp	.+280    	; 0x2a2 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	8a c0       	rjmp	.+276    	; 0x2a2 <__bad_interrupt>
     18e:	00 00       	nop
     190:	88 c0       	rjmp	.+272    	; 0x2a2 <__bad_interrupt>
     192:	00 00       	nop
     194:	86 c0       	rjmp	.+268    	; 0x2a2 <__bad_interrupt>
     196:	00 00       	nop
     198:	84 c0       	rjmp	.+264    	; 0x2a2 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	82 c0       	rjmp	.+260    	; 0x2a2 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	80 c0       	rjmp	.+256    	; 0x2a2 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	7e c0       	rjmp	.+252    	; 0x2a2 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	7c c0       	rjmp	.+248    	; 0x2a2 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7a c0       	rjmp	.+244    	; 0x2a2 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	78 c0       	rjmp	.+240    	; 0x2a2 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	76 c0       	rjmp	.+236    	; 0x2a2 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	74 c0       	rjmp	.+232    	; 0x2a2 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	72 c0       	rjmp	.+228    	; 0x2a2 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	70 c0       	rjmp	.+224    	; 0x2a2 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	6e c0       	rjmp	.+220    	; 0x2a2 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	6c c0       	rjmp	.+216    	; 0x2a2 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	6a c0       	rjmp	.+212    	; 0x2a2 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	68 c0       	rjmp	.+208    	; 0x2a2 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	66 c0       	rjmp	.+204    	; 0x2a2 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	64 c0       	rjmp	.+200    	; 0x2a2 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	62 c0       	rjmp	.+196    	; 0x2a2 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	60 c0       	rjmp	.+192    	; 0x2a2 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	5e c0       	rjmp	.+188    	; 0x2a2 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	5c c0       	rjmp	.+184    	; 0x2a2 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	5a c0       	rjmp	.+180    	; 0x2a2 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	58 c0       	rjmp	.+176    	; 0x2a2 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	56 c0       	rjmp	.+172    	; 0x2a2 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	54 c0       	rjmp	.+168    	; 0x2a2 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_40+0x14>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__ctors_end>:
     256:	11 24       	eor	r1, r1
     258:	1f be       	out	0x3f, r1	; 63
     25a:	cf ef       	ldi	r28, 0xFF	; 255
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	df e3       	ldi	r29, 0x3F	; 63
     260:	de bf       	out	0x3e, r29	; 62
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0c bf       	out	0x3c, r16	; 60
     266:	18 be       	out	0x38, r1	; 56
     268:	19 be       	out	0x39, r1	; 57
     26a:	1a be       	out	0x3a, r1	; 58
     26c:	1b be       	out	0x3b, r1	; 59

0000026e <__do_copy_data>:
     26e:	10 e2       	ldi	r17, 0x20	; 32
     270:	a0 e0       	ldi	r26, 0x00	; 0
     272:	b0 e2       	ldi	r27, 0x20	; 32
     274:	e2 e2       	ldi	r30, 0x22	; 34
     276:	fe e2       	ldi	r31, 0x2E	; 46
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	0b bf       	out	0x3b, r16	; 59
     27c:	02 c0       	rjmp	.+4      	; 0x282 <__do_copy_data+0x14>
     27e:	07 90       	elpm	r0, Z+
     280:	0d 92       	st	X+, r0
     282:	a2 32       	cpi	r26, 0x22	; 34
     284:	b1 07       	cpc	r27, r17
     286:	d9 f7       	brne	.-10     	; 0x27e <__do_copy_data+0x10>
     288:	1b be       	out	0x3b, r1	; 59

0000028a <__do_clear_bss>:
     28a:	20 e2       	ldi	r18, 0x20	; 32
     28c:	a2 e2       	ldi	r26, 0x22	; 34
     28e:	b0 e2       	ldi	r27, 0x20	; 32
     290:	01 c0       	rjmp	.+2      	; 0x294 <.do_clear_bss_start>

00000292 <.do_clear_bss_loop>:
     292:	1d 92       	st	X+, r1

00000294 <.do_clear_bss_start>:
     294:	a6 33       	cpi	r26, 0x36	; 54
     296:	b2 07       	cpc	r27, r18
     298:	e1 f7       	brne	.-8      	; 0x292 <.do_clear_bss_loop>
     29a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <main>
     29e:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <_exit>

000002a2 <__bad_interrupt>:
     2a2:	ae ce       	rjmp	.-676    	; 0x0 <__vectors>

000002a4 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     2ae:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <stdio_base>
     2b2:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <stdio_base+0x1>
     2b6:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <__data_end>
     2ba:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <__data_end+0x1>
     2be:	be 01       	movw	r22, r28
     2c0:	6f 5f       	subi	r22, 0xFF	; 255
     2c2:	7f 4f       	sbci	r23, 0xFF	; 255
     2c4:	19 95       	eicall
	return c;
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c8:	08 2e       	mov	r0, r24
     2ca:	00 0c       	add	r0, r0
     2cc:	99 0b       	sbc	r25, r25
     2ce:	0f 90       	pop	r0
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     2d6:	fc 01       	movw	r30, r24
     2d8:	91 81       	ldd	r25, Z+1	; 0x01
     2da:	95 ff       	sbrs	r25, 5
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <usart_putchar+0x2>
     2de:	60 83       	st	Z, r22
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	08 95       	ret

000002e6 <usart_getchar>:
     2e6:	fc 01       	movw	r30, r24
     2e8:	91 81       	ldd	r25, Z+1	; 0x01
     2ea:	99 23       	and	r25, r25
     2ec:	ec f7       	brge	.-6      	; 0x2e8 <usart_getchar+0x2>
     2ee:	80 81       	ld	r24, Z
     2f0:	08 95       	ret

000002f2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     2f2:	4f 92       	push	r4
     2f4:	5f 92       	push	r5
     2f6:	6f 92       	push	r6
     2f8:	7f 92       	push	r7
     2fa:	8f 92       	push	r8
     2fc:	9f 92       	push	r9
     2fe:	af 92       	push	r10
     300:	bf 92       	push	r11
     302:	ef 92       	push	r14
     304:	ff 92       	push	r15
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	cf 93       	push	r28
     30c:	7c 01       	movw	r14, r24
     30e:	4a 01       	movw	r8, r20
     310:	5b 01       	movw	r10, r22
     312:	28 01       	movw	r4, r16
     314:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     316:	fc 01       	movw	r30, r24
     318:	84 81       	ldd	r24, Z+4	; 0x04
     31a:	82 ff       	sbrs	r24, 2
     31c:	16 c0       	rjmp	.+44     	; 0x34a <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     31e:	d9 01       	movw	r26, r18
     320:	c8 01       	movw	r24, r16
     322:	68 94       	set
     324:	12 f8       	bld	r1, 2
     326:	b6 95       	lsr	r27
     328:	a7 95       	ror	r26
     32a:	97 95       	ror	r25
     32c:	87 95       	ror	r24
     32e:	16 94       	lsr	r1
     330:	d1 f7       	brne	.-12     	; 0x326 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     332:	b9 01       	movw	r22, r18
     334:	a8 01       	movw	r20, r16
     336:	03 2e       	mov	r0, r19
     338:	36 e1       	ldi	r19, 0x16	; 22
     33a:	76 95       	lsr	r23
     33c:	67 95       	ror	r22
     33e:	57 95       	ror	r21
     340:	47 95       	ror	r20
     342:	3a 95       	dec	r19
     344:	d1 f7       	brne	.-12     	; 0x33a <usart_set_baudrate+0x48>
     346:	30 2d       	mov	r19, r0
     348:	15 c0       	rjmp	.+42     	; 0x374 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     34a:	d9 01       	movw	r26, r18
     34c:	c8 01       	movw	r24, r16
     34e:	68 94       	set
     350:	13 f8       	bld	r1, 3
     352:	b6 95       	lsr	r27
     354:	a7 95       	ror	r26
     356:	97 95       	ror	r25
     358:	87 95       	ror	r24
     35a:	16 94       	lsr	r1
     35c:	d1 f7       	brne	.-12     	; 0x352 <usart_set_baudrate+0x60>
		min_rate /= 2;
     35e:	b9 01       	movw	r22, r18
     360:	a8 01       	movw	r20, r16
     362:	03 2e       	mov	r0, r19
     364:	37 e1       	ldi	r19, 0x17	; 23
     366:	76 95       	lsr	r23
     368:	67 95       	ror	r22
     36a:	57 95       	ror	r21
     36c:	47 95       	ror	r20
     36e:	3a 95       	dec	r19
     370:	d1 f7       	brne	.-12     	; 0x366 <usart_set_baudrate+0x74>
     372:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     374:	88 15       	cp	r24, r8
     376:	99 05       	cpc	r25, r9
     378:	aa 05       	cpc	r26, r10
     37a:	bb 05       	cpc	r27, r11
     37c:	08 f4       	brcc	.+2      	; 0x380 <usart_set_baudrate+0x8e>
     37e:	a6 c0       	rjmp	.+332    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     380:	84 16       	cp	r8, r20
     382:	95 06       	cpc	r9, r21
     384:	a6 06       	cpc	r10, r22
     386:	b7 06       	cpc	r11, r23
     388:	08 f4       	brcc	.+2      	; 0x38c <usart_set_baudrate+0x9a>
     38a:	a2 c0       	rjmp	.+324    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     38c:	f7 01       	movw	r30, r14
     38e:	84 81       	ldd	r24, Z+4	; 0x04
     390:	82 fd       	sbrc	r24, 2
     392:	04 c0       	rjmp	.+8      	; 0x39c <usart_set_baudrate+0xaa>
		baud *= 2;
     394:	88 0c       	add	r8, r8
     396:	99 1c       	adc	r9, r9
     398:	aa 1c       	adc	r10, r10
     39a:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     39c:	c3 01       	movw	r24, r6
     39e:	b2 01       	movw	r22, r4
     3a0:	a5 01       	movw	r20, r10
     3a2:	94 01       	movw	r18, r8
     3a4:	0e 94 94 11 	call	0x2328	; 0x2328 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     3a8:	2f 3f       	cpi	r18, 0xFF	; 255
     3aa:	31 05       	cpc	r19, r1
     3ac:	41 05       	cpc	r20, r1
     3ae:	51 05       	cpc	r21, r1
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <usart_set_baudrate+0xc2>
     3b2:	90 c0       	rjmp	.+288    	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	c9 ef       	ldi	r28, 0xF9	; 249
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <usart_set_baudrate+0xd8>
     3c0:	28 17       	cp	r18, r24
     3c2:	39 07       	cpc	r19, r25
     3c4:	4a 07       	cpc	r20, r26
     3c6:	5b 07       	cpc	r21, r27
     3c8:	58 f0       	brcs	.+22     	; 0x3e0 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	aa 1f       	adc	r26, r26
     3d0:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     3d2:	cd 3f       	cpi	r28, 0xFD	; 253
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <usart_set_baudrate+0xe6>
			limit |= 1;
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     3da:	c7 30       	cpi	r28, 0x07	; 7
     3dc:	89 f7       	brne	.-30     	; 0x3c0 <usart_set_baudrate+0xce>
     3de:	4f c0       	rjmp	.+158    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     3e0:	cc 23       	and	r28, r28
     3e2:	0c f0       	brlt	.+2      	; 0x3e6 <usart_set_baudrate+0xf4>
     3e4:	4c c0       	rjmp	.+152    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     3e6:	d5 01       	movw	r26, r10
     3e8:	c4 01       	movw	r24, r8
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	aa 1f       	adc	r26, r26
     3f0:	bb 1f       	adc	r27, r27
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	aa 1f       	adc	r26, r26
     3f8:	bb 1f       	adc	r27, r27
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	aa 1f       	adc	r26, r26
     400:	bb 1f       	adc	r27, r27
     402:	48 1a       	sub	r4, r24
     404:	59 0a       	sbc	r5, r25
     406:	6a 0a       	sbc	r6, r26
     408:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     40a:	ce 3f       	cpi	r28, 0xFE	; 254
     40c:	f4 f4       	brge	.+60     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     40e:	8d ef       	ldi	r24, 0xFD	; 253
     410:	9f ef       	ldi	r25, 0xFF	; 255
     412:	8c 1b       	sub	r24, r28
     414:	91 09       	sbc	r25, r1
     416:	c7 fd       	sbrc	r28, 7
     418:	93 95       	inc	r25
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41c:	44 0c       	add	r4, r4
     41e:	55 1c       	adc	r5, r5
     420:	66 1c       	adc	r6, r6
     422:	77 1c       	adc	r7, r7
     424:	8a 95       	dec	r24
     426:	d2 f7       	brpl	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     428:	d5 01       	movw	r26, r10
     42a:	c4 01       	movw	r24, r8
     42c:	b6 95       	lsr	r27
     42e:	a7 95       	ror	r26
     430:	97 95       	ror	r25
     432:	87 95       	ror	r24
     434:	bc 01       	movw	r22, r24
     436:	cd 01       	movw	r24, r26
     438:	64 0d       	add	r22, r4
     43a:	75 1d       	adc	r23, r5
     43c:	86 1d       	adc	r24, r6
     43e:	97 1d       	adc	r25, r7
     440:	a5 01       	movw	r20, r10
     442:	94 01       	movw	r18, r8
     444:	0e 94 94 11 	call	0x2328	; 0x2328 <__udivmodsi4>
     448:	37 c0       	rjmp	.+110    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		} else {
			baud <<= exp + 3;
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	8c 0f       	add	r24, r28
     44e:	a5 01       	movw	r20, r10
     450:	94 01       	movw	r18, r8
     452:	04 c0       	rjmp	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     454:	22 0f       	add	r18, r18
     456:	33 1f       	adc	r19, r19
     458:	44 1f       	adc	r20, r20
     45a:	55 1f       	adc	r21, r21
     45c:	8a 95       	dec	r24
     45e:	d2 f7       	brpl	.-12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			div = (cpu_hz + baud / 2) / baud;
     460:	da 01       	movw	r26, r20
     462:	c9 01       	movw	r24, r18
     464:	b6 95       	lsr	r27
     466:	a7 95       	ror	r26
     468:	97 95       	ror	r25
     46a:	87 95       	ror	r24
     46c:	bc 01       	movw	r22, r24
     46e:	cd 01       	movw	r24, r26
     470:	64 0d       	add	r22, r4
     472:	75 1d       	adc	r23, r5
     474:	86 1d       	adc	r24, r6
     476:	97 1d       	adc	r25, r7
     478:	0e 94 94 11 	call	0x2328	; 0x2328 <__udivmodsi4>
     47c:	1d c0       	rjmp	.+58     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	8c 0f       	add	r24, r28
     482:	a5 01       	movw	r20, r10
     484:	94 01       	movw	r18, r8
     486:	04 c0       	rjmp	.+8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	44 1f       	adc	r20, r20
     48e:	55 1f       	adc	r21, r21
     490:	8a 95       	dec	r24
     492:	d2 f7       	brpl	.-12     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		div = (cpu_hz + baud / 2) / baud - 1;
     494:	da 01       	movw	r26, r20
     496:	c9 01       	movw	r24, r18
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	bc 01       	movw	r22, r24
     4a2:	cd 01       	movw	r24, r26
     4a4:	64 0d       	add	r22, r4
     4a6:	75 1d       	adc	r23, r5
     4a8:	86 1d       	adc	r24, r6
     4aa:	97 1d       	adc	r25, r7
     4ac:	0e 94 94 11 	call	0x2328	; 0x2328 <__udivmodsi4>
     4b0:	21 50       	subi	r18, 0x01	; 1
     4b2:	31 09       	sbc	r19, r1
     4b4:	41 09       	sbc	r20, r1
     4b6:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     4b8:	83 2f       	mov	r24, r19
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	c2 95       	swap	r28
     4be:	c0 7f       	andi	r28, 0xF0	; 240
     4c0:	c8 2b       	or	r28, r24
     4c2:	f7 01       	movw	r30, r14
     4c4:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     4c6:	26 83       	std	Z+6, r18	; 0x06

	return true;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	18 c0       	rjmp	.+48     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	16 c0       	rjmp	.+44     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     4d4:	d5 01       	movw	r26, r10
     4d6:	c4 01       	movw	r24, r8
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	aa 1f       	adc	r26, r26
     4de:	bb 1f       	adc	r27, r27
     4e0:	88 0f       	add	r24, r24
     4e2:	99 1f       	adc	r25, r25
     4e4:	aa 1f       	adc	r26, r26
     4e6:	bb 1f       	adc	r27, r27
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	aa 1f       	adc	r26, r26
     4ee:	bb 1f       	adc	r27, r27
     4f0:	48 1a       	sub	r4, r24
     4f2:	59 0a       	sbc	r5, r25
     4f4:	6a 0a       	sbc	r6, r26
     4f6:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     4f8:	c9 ef       	ldi	r28, 0xF9	; 249
     4fa:	89 cf       	rjmp	.-238    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	bf 90       	pop	r11
     508:	af 90       	pop	r10
     50a:	9f 90       	pop	r9
     50c:	8f 90       	pop	r8
     50e:	7f 90       	pop	r7
     510:	6f 90       	pop	r6
     512:	5f 90       	pop	r5
     514:	4f 90       	pop	r4
     516:	08 95       	ret

00000518 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	ec 01       	movw	r28, r24
     522:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     524:	00 97       	sbiw	r24, 0x00	; 0
     526:	09 f4       	brne	.+2      	; 0x52a <usart_init_rs232+0x12>
     528:	36 c1       	rjmp	.+620    	; 0x796 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     52a:	80 3c       	cpi	r24, 0xC0	; 192
     52c:	91 05       	cpc	r25, r1
     52e:	21 f4       	brne	.+8      	; 0x538 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     530:	60 e1       	ldi	r22, 0x10	; 16
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	81 d3       	rcall	.+1794   	; 0xc38 <sysclk_enable_module>
     536:	2f c1       	rjmp	.+606    	; 0x796 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
     538:	c0 34       	cpi	r28, 0x40	; 64
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	d8 07       	cpc	r29, r24
     53e:	21 f4       	brne	.+8      	; 0x548 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
     540:	68 e0       	ldi	r22, 0x08	; 8
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	79 d3       	rcall	.+1778   	; 0xc38 <sysclk_enable_module>
     546:	27 c1       	rjmp	.+590    	; 0x796 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     548:	c1 15       	cp	r28, r1
     54a:	e4 e0       	ldi	r30, 0x04	; 4
     54c:	de 07       	cpc	r29, r30
     54e:	21 f4       	brne	.+8      	; 0x558 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     550:	64 e0       	ldi	r22, 0x04	; 4
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	71 d3       	rcall	.+1762   	; 0xc38 <sysclk_enable_module>
     556:	1f c1       	rjmp	.+574    	; 0x796 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     558:	c0 38       	cpi	r28, 0x80	; 128
     55a:	f1 e0       	ldi	r31, 0x01	; 1
     55c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     55e:	21 f4       	brne	.+8      	; 0x568 <usart_init_rs232+0x50>
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	69 d3       	rcall	.+1746   	; 0xc38 <sysclk_enable_module>
     566:	17 c1       	rjmp	.+558    	; 0x796 <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     568:	c1 15       	cp	r28, r1
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     56e:	21 f4       	brne	.+8      	; 0x578 <usart_init_rs232+0x60>
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	61 d3       	rcall	.+1730   	; 0xc38 <sysclk_enable_module>
     576:	0f c1       	rjmp	.+542    	; 0x796 <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     578:	c0 38       	cpi	r28, 0x80	; 128
     57a:	e3 e0       	ldi	r30, 0x03	; 3
     57c:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     57e:	21 f4       	brne	.+8      	; 0x588 <usart_init_rs232+0x70>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	59 d3       	rcall	.+1714   	; 0xc38 <sysclk_enable_module>
     586:	07 c1       	rjmp	.+526    	; 0x796 <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     588:	c0 39       	cpi	r28, 0x90	; 144
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     58e:	21 f4       	brne	.+8      	; 0x598 <usart_init_rs232+0x80>
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	51 d3       	rcall	.+1698   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     596:	ff c0       	rjmp	.+510    	; 0x796 <usart_init_rs232+0x27e>
     598:	c1 15       	cp	r28, r1
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     59e:	21 f4       	brne	.+8      	; 0x5a8 <usart_init_rs232+0x90>
     5a0:	62 e0       	ldi	r22, 0x02	; 2
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	49 d3       	rcall	.+1682   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     5a6:	f7 c0       	rjmp	.+494    	; 0x796 <usart_init_rs232+0x27e>
     5a8:	c0 34       	cpi	r28, 0x40	; 64
     5aa:	e2 e0       	ldi	r30, 0x02	; 2
     5ac:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     5ae:	21 f4       	brne	.+8      	; 0x5b8 <usart_init_rs232+0xa0>
     5b0:	62 e0       	ldi	r22, 0x02	; 2
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	41 d3       	rcall	.+1666   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
     5b6:	ef c0       	rjmp	.+478    	; 0x796 <usart_init_rs232+0x27e>
     5b8:	c1 15       	cp	r28, r1
     5ba:	f3 e0       	ldi	r31, 0x03	; 3
     5bc:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
     5be:	21 f4       	brne	.+8      	; 0x5c8 <usart_init_rs232+0xb0>
     5c0:	64 e0       	ldi	r22, 0x04	; 4
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	39 d3       	rcall	.+1650   	; 0xc38 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     5c6:	e7 c0       	rjmp	.+462    	; 0x796 <usart_init_rs232+0x27e>
     5c8:	c0 32       	cpi	r28, 0x20	; 32
     5ca:	83 e0       	ldi	r24, 0x03	; 3
     5cc:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     5ce:	21 f4       	brne	.+8      	; 0x5d8 <usart_init_rs232+0xc0>
     5d0:	64 e0       	ldi	r22, 0x04	; 4
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	31 d3       	rcall	.+1634   	; 0xc38 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     5d6:	df c0       	rjmp	.+446    	; 0x796 <usart_init_rs232+0x27e>
     5d8:	c1 15       	cp	r28, r1
     5da:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     5dc:	de 07       	cpc	r29, r30
     5de:	21 f4       	brne	.+8      	; 0x5e8 <usart_init_rs232+0xd0>
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	29 d3       	rcall	.+1618   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     5e6:	d7 c0       	rjmp	.+430    	; 0x796 <usart_init_rs232+0x27e>
     5e8:	c1 15       	cp	r28, r1
     5ea:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     5ec:	df 07       	cpc	r29, r31
     5ee:	21 f4       	brne	.+8      	; 0x5f8 <usart_init_rs232+0xe0>
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	21 d3       	rcall	.+1602   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     5f6:	cf c0       	rjmp	.+414    	; 0x796 <usart_init_rs232+0x27e>
     5f8:	c1 15       	cp	r28, r1
     5fa:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     5fc:	d8 07       	cpc	r29, r24
     5fe:	21 f4       	brne	.+8      	; 0x608 <usart_init_rs232+0xf0>
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	85 e0       	ldi	r24, 0x05	; 5
     604:	19 d3       	rcall	.+1586   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     606:	c7 c0       	rjmp	.+398    	; 0x796 <usart_init_rs232+0x27e>
     608:	c1 15       	cp	r28, r1
     60a:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     60c:	de 07       	cpc	r29, r30
     60e:	21 f4       	brne	.+8      	; 0x618 <usart_init_rs232+0x100>
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     614:	11 d3       	rcall	.+1570   	; 0xc38 <sysclk_enable_module>
     616:	bf c0       	rjmp	.+382    	; 0x796 <usart_init_rs232+0x27e>
     618:	c0 34       	cpi	r28, 0x40	; 64
     61a:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     61c:	df 07       	cpc	r29, r31
     61e:	21 f4       	brne	.+8      	; 0x628 <usart_init_rs232+0x110>
     620:	62 e0       	ldi	r22, 0x02	; 2
     622:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     624:	09 d3       	rcall	.+1554   	; 0xc38 <sysclk_enable_module>
     626:	b7 c0       	rjmp	.+366    	; 0x796 <usart_init_rs232+0x27e>
     628:	c0 34       	cpi	r28, 0x40	; 64
     62a:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     62c:	d8 07       	cpc	r29, r24
     62e:	21 f4       	brne	.+8      	; 0x638 <usart_init_rs232+0x120>
     630:	62 e0       	ldi	r22, 0x02	; 2
     632:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     634:	01 d3       	rcall	.+1538   	; 0xc38 <sysclk_enable_module>
     636:	af c0       	rjmp	.+350    	; 0x796 <usart_init_rs232+0x27e>
     638:	c0 34       	cpi	r28, 0x40	; 64
     63a:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     63c:	de 07       	cpc	r29, r30
     63e:	21 f4       	brne	.+8      	; 0x648 <usart_init_rs232+0x130>
     640:	62 e0       	ldi	r22, 0x02	; 2
     642:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
     644:	f9 d2       	rcall	.+1522   	; 0xc38 <sysclk_enable_module>
     646:	a7 c0       	rjmp	.+334    	; 0x796 <usart_init_rs232+0x27e>
     648:	c0 34       	cpi	r28, 0x40	; 64
     64a:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
     64c:	df 07       	cpc	r29, r31
     64e:	21 f4       	brne	.+8      	; 0x658 <usart_init_rs232+0x140>
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     654:	f1 d2       	rcall	.+1506   	; 0xc38 <sysclk_enable_module>
     656:	9f c0       	rjmp	.+318    	; 0x796 <usart_init_rs232+0x27e>
     658:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	d8 07       	cpc	r29, r24
     65e:	21 f4       	brne	.+8      	; 0x668 <usart_init_rs232+0x150>
     660:	64 e0       	ldi	r22, 0x04	; 4
     662:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     664:	e9 d2       	rcall	.+1490   	; 0xc38 <sysclk_enable_module>
     666:	97 c0       	rjmp	.+302    	; 0x796 <usart_init_rs232+0x27e>
     668:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     66a:	e9 e0       	ldi	r30, 0x09	; 9
     66c:	de 07       	cpc	r29, r30
     66e:	21 f4       	brne	.+8      	; 0x678 <usart_init_rs232+0x160>
     670:	64 e0       	ldi	r22, 0x04	; 4
     672:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     674:	e1 d2       	rcall	.+1474   	; 0xc38 <sysclk_enable_module>
     676:	8f c0       	rjmp	.+286    	; 0x796 <usart_init_rs232+0x27e>
     678:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     67a:	fa e0       	ldi	r31, 0x0A	; 10
     67c:	df 07       	cpc	r29, r31
     67e:	21 f4       	brne	.+8      	; 0x688 <usart_init_rs232+0x170>
     680:	64 e0       	ldi	r22, 0x04	; 4
     682:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     684:	d9 d2       	rcall	.+1458   	; 0xc38 <sysclk_enable_module>
     686:	87 c0       	rjmp	.+270    	; 0x796 <usart_init_rs232+0x27e>
     688:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     68a:	8b e0       	ldi	r24, 0x0B	; 11
     68c:	d8 07       	cpc	r29, r24
     68e:	21 f4       	brne	.+8      	; 0x698 <usart_init_rs232+0x180>
     690:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     692:	86 e0       	ldi	r24, 0x06	; 6
     694:	d1 d2       	rcall	.+1442   	; 0xc38 <sysclk_enable_module>
     696:	7f c0       	rjmp	.+254    	; 0x796 <usart_init_rs232+0x27e>
     698:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     69a:	e8 e0       	ldi	r30, 0x08	; 8
     69c:	de 07       	cpc	r29, r30
     69e:	21 f4       	brne	.+8      	; 0x6a8 <usart_init_rs232+0x190>
     6a0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	c9 d2       	rcall	.+1426   	; 0xc38 <sysclk_enable_module>
     6a6:	77 c0       	rjmp	.+238    	; 0x796 <usart_init_rs232+0x27e>
     6a8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     6aa:	f9 e0       	ldi	r31, 0x09	; 9
     6ac:	df 07       	cpc	r29, r31
     6ae:	21 f4       	brne	.+8      	; 0x6b8 <usart_init_rs232+0x1a0>
     6b0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	c1 d2       	rcall	.+1410   	; 0xc38 <sysclk_enable_module>
     6b6:	6f c0       	rjmp	.+222    	; 0x796 <usart_init_rs232+0x27e>
     6b8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
     6ba:	8a e0       	ldi	r24, 0x0A	; 10
     6bc:	d8 07       	cpc	r29, r24
     6be:	21 f4       	brne	.+8      	; 0x6c8 <usart_init_rs232+0x1b0>
     6c0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
     6c2:	85 e0       	ldi	r24, 0x05	; 5
     6c4:	b9 d2       	rcall	.+1394   	; 0xc38 <sysclk_enable_module>
     6c6:	67 c0       	rjmp	.+206    	; 0x796 <usart_init_rs232+0x27e>
     6c8:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
     6ca:	eb e0       	ldi	r30, 0x0B	; 11
     6cc:	de 07       	cpc	r29, r30
     6ce:	21 f4       	brne	.+8      	; 0x6d8 <usart_init_rs232+0x1c0>
     6d0:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     6d2:	86 e0       	ldi	r24, 0x06	; 6
     6d4:	b1 d2       	rcall	.+1378   	; 0xc38 <sysclk_enable_module>
     6d6:	5f c0       	rjmp	.+190    	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     6d8:	c0 3a       	cpi	r28, 0xA0	; 160
     6da:	f8 e0       	ldi	r31, 0x08	; 8
     6dc:	df 07       	cpc	r29, r31
     6de:	21 f4       	brne	.+8      	; 0x6e8 <usart_init_rs232+0x1d0>
     6e0:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	a9 d2       	rcall	.+1362   	; 0xc38 <sysclk_enable_module>
     6e6:	57 c0       	rjmp	.+174    	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     6e8:	c0 3a       	cpi	r28, 0xA0	; 160
     6ea:	89 e0       	ldi	r24, 0x09	; 9
     6ec:	d8 07       	cpc	r29, r24
     6ee:	21 f4       	brne	.+8      	; 0x6f8 <usart_init_rs232+0x1e0>
     6f0:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     6f2:	84 e0       	ldi	r24, 0x04	; 4
     6f4:	a1 d2       	rcall	.+1346   	; 0xc38 <sysclk_enable_module>
     6f6:	4f c0       	rjmp	.+158    	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     6f8:	c0 3a       	cpi	r28, 0xA0	; 160
     6fa:	ea e0       	ldi	r30, 0x0A	; 10
     6fc:	de 07       	cpc	r29, r30
     6fe:	21 f4       	brne	.+8      	; 0x708 <usart_init_rs232+0x1f0>
     700:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     702:	85 e0       	ldi	r24, 0x05	; 5
     704:	99 d2       	rcall	.+1330   	; 0xc38 <sysclk_enable_module>
     706:	47 c0       	rjmp	.+142    	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     708:	c0 3a       	cpi	r28, 0xA0	; 160
     70a:	fb e0       	ldi	r31, 0x0B	; 11
     70c:	df 07       	cpc	r29, r31
     70e:	21 f4       	brne	.+8      	; 0x718 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     710:	60 e1       	ldi	r22, 0x10	; 16
     712:	86 e0       	ldi	r24, 0x06	; 6
     714:	91 d2       	rcall	.+1314   	; 0xc38 <sysclk_enable_module>
     716:	3f c0       	rjmp	.+126    	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     718:	c0 3b       	cpi	r28, 0xB0	; 176
     71a:	88 e0       	ldi	r24, 0x08	; 8
     71c:	d8 07       	cpc	r29, r24
     71e:	21 f4       	brne	.+8      	; 0x728 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     720:	60 e2       	ldi	r22, 0x20	; 32
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	89 d2       	rcall	.+1298   	; 0xc38 <sysclk_enable_module>
     726:	37 c0       	rjmp	.+110    	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     728:	c0 3b       	cpi	r28, 0xB0	; 176
     72a:	e9 e0       	ldi	r30, 0x09	; 9
     72c:	de 07       	cpc	r29, r30
     72e:	21 f4       	brne	.+8      	; 0x738 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
     730:	60 e2       	ldi	r22, 0x20	; 32
     732:	84 e0       	ldi	r24, 0x04	; 4
     734:	81 d2       	rcall	.+1282   	; 0xc38 <sysclk_enable_module>
     736:	2f c0       	rjmp	.+94     	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
     738:	c0 3b       	cpi	r28, 0xB0	; 176
     73a:	fa e0       	ldi	r31, 0x0A	; 10
     73c:	df 07       	cpc	r29, r31
     73e:	21 f4       	brne	.+8      	; 0x748 <usart_init_rs232+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
     740:	60 e2       	ldi	r22, 0x20	; 32
     742:	85 e0       	ldi	r24, 0x05	; 5
     744:	79 d2       	rcall	.+1266   	; 0xc38 <sysclk_enable_module>
     746:	27 c0       	rjmp	.+78     	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
     748:	c0 3b       	cpi	r28, 0xB0	; 176
     74a:	8b e0       	ldi	r24, 0x0B	; 11
     74c:	d8 07       	cpc	r29, r24
     74e:	21 f4       	brne	.+8      	; 0x758 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     750:	60 e2       	ldi	r22, 0x20	; 32
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	71 d2       	rcall	.+1250   	; 0xc38 <sysclk_enable_module>
     756:	1f c0       	rjmp	.+62     	; 0x796 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     758:	c0 38       	cpi	r28, 0x80	; 128
     75a:	e4 e0       	ldi	r30, 0x04	; 4
     75c:	de 07       	cpc	r29, r30
     75e:	21 f4       	brne	.+8      	; 0x768 <usart_init_rs232+0x250>
     760:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	69 d2       	rcall	.+1234   	; 0xc38 <sysclk_enable_module>
     766:	17 c0       	rjmp	.+46     	; 0x796 <usart_init_rs232+0x27e>
     768:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
     76a:	f4 e0       	ldi	r31, 0x04	; 4
     76c:	df 07       	cpc	r29, r31
     76e:	21 f4       	brne	.+8      	; 0x778 <usart_init_rs232+0x260>
     770:	60 e4       	ldi	r22, 0x40	; 64
     772:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     774:	61 d2       	rcall	.+1218   	; 0xc38 <sysclk_enable_module>
     776:	0f c0       	rjmp	.+30     	; 0x796 <usart_init_rs232+0x27e>
     778:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     77a:	84 e0       	ldi	r24, 0x04	; 4
     77c:	d8 07       	cpc	r29, r24
     77e:	21 f4       	brne	.+8      	; 0x788 <usart_init_rs232+0x270>
     780:	60 e4       	ldi	r22, 0x40	; 64
     782:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
     784:	59 d2       	rcall	.+1202   	; 0xc38 <sysclk_enable_module>
     786:	07 c0       	rjmp	.+14     	; 0x796 <usart_init_rs232+0x27e>
     788:	c0 3b       	cpi	r28, 0xB0	; 176
     78a:	e4 e0       	ldi	r30, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
     78c:	de 07       	cpc	r29, r30
     78e:	19 f4       	brne	.+6      	; 0x796 <usart_init_rs232+0x27e>
     790:	60 e4       	ldi	r22, 0x40	; 64
     792:	86 e0       	ldi	r24, 0x06	; 6
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     794:	51 d2       	rcall	.+1186   	; 0xc38 <sysclk_enable_module>
     796:	8d 81       	ldd	r24, Y+5	; 0x05
     798:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     79a:	8d 83       	std	Y+5, r24	; 0x05
     79c:	f8 01       	movw	r30, r16
     79e:	95 81       	ldd	r25, Z+5	; 0x05
     7a0:	84 81       	ldd	r24, Z+4	; 0x04
     7a2:	89 2b       	or	r24, r25
     7a4:	96 81       	ldd	r25, Z+6	; 0x06
     7a6:	91 11       	cpse	r25, r1
     7a8:	98 e0       	ldi	r25, 0x08	; 8
     7aa:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     7ac:	8d 83       	std	Y+5, r24	; 0x05
     7ae:	f8 01       	movw	r30, r16
     7b0:	40 81       	ld	r20, Z
     7b2:	51 81       	ldd	r21, Z+1	; 0x01
     7b4:	62 81       	ldd	r22, Z+2	; 0x02
     7b6:	73 81       	ldd	r23, Z+3	; 0x03
     7b8:	00 e0       	ldi	r16, 0x00	; 0
     7ba:	18 e4       	ldi	r17, 0x48	; 72
     7bc:	28 ee       	ldi	r18, 0xE8	; 232
     7be:	31 e0       	ldi	r19, 0x01	; 1
     7c0:	ce 01       	movw	r24, r28
     7c2:	97 dd       	rcall	.-1234   	; 0x2f2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	98 60       	ori	r25, 0x08	; 8
     7c8:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     7ca:	9c 81       	ldd	r25, Y+4	; 0x04
     7cc:	90 61       	ori	r25, 0x10	; 16
     7ce:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	0f 91       	pop	r16
     7d8:	08 95       	ret

000007da <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	08 b6       	in	r0, 0x38	; 56
     7e6:	0f 92       	push	r0
     7e8:	18 be       	out	0x38, r1	; 56
     7ea:	09 b6       	in	r0, 0x39	; 57
     7ec:	0f 92       	push	r0
     7ee:	19 be       	out	0x39, r1	; 57
     7f0:	0b b6       	in	r0, 0x3b	; 59
     7f2:	0f 92       	push	r0
     7f4:	1b be       	out	0x3b, r1	; 59
     7f6:	2f 93       	push	r18
     7f8:	3f 93       	push	r19
     7fa:	4f 93       	push	r20
     7fc:	5f 93       	push	r21
     7fe:	6f 93       	push	r22
     800:	7f 93       	push	r23
     802:	8f 93       	push	r24
     804:	9f 93       	push	r25
     806:	af 93       	push	r26
     808:	bf 93       	push	r27
     80a:	ef 93       	push	r30
     80c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     80e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     812:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     816:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <adca_callback>
     81a:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <adca_callback+0x1>
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	19 95       	eicall
}
     826:	ff 91       	pop	r31
     828:	ef 91       	pop	r30
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	0f 90       	pop	r0
     840:	0b be       	out	0x3b, r0	; 59
     842:	0f 90       	pop	r0
     844:	09 be       	out	0x39, r0	; 57
     846:	0f 90       	pop	r0
     848:	08 be       	out	0x38, r0	; 56
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     854:	1f 92       	push	r1
     856:	0f 92       	push	r0
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	0f 92       	push	r0
     85c:	11 24       	eor	r1, r1
     85e:	08 b6       	in	r0, 0x38	; 56
     860:	0f 92       	push	r0
     862:	18 be       	out	0x38, r1	; 56
     864:	09 b6       	in	r0, 0x39	; 57
     866:	0f 92       	push	r0
     868:	19 be       	out	0x39, r1	; 57
     86a:	0b b6       	in	r0, 0x3b	; 59
     86c:	0f 92       	push	r0
     86e:	1b be       	out	0x3b, r1	; 59
     870:	2f 93       	push	r18
     872:	3f 93       	push	r19
     874:	4f 93       	push	r20
     876:	5f 93       	push	r21
     878:	6f 93       	push	r22
     87a:	7f 93       	push	r23
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
     880:	af 93       	push	r26
     882:	bf 93       	push	r27
     884:	ef 93       	push	r30
     886:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     888:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     88c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     890:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <adca_callback>
     894:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <adca_callback+0x1>
     898:	62 e0       	ldi	r22, 0x02	; 2
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	92 e0       	ldi	r25, 0x02	; 2
     89e:	19 95       	eicall
}
     8a0:	ff 91       	pop	r31
     8a2:	ef 91       	pop	r30
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	0f 90       	pop	r0
     8ba:	0b be       	out	0x3b, r0	; 59
     8bc:	0f 90       	pop	r0
     8be:	09 be       	out	0x39, r0	; 57
     8c0:	0f 90       	pop	r0
     8c2:	08 be       	out	0x38, r0	; 56
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	0f 90       	pop	r0
     8ca:	1f 90       	pop	r1
     8cc:	18 95       	reti

000008ce <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     8ce:	1f 92       	push	r1
     8d0:	0f 92       	push	r0
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	0f 92       	push	r0
     8d6:	11 24       	eor	r1, r1
     8d8:	08 b6       	in	r0, 0x38	; 56
     8da:	0f 92       	push	r0
     8dc:	18 be       	out	0x38, r1	; 56
     8de:	09 b6       	in	r0, 0x39	; 57
     8e0:	0f 92       	push	r0
     8e2:	19 be       	out	0x39, r1	; 57
     8e4:	0b b6       	in	r0, 0x3b	; 59
     8e6:	0f 92       	push	r0
     8e8:	1b be       	out	0x3b, r1	; 59
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     902:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     906:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     90a:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <adca_callback>
     90e:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <adca_callback+0x1>
     912:	64 e0       	ldi	r22, 0x04	; 4
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	92 e0       	ldi	r25, 0x02	; 2
     918:	19 95       	eicall
}
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0b be       	out	0x3b, r0	; 59
     936:	0f 90       	pop	r0
     938:	09 be       	out	0x39, r0	; 57
     93a:	0f 90       	pop	r0
     93c:	08 be       	out	0x38, r0	; 56
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	08 b6       	in	r0, 0x38	; 56
     954:	0f 92       	push	r0
     956:	18 be       	out	0x38, r1	; 56
     958:	09 b6       	in	r0, 0x39	; 57
     95a:	0f 92       	push	r0
     95c:	19 be       	out	0x39, r1	; 57
     95e:	0b b6       	in	r0, 0x3b	; 59
     960:	0f 92       	push	r0
     962:	1b be       	out	0x3b, r1	; 59
     964:	2f 93       	push	r18
     966:	3f 93       	push	r19
     968:	4f 93       	push	r20
     96a:	5f 93       	push	r21
     96c:	6f 93       	push	r22
     96e:	7f 93       	push	r23
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	af 93       	push	r26
     976:	bf 93       	push	r27
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     97c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     980:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     984:	e0 91 26 20 	lds	r30, 0x2026	; 0x802026 <adca_callback>
     988:	f0 91 27 20 	lds	r31, 0x2027	; 0x802027 <adca_callback+0x1>
     98c:	68 e0       	ldi	r22, 0x08	; 8
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	19 95       	eicall
}
     994:	ff 91       	pop	r31
     996:	ef 91       	pop	r30
     998:	bf 91       	pop	r27
     99a:	af 91       	pop	r26
     99c:	9f 91       	pop	r25
     99e:	8f 91       	pop	r24
     9a0:	7f 91       	pop	r23
     9a2:	6f 91       	pop	r22
     9a4:	5f 91       	pop	r21
     9a6:	4f 91       	pop	r20
     9a8:	3f 91       	pop	r19
     9aa:	2f 91       	pop	r18
     9ac:	0f 90       	pop	r0
     9ae:	0b be       	out	0x3b, r0	; 59
     9b0:	0f 90       	pop	r0
     9b2:	09 be       	out	0x39, r0	; 57
     9b4:	0f 90       	pop	r0
     9b6:	08 be       	out	0x38, r0	; 56
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	08 b6       	in	r0, 0x38	; 56
     9ce:	0f 92       	push	r0
     9d0:	18 be       	out	0x38, r1	; 56
     9d2:	09 b6       	in	r0, 0x39	; 57
     9d4:	0f 92       	push	r0
     9d6:	19 be       	out	0x39, r1	; 57
     9d8:	0b b6       	in	r0, 0x3b	; 59
     9da:	0f 92       	push	r0
     9dc:	1b be       	out	0x3b, r1	; 59
     9de:	2f 93       	push	r18
     9e0:	3f 93       	push	r19
     9e2:	4f 93       	push	r20
     9e4:	5f 93       	push	r21
     9e6:	6f 93       	push	r22
     9e8:	7f 93       	push	r23
     9ea:	8f 93       	push	r24
     9ec:	9f 93       	push	r25
     9ee:	af 93       	push	r26
     9f0:	bf 93       	push	r27
     9f2:	ef 93       	push	r30
     9f4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     9f6:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     9fa:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     9fe:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adcb_callback>
     a02:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adcb_callback+0x1>
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	80 e4       	ldi	r24, 0x40	; 64
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	19 95       	eicall
}
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0b be       	out	0x3b, r0	; 59
     a2a:	0f 90       	pop	r0
     a2c:	09 be       	out	0x39, r0	; 57
     a2e:	0f 90       	pop	r0
     a30:	08 be       	out	0x38, r0	; 56
     a32:	0f 90       	pop	r0
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	0f 90       	pop	r0
     a38:	1f 90       	pop	r1
     a3a:	18 95       	reti

00000a3c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     a3c:	1f 92       	push	r1
     a3e:	0f 92       	push	r0
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	0f 92       	push	r0
     a44:	11 24       	eor	r1, r1
     a46:	08 b6       	in	r0, 0x38	; 56
     a48:	0f 92       	push	r0
     a4a:	18 be       	out	0x38, r1	; 56
     a4c:	09 b6       	in	r0, 0x39	; 57
     a4e:	0f 92       	push	r0
     a50:	19 be       	out	0x39, r1	; 57
     a52:	0b b6       	in	r0, 0x3b	; 59
     a54:	0f 92       	push	r0
     a56:	1b be       	out	0x3b, r1	; 59
     a58:	2f 93       	push	r18
     a5a:	3f 93       	push	r19
     a5c:	4f 93       	push	r20
     a5e:	5f 93       	push	r21
     a60:	6f 93       	push	r22
     a62:	7f 93       	push	r23
     a64:	8f 93       	push	r24
     a66:	9f 93       	push	r25
     a68:	af 93       	push	r26
     a6a:	bf 93       	push	r27
     a6c:	ef 93       	push	r30
     a6e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a70:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     a74:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     a78:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adcb_callback>
     a7c:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adcb_callback+0x1>
     a80:	62 e0       	ldi	r22, 0x02	; 2
     a82:	80 e4       	ldi	r24, 0x40	; 64
     a84:	92 e0       	ldi	r25, 0x02	; 2
     a86:	19 95       	eicall
}
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0b be       	out	0x3b, r0	; 59
     aa4:	0f 90       	pop	r0
     aa6:	09 be       	out	0x39, r0	; 57
     aa8:	0f 90       	pop	r0
     aaa:	08 be       	out	0x38, r0	; 56
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	08 b6       	in	r0, 0x38	; 56
     ac2:	0f 92       	push	r0
     ac4:	18 be       	out	0x38, r1	; 56
     ac6:	09 b6       	in	r0, 0x39	; 57
     ac8:	0f 92       	push	r0
     aca:	19 be       	out	0x39, r1	; 57
     acc:	0b b6       	in	r0, 0x3b	; 59
     ace:	0f 92       	push	r0
     ad0:	1b be       	out	0x3b, r1	; 59
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     aea:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     aee:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     af2:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adcb_callback>
     af6:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adcb_callback+0x1>
     afa:	64 e0       	ldi	r22, 0x04	; 4
     afc:	80 e4       	ldi	r24, 0x40	; 64
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	19 95       	eicall
}
     b02:	ff 91       	pop	r31
     b04:	ef 91       	pop	r30
     b06:	bf 91       	pop	r27
     b08:	af 91       	pop	r26
     b0a:	9f 91       	pop	r25
     b0c:	8f 91       	pop	r24
     b0e:	7f 91       	pop	r23
     b10:	6f 91       	pop	r22
     b12:	5f 91       	pop	r21
     b14:	4f 91       	pop	r20
     b16:	3f 91       	pop	r19
     b18:	2f 91       	pop	r18
     b1a:	0f 90       	pop	r0
     b1c:	0b be       	out	0x3b, r0	; 59
     b1e:	0f 90       	pop	r0
     b20:	09 be       	out	0x39, r0	; 57
     b22:	0f 90       	pop	r0
     b24:	08 be       	out	0x38, r0	; 56
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	08 b6       	in	r0, 0x38	; 56
     b3c:	0f 92       	push	r0
     b3e:	18 be       	out	0x38, r1	; 56
     b40:	09 b6       	in	r0, 0x39	; 57
     b42:	0f 92       	push	r0
     b44:	19 be       	out	0x39, r1	; 57
     b46:	0b b6       	in	r0, 0x3b	; 59
     b48:	0f 92       	push	r0
     b4a:	1b be       	out	0x3b, r1	; 59
     b4c:	2f 93       	push	r18
     b4e:	3f 93       	push	r19
     b50:	4f 93       	push	r20
     b52:	5f 93       	push	r21
     b54:	6f 93       	push	r22
     b56:	7f 93       	push	r23
     b58:	8f 93       	push	r24
     b5a:	9f 93       	push	r25
     b5c:	af 93       	push	r26
     b5e:	bf 93       	push	r27
     b60:	ef 93       	push	r30
     b62:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b64:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     b68:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b6c:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <adcb_callback>
     b70:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <adcb_callback+0x1>
     b74:	68 e0       	ldi	r22, 0x08	; 8
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	19 95       	eicall
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0b be       	out	0x3b, r0	; 59
     b98:	0f 90       	pop	r0
     b9a:	09 be       	out	0x39, r0	; 57
     b9c:	0f 90       	pop	r0
     b9e:	08 be       	out	0x38, r0	; 56
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     baa:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     bac:	80 91 2a 20 	lds	r24, 0x202A	; 0x80202a <stdio_base>
     bb0:	90 91 2b 20 	lds	r25, 0x202B	; 0x80202b <stdio_base+0x1>
     bb4:	e0 91 28 20 	lds	r30, 0x2028	; 0x802028 <ptr_put>
     bb8:	f0 91 29 20 	lds	r31, 0x2029	; 0x802029 <ptr_put+0x1>
     bbc:	19 95       	eicall
     bbe:	99 23       	and	r25, r25
     bc0:	1c f0       	brlt	.+6      	; 0xbc8 <_write+0x1e>
		return -1;
	}
	return 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     bcc:	08 95       	ret

00000bce <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	1f 92       	push	r1
     bd4:	1f 92       	push	r1
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     be0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     be4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     be8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     bec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     bf0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     bf4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bf8:	8f b7       	in	r24, 0x3f	; 63
     bfa:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     bfc:	f8 94       	cli
	return flags;
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     c00:	e0 e5       	ldi	r30, 0x50	; 80
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	82 60       	ori	r24, 0x02	; 2
     c08:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c0a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     c0c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     c0e:	81 ff       	sbrs	r24, 1
     c10:	fd cf       	rjmp	.-6      	; 0xc0c <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	80 e4       	ldi	r24, 0x40	; 64
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	25 d0       	rcall	.+74     	; 0xc64 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c1a:	8f b7       	in	r24, 0x3f	; 63
     c1c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c1e:	f8 94       	cli
	return flags;
     c20:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     c22:	e0 e5       	ldi	r30, 0x50	; 80
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8e 7f       	andi	r24, 0xFE	; 254
     c2a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c2c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	1f 92       	push	r1
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c42:	9f b7       	in	r25, 0x3f	; 63
     c44:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c46:	f8 94       	cli
	return flags;
     c48:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     c4a:	e8 2f       	mov	r30, r24
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	e0 59       	subi	r30, 0x90	; 144
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	60 95       	com	r22
     c54:	80 81       	ld	r24, Z
     c56:	68 23       	and	r22, r24
     c58:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c5a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     c5c:	0f 90       	pop	r0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     c64:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     c66:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     c68:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     c6a:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     c6c:	60 83       	st	Z, r22
	ret                             // Return to caller
     c6e:	08 95       	ret

00000c70 <__portable_avr_delay_cycles>:
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
}
     c70:	04 c0       	rjmp	.+8      	; 0xc7a <__portable_avr_delay_cycles+0xa>
     c72:	61 50       	subi	r22, 0x01	; 1
     c74:	71 09       	sbc	r23, r1
     c76:	81 09       	sbc	r24, r1
     c78:	91 09       	sbc	r25, r1
     c7a:	61 15       	cp	r22, r1
     c7c:	71 05       	cpc	r23, r1
     c7e:	81 05       	cpc	r24, r1
     c80:	91 05       	cpc	r25, r1
     c82:	b9 f7       	brne	.-18     	; 0xc72 <__portable_avr_delay_cycles+0x2>
     c84:	08 95       	ret

00000c86 <read16>:
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	8c 01       	movw	r16, r24
     c90:	5c d4       	rcall	.+2232   	; 0x154a <spiread>
     c92:	c8 2f       	mov	r28, r24
     c94:	d0 e0       	ldi	r29, 0x00	; 0
     c96:	dc 2f       	mov	r29, r28
     c98:	cc 27       	eor	r28, r28
     c9a:	c8 01       	movw	r24, r16
     c9c:	56 d4       	rcall	.+2220   	; 0x154a <spiread>
     c9e:	9e 01       	movw	r18, r28
     ca0:	28 2b       	or	r18, r24
     ca2:	c9 01       	movw	r24, r18
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <read24>:
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
     cbc:	46 d4       	rcall	.+2188   	; 0x154a <spiread>
     cbe:	c8 2e       	mov	r12, r24
     cc0:	d1 2c       	mov	r13, r1
     cc2:	e1 2c       	mov	r14, r1
     cc4:	f1 2c       	mov	r15, r1
     cc6:	76 01       	movw	r14, r12
     cc8:	dd 24       	eor	r13, r13
     cca:	cc 24       	eor	r12, r12
     ccc:	ce 01       	movw	r24, r28
     cce:	3d d4       	rcall	.+2170   	; 0x154a <spiread>
     cd0:	d8 2a       	or	r13, r24
     cd2:	ce 01       	movw	r24, r28
     cd4:	3a d4       	rcall	.+2164   	; 0x154a <spiread>
     cd6:	a7 01       	movw	r20, r14
     cd8:	96 01       	movw	r18, r12
     cda:	28 2b       	or	r18, r24
     cdc:	ca 01       	movw	r24, r20
     cde:	b9 01       	movw	r22, r18
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	08 95       	ret

00000cee <define_new_MS56XX_default_OSR>:
	MS56XX_t pressure_sensor;
	pressure_sensor.model = model;
	pressure_sensor.select_pin = select_pin;
	pressure_sensor.spi = spi;
	pressure_sensor.osr = osr;
	return pressure_sensor;
     cee:	fc 01       	movw	r30, r24
     cf0:	20 83       	st	Z, r18
     cf2:	41 83       	std	Z+1, r20	; 0x01
     cf4:	52 83       	std	Z+2, r21	; 0x02
     cf6:	63 83       	std	Z+3, r22	; 0x03
     cf8:	15 86       	std	Z+13, r1	; 0x0d
}

MS56XX_t define_new_MS56XX_default_OSR(SENSOR_TYPE model, SPI_t* spi, ioport_pin_t select_pin)
{
	return define_new_MS56XX(model, spi, select_pin, OSR_4096); //Default to highest oversampling rate if not provided
}
     cfa:	08 95       	ret

00000cfc <pressureSensorReset>:

void pressureSensorReset(MS56XX_t* sensor)
{
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
	spiselect(sensor->select_pin);
     d02:	88 81       	ld	r24, Y
     d04:	30 d4       	rcall	.+2144   	; 0x1566 <spiselect>
	spiwrite(sensor->spi, 0b00011110);
     d06:	6e e1       	ldi	r22, 0x1E	; 30
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	26 d4       	rcall	.+2124   	; 0x155a <spiwrite>
	delay_ms(5);
     d0e:	6b e2       	ldi	r22, 0x2B	; 43
     d10:	78 e6       	ldi	r23, 0x68	; 104
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
	spideselect(sensor->select_pin);
     d16:	ac df       	rcall	.-168    	; 0xc70 <__portable_avr_delay_cycles>
     d18:	88 81       	ld	r24, Y
     d1a:	39 d4       	rcall	.+2162   	; 0x158e <spideselect>
	delay_ms(1);
     d1c:	66 ed       	ldi	r22, 0xD6	; 214
     d1e:	74 e1       	ldi	r23, 0x14	; 20
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a5 df       	rcall	.-182    	; 0xc70 <__portable_avr_delay_cycles>
}
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	08 95       	ret

00000d2c <calibratePressureSensor>:

void calibratePressureSensor(MS56XX_t* sensor)
//Set up the appropriate SPI before calling this
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
	pressureSensorReset(sensor);
     d32:	e4 df       	rcall	.-56     	; 0xcfc <pressureSensorReset>
	
	//Get all the lovely little calibration constants
	spiselect(sensor->select_pin);
     d34:	88 81       	ld	r24, Y
     d36:	17 d4       	rcall	.+2094   	; 0x1566 <spiselect>
	spiwrite(sensor->spi, 0b10100010); //Bits 1 - 3 are 001, for C1
     d38:	62 ea       	ldi	r22, 0xA2	; 162
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	0d d4       	rcall	.+2074   	; 0x155a <spiwrite>
	sensor->SENSt1 = read16(sensor->spi);
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	a0 df       	rcall	.-192    	; 0xc86 <read16>
     d46:	8e 87       	std	Y+14, r24	; 0x0e
     d48:	9f 87       	std	Y+15, r25	; 0x0f
	spideselect(sensor->select_pin);
     d4a:	88 81       	ld	r24, Y
     d4c:	20 d4       	rcall	.+2112   	; 0x158e <spideselect>
     d4e:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     d50:	0a d4       	rcall	.+2068   	; 0x1566 <spiselect>
     d52:	64 ea       	ldi	r22, 0xA4	; 164
	spiwrite(sensor->spi, 0b10100100); //010 = 2, for C2
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	00 d4       	rcall	.+2048   	; 0x155a <spiwrite>
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
	sensor->OFFt1 = read16(sensor->spi);
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	93 df       	rcall	.-218    	; 0xc86 <read16>
     d60:	88 8b       	std	Y+16, r24	; 0x10
     d62:	99 8b       	std	Y+17, r25	; 0x11
     d64:	88 81       	ld	r24, Y
	spideselect(sensor->select_pin);
     d66:	13 d4       	rcall	.+2086   	; 0x158e <spideselect>
     d68:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     d6a:	fd d3       	rcall	.+2042   	; 0x1566 <spiselect>
     d6c:	66 ea       	ldi	r22, 0xA6	; 166
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
	spiwrite(sensor->spi, 0b10100110); // 011 = 3, for C3
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	f3 d3       	rcall	.+2022   	; 0x155a <spiwrite>
     d74:	89 81       	ldd	r24, Y+1	; 0x01
	sensor->TCS = read16(sensor->spi);
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	86 df       	rcall	.-244    	; 0xc86 <read16>
     d7a:	8a 8b       	std	Y+18, r24	; 0x12
     d7c:	9b 8b       	std	Y+19, r25	; 0x13
	spideselect(sensor->select_pin);
     d7e:	88 81       	ld	r24, Y
     d80:	06 d4       	rcall	.+2060   	; 0x158e <spideselect>

	spiselect(sensor->select_pin);
     d82:	88 81       	ld	r24, Y
     d84:	f0 d3       	rcall	.+2016   	; 0x1566 <spiselect>
	spiwrite(sensor->spi, 0b10101000); // 100 = 4
     d86:	68 ea       	ldi	r22, 0xA8	; 168
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	e6 d3       	rcall	.+1996   	; 0x155a <spiwrite>
	sensor->TCO = read16(sensor->spi);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	79 df       	rcall	.-270    	; 0xc86 <read16>
     d94:	8c 8b       	std	Y+20, r24	; 0x14
	spideselect(sensor->select_pin);
     d96:	9d 8b       	std	Y+21, r25	; 0x15
     d98:	88 81       	ld	r24, Y

	spiselect(sensor->select_pin);
     d9a:	f9 d3       	rcall	.+2034   	; 0x158e <spideselect>
     d9c:	88 81       	ld	r24, Y
	spiwrite(sensor->spi, 0b10101010); // 101 = 5
     d9e:	e3 d3       	rcall	.+1990   	; 0x1566 <spiselect>
     da0:	6a ea       	ldi	r22, 0xAA	; 170
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
	sensor->Tref = read16(sensor->spi);
     da6:	d9 d3       	rcall	.+1970   	; 0x155a <spiwrite>
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	6c df       	rcall	.-296    	; 0xc86 <read16>
     dae:	8e 8b       	std	Y+22, r24	; 0x16
	spideselect(sensor->select_pin);
     db0:	9f 8b       	std	Y+23, r25	; 0x17
     db2:	88 81       	ld	r24, Y
     db4:	ec d3       	rcall	.+2008   	; 0x158e <spideselect>


	spiselect(sensor->select_pin);
     db6:	88 81       	ld	r24, Y
     db8:	d6 d3       	rcall	.+1964   	; 0x1566 <spiselect>
     dba:	6c ea       	ldi	r22, 0xAC	; 172
	spiwrite(sensor->spi, 0b10101100); // 110 = 6
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	9a 81       	ldd	r25, Y+2	; 0x02
     dc0:	cc d3       	rcall	.+1944   	; 0x155a <spiwrite>
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	9a 81       	ldd	r25, Y+2	; 0x02
	sensor->TEMPSENS = read16(sensor->spi);
     dc6:	5f df       	rcall	.-322    	; 0xc86 <read16>
     dc8:	88 8f       	std	Y+24, r24	; 0x18
     dca:	99 8f       	std	Y+25, r25	; 0x19
     dcc:	88 81       	ld	r24, Y
     dce:	df d3       	rcall	.+1982   	; 0x158e <spideselect>
     dd0:	df 91       	pop	r29
	spideselect(sensor->select_pin);
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <get_read_info>:
     dd6:	82 30       	cpi	r24, 0x02	; 2
			sensor->OFFt1, 
			sensor->TCS, 
			sensor->TCO, 
			sensor->Tref, 
			sensor->TEMPSENS);*/
}
     dd8:	29 f1       	breq	.+74     	; 0xe24 <get_read_info+0x4e>
     dda:	28 f4       	brcc	.+10     	; 0xde6 <get_read_info+0x10>
     ddc:	88 23       	and	r24, r24
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
 }
 
 uint8_t get_read_info(OSR_Settings osr, uint8_t* D1_read_cmd, uint8_t* D2_read_cmd, uint16_t* delay_time_us)
 {
	 switch (osr)
     dde:	41 f0       	breq	.+16     	; 0xdf0 <get_read_info+0x1a>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	99 f0       	breq	.+38     	; 0xe0a <get_read_info+0x34>
     de4:	46 c0       	rjmp	.+140    	; 0xe72 <get_read_info+0x9c>
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	51 f1       	breq	.+84     	; 0xe3e <get_read_info+0x68>
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	a9 f1       	breq	.+106    	; 0xe58 <get_read_info+0x82>
     dee:	41 c0       	rjmp	.+130    	; 0xe72 <get_read_info+0x9c>
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
     df0:	88 e4       	ldi	r24, 0x48	; 72
     df2:	fb 01       	movw	r30, r22
     df4:	80 83       	st	Z, r24
			*D2_read_cmd = 0x58;
     df6:	88 e5       	ldi	r24, 0x58	; 88
     df8:	fa 01       	movw	r30, r20
     dfa:	80 83       	st	Z, r24
			*delay_time_us = 9040;
     dfc:	80 e5       	ldi	r24, 0x50	; 80
     dfe:	93 e2       	ldi	r25, 0x23	; 35
     e00:	f9 01       	movw	r30, r18
     e02:	80 83       	st	Z, r24
     e04:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     e06:	80 e0       	ldi	r24, 0x00	; 0
	 {
		 case OSR_4096:
			*D1_read_cmd = 0x48;
			*D2_read_cmd = 0x58;
			*delay_time_us = 9040;
			break;
     e08:	08 95       	ret
		case OSR_2048:
			*D1_read_cmd = 0x46;
     e0a:	86 e4       	ldi	r24, 0x46	; 70
     e0c:	fb 01       	movw	r30, r22
     e0e:	80 83       	st	Z, r24
			*D2_read_cmd = 0x56;
     e10:	86 e5       	ldi	r24, 0x56	; 86
     e12:	fa 01       	movw	r30, r20
     e14:	80 83       	st	Z, r24
			*delay_time_us = 4540;
     e16:	8c eb       	ldi	r24, 0xBC	; 188
     e18:	91 e1       	ldi	r25, 0x11	; 17
     e1a:	f9 01       	movw	r30, r18
     e1c:	80 83       	st	Z, r24
     e1e:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     e20:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_2048:
			*D1_read_cmd = 0x46;
			*D2_read_cmd = 0x56;
			*delay_time_us = 4540;
			break;
     e22:	08 95       	ret
		case OSR_1024:
			*D1_read_cmd = 0x44;
     e24:	84 e4       	ldi	r24, 0x44	; 68
     e26:	fb 01       	movw	r30, r22
     e28:	80 83       	st	Z, r24
			*D2_read_cmd = 0x54;
     e2a:	84 e5       	ldi	r24, 0x54	; 84
     e2c:	fa 01       	movw	r30, r20
     e2e:	80 83       	st	Z, r24
			*delay_time_us = 2280;
     e30:	88 ee       	ldi	r24, 0xE8	; 232
     e32:	98 e0       	ldi	r25, 0x08	; 8
     e34:	f9 01       	movw	r30, r18
     e36:	80 83       	st	Z, r24
     e38:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     e3a:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_1024:
			*D1_read_cmd = 0x44;
			*D2_read_cmd = 0x54;
			*delay_time_us = 2280;
			break;
     e3c:	08 95       	ret
		case OSR_512:
			*D1_read_cmd = 0x42;
     e3e:	82 e4       	ldi	r24, 0x42	; 66
     e40:	fb 01       	movw	r30, r22
     e42:	80 83       	st	Z, r24
			*D2_read_cmd = 0x52;
     e44:	82 e5       	ldi	r24, 0x52	; 82
     e46:	fa 01       	movw	r30, r20
     e48:	80 83       	st	Z, r24
			*delay_time_us = 1170;
     e4a:	82 e9       	ldi	r24, 0x92	; 146
     e4c:	94 e0       	ldi	r25, 0x04	; 4
     e4e:	f9 01       	movw	r30, r18
     e50:	80 83       	st	Z, r24
     e52:	91 83       	std	Z+1, r25	; 0x01
			*delay_time_us = 600;
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     e54:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_512:
			*D1_read_cmd = 0x42;
			*D2_read_cmd = 0x52;
			*delay_time_us = 1170;
			break;
     e56:	08 95       	ret
		case OSR_256:
			*D1_read_cmd = 0x40;
     e58:	80 e4       	ldi	r24, 0x40	; 64
     e5a:	fb 01       	movw	r30, r22
     e5c:	80 83       	st	Z, r24
			*D2_read_cmd = 0x50;
     e5e:	80 e5       	ldi	r24, 0x50	; 80
     e60:	fa 01       	movw	r30, r20
     e62:	80 83       	st	Z, r24
			*delay_time_us = 600;
     e64:	88 e5       	ldi	r24, 0x58	; 88
     e66:	92 e0       	ldi	r25, 0x02	; 2
     e68:	f9 01       	movw	r30, r18
     e6a:	80 83       	st	Z, r24
     e6c:	91 83       	std	Z+1, r25	; 0x01
			break;
		default:
			return 1; //Error
	 }
	 return 0; //Success
     e6e:	80 e0       	ldi	r24, 0x00	; 0
			break;
		case OSR_256:
			*D1_read_cmd = 0x40;
			*D2_read_cmd = 0x50;
			*delay_time_us = 600;
			break;
     e70:	08 95       	ret
		default:
			return 1; //Error
     e72:	81 e0       	ldi	r24, 0x01	; 1
	 }
	 return 0; //Success
 }
     e74:	08 95       	ret

00000e76 <readMS56XX>:
			sensor->TEMPSENS);*/
}


void readMS56XX(MS56XX_t* sensor)
 {
     e76:	2f 92       	push	r2
     e78:	3f 92       	push	r3
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	e5 97       	sbiw	r28, 0x35	; 53
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	4c 01       	movw	r8, r24
	uint32_t rawPressure = 0; //D1
	uint32_t rawTemp = 0; //D2
	
	//Assume data is valid unless any of the cases checked for are met
	sensor->data.valid = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	d4 01       	movw	r26, r8
     eaa:	1c 96       	adiw	r26, 0x0c	; 12
     eac:	8c 93       	st	X, r24
     eae:	1c 97       	sbiw	r26, 0x0c	; 12
	
	uint16_t delay_time;
	uint8_t D1_cmd, D2_cmd;
	if (get_read_info(sensor->osr, &D1_cmd, &D2_cmd, &delay_time)) //Return flag of 1 = OSR not supported
     eb0:	9e 01       	movw	r18, r28
     eb2:	2f 5f       	subi	r18, 0xFF	; 255
     eb4:	3f 4f       	sbci	r19, 0xFF	; 255
     eb6:	ae 01       	movw	r20, r28
     eb8:	4c 5f       	subi	r20, 0xFC	; 252
     eba:	5f 4f       	sbci	r21, 0xFF	; 255
     ebc:	be 01       	movw	r22, r28
     ebe:	6d 5f       	subi	r22, 0xFD	; 253
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	1d 96       	adiw	r26, 0x0d	; 13
     ec4:	8c 91       	ld	r24, X
     ec6:	87 df       	rcall	.-242    	; 0xdd6 <get_read_info>
     ec8:	88 23       	and	r24, r24
     eca:	19 f0       	breq	.+6      	; 0xed2 <readMS56XX+0x5c>
	{
		//Mark data as invalid and exit function
		sensor->data.valid = 0;
     ecc:	f4 01       	movw	r30, r8
     ece:	14 86       	std	Z+12, r1	; 0x0c
		return;
     ed0:	26 c3       	rjmp	.+1612   	; 0x151e <readMS56XX+0x6a8>
	}
	//If get_read_info succeeded, D1_cmd, D2_cmd, and delay_time will now have the appropriate values for the selected OSR

	//Ask for raw pressure, 4096 OSR
	spiselect(sensor->select_pin);
     ed2:	d4 01       	movw	r26, r8
     ed4:	8c 91       	ld	r24, X
     ed6:	47 d3       	rcall	.+1678   	; 0x1566 <spiselect>
	spiwrite(sensor->spi, D1_cmd);
     ed8:	6b 81       	ldd	r22, Y+3	; 0x03
     eda:	f4 01       	movw	r30, r8
     edc:	81 81       	ldd	r24, Z+1	; 0x01
     ede:	92 81       	ldd	r25, Z+2	; 0x02
     ee0:	3c d3       	rcall	.+1656   	; 0x155a <spiwrite>
	spideselect(sensor->select_pin);
     ee2:	d4 01       	movw	r26, r8
     ee4:	8c 91       	ld	r24, X
     ee6:	53 d3       	rcall	.+1702   	; 0x158e <spideselect>
     ee8:	49 81       	ldd	r20, Y+1	; 0x01

	delay_us(delay_time);
     eea:	5a 81       	ldd	r21, Y+2	; 0x02
     eec:	41 15       	cp	r20, r1
     eee:	51 05       	cpc	r21, r1
     ef0:	c1 f1       	breq	.+112    	; 0xf62 <readMS56XX+0xec>
     ef2:	a1 2c       	mov	r10, r1
     ef4:	0f 2e       	mov	r0, r31
     ef6:	f8 e4       	ldi	r31, 0x48	; 72
     ef8:	bf 2e       	mov	r11, r31
     efa:	f0 2d       	mov	r31, r0
     efc:	0f 2e       	mov	r0, r31
     efe:	f8 ee       	ldi	r31, 0xE8	; 232
     f00:	cf 2e       	mov	r12, r31
     f02:	f0 2d       	mov	r31, r0
     f04:	dd 24       	eor	r13, r13
     f06:	d3 94       	inc	r13
     f08:	e1 2c       	mov	r14, r1
     f0a:	f1 2c       	mov	r15, r1
     f0c:	00 e0       	ldi	r16, 0x00	; 0
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	24 2f       	mov	r18, r20
     f12:	35 2f       	mov	r19, r21
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
     f24:	0f 2e       	mov	r0, r31
     f26:	f6 e0       	ldi	r31, 0x06	; 6
     f28:	af 2e       	mov	r10, r31
     f2a:	f0 2d       	mov	r31, r0
     f2c:	b1 2c       	mov	r11, r1
     f2e:	c1 2c       	mov	r12, r1
     f30:	d1 2c       	mov	r13, r1
     f32:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivdi3>
     f36:	21 5c       	subi	r18, 0xC1	; 193
     f38:	3d 4b       	sbci	r19, 0xBD	; 189
     f3a:	40 4f       	sbci	r20, 0xF0	; 240
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	6f 4f       	sbci	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	8f 4f       	sbci	r24, 0xFF	; 255
     f44:	9f 4f       	sbci	r25, 0xFF	; 255
     f46:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <__floatundisf>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	34 e2       	ldi	r19, 0x24	; 36
     f4e:	44 e7       	ldi	r20, 0x74	; 116
     f50:	59 e4       	ldi	r21, 0x49	; 73
     f52:	3d d7       	rcall	.+3706   	; 0x1dce <__divsf3>
     f54:	a9 d7       	rcall	.+3922   	; 0x1ea8 <__fixunssfdi>
     f56:	62 2f       	mov	r22, r18
     f58:	73 2f       	mov	r23, r19
     f5a:	84 2f       	mov	r24, r20
     f5c:	95 2f       	mov	r25, r21
     f5e:	88 de       	rcall	.-752    	; 0xc70 <__portable_avr_delay_cycles>
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <readMS56XX+0xf6>
     f62:	66 e0       	ldi	r22, 0x06	; 6
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	82 de       	rcall	.-764    	; 0xc70 <__portable_avr_delay_cycles>
     f6c:	f4 01       	movw	r30, r8

	//Read off raw pressure (D1)
	spiselect(sensor->select_pin);
     f6e:	80 81       	ld	r24, Z
     f70:	fa d2       	rcall	.+1524   	; 0x1566 <spiselect>
     f72:	60 e0       	ldi	r22, 0x00	; 0
	spiwrite(sensor->spi, 0x0);
     f74:	d4 01       	movw	r26, r8
     f76:	11 96       	adiw	r26, 0x01	; 1
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	12 97       	sbiw	r26, 0x02	; 2
     f7e:	ed d2       	rcall	.+1498   	; 0x155a <spiwrite>
     f80:	f4 01       	movw	r30, r8
	rawPressure = read24(sensor->spi);
     f82:	81 81       	ldd	r24, Z+1	; 0x01
     f84:	92 81       	ldd	r25, Z+2	; 0x02
     f86:	93 de       	rcall	.-730    	; 0xcae <read24>
     f88:	6c a7       	std	Y+44, r22	; 0x2c
     f8a:	7d a7       	std	Y+45, r23	; 0x2d
     f8c:	8e a7       	std	Y+46, r24	; 0x2e
     f8e:	9f a7       	std	Y+47, r25	; 0x2f
	spideselect(sensor->select_pin);
     f90:	d4 01       	movw	r26, r8
     f92:	8c 91       	ld	r24, X
     f94:	fc d2       	rcall	.+1528   	; 0x158e <spideselect>
	
	//Ask for raw temperature, 4096 OSR
	spiselect(sensor->select_pin);
     f96:	f4 01       	movw	r30, r8
     f98:	80 81       	ld	r24, Z
     f9a:	e5 d2       	rcall	.+1482   	; 0x1566 <spiselect>
	spiwrite(sensor->spi, D2_cmd); //OSR = 4096
     f9c:	6c 81       	ldd	r22, Y+4	; 0x04
     f9e:	d4 01       	movw	r26, r8
     fa0:	11 96       	adiw	r26, 0x01	; 1
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	12 97       	sbiw	r26, 0x02	; 2
     fa8:	d8 d2       	rcall	.+1456   	; 0x155a <spiwrite>
     faa:	f4 01       	movw	r30, r8
	spideselect(sensor->select_pin);
     fac:	80 81       	ld	r24, Z
     fae:	ef d2       	rcall	.+1502   	; 0x158e <spideselect>
     fb0:	49 81       	ldd	r20, Y+1	; 0x01
     fb2:	5a 81       	ldd	r21, Y+2	; 0x02
	
	delay_us(delay_time);
     fb4:	41 15       	cp	r20, r1
     fb6:	51 05       	cpc	r21, r1
     fb8:	b9 f1       	breq	.+110    	; 0x1028 <readMS56XX+0x1b2>
     fba:	a1 2c       	mov	r10, r1
     fbc:	0f 2e       	mov	r0, r31
     fbe:	f8 e4       	ldi	r31, 0x48	; 72
     fc0:	bf 2e       	mov	r11, r31
     fc2:	f0 2d       	mov	r31, r0
     fc4:	0f 2e       	mov	r0, r31
     fc6:	f8 ee       	ldi	r31, 0xE8	; 232
     fc8:	cf 2e       	mov	r12, r31
     fca:	f0 2d       	mov	r31, r0
     fcc:	dd 24       	eor	r13, r13
     fce:	d3 94       	inc	r13
     fd0:	e1 2c       	mov	r14, r1
     fd2:	f1 2c       	mov	r15, r1
     fd4:	00 e0       	ldi	r16, 0x00	; 0
     fd6:	10 e0       	ldi	r17, 0x00	; 0
     fd8:	24 2f       	mov	r18, r20
     fda:	35 2f       	mov	r19, r21
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
     fec:	0f 2e       	mov	r0, r31
     fee:	f6 e0       	ldi	r31, 0x06	; 6
     ff0:	af 2e       	mov	r10, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	b1 2c       	mov	r11, r1
     ff6:	c1 2c       	mov	r12, r1
     ff8:	d1 2c       	mov	r13, r1
     ffa:	0e 94 09 12 	call	0x2412	; 0x2412 <__udivdi3>
     ffe:	21 5c       	subi	r18, 0xC1	; 193
    1000:	3d 4b       	sbci	r19, 0xBD	; 189
    1002:	40 4f       	sbci	r20, 0xF0	; 240
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	6f 4f       	sbci	r22, 0xFF	; 255
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	ea d7       	rcall	.+4052   	; 0x1fe4 <__floatundisf>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	34 e2       	ldi	r19, 0x24	; 36
    1014:	44 e7       	ldi	r20, 0x74	; 116
    1016:	59 e4       	ldi	r21, 0x49	; 73
    1018:	da d6       	rcall	.+3508   	; 0x1dce <__divsf3>
    101a:	46 d7       	rcall	.+3724   	; 0x1ea8 <__fixunssfdi>
    101c:	62 2f       	mov	r22, r18
    101e:	73 2f       	mov	r23, r19
    1020:	84 2f       	mov	r24, r20
    1022:	95 2f       	mov	r25, r21
    1024:	25 de       	rcall	.-950    	; 0xc70 <__portable_avr_delay_cycles>
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <readMS56XX+0x1bc>
    1028:	66 e0       	ldi	r22, 0x06	; 6
    102a:	70 e0       	ldi	r23, 0x00	; 0
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	1f de       	rcall	.-962    	; 0xc70 <__portable_avr_delay_cycles>

	//Read off raw temperature (D2)
	spiselect(sensor->select_pin);
    1032:	d4 01       	movw	r26, r8
    1034:	8c 91       	ld	r24, X
    1036:	97 d2       	rcall	.+1326   	; 0x1566 <spiselect>
	spiwrite(sensor->spi, 0x0);
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	f4 01       	movw	r30, r8
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	92 81       	ldd	r25, Z+2	; 0x02
    1040:	8c d2       	rcall	.+1304   	; 0x155a <spiwrite>
    1042:	d4 01       	movw	r26, r8
	rawTemp = read24(sensor->spi);
    1044:	11 96       	adiw	r26, 0x01	; 1
    1046:	8d 91       	ld	r24, X+
    1048:	9c 91       	ld	r25, X
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	30 de       	rcall	.-928    	; 0xcae <read24>
    104e:	6b 01       	movw	r12, r22
    1050:	7c 01       	movw	r14, r24
    1052:	f4 01       	movw	r30, r8
    1054:	80 81       	ld	r24, Z
	spideselect(sensor->select_pin);
    1056:	9b d2       	rcall	.+1334   	; 0x158e <spideselect>
    1058:	d4 01       	movw	r26, r8
    105a:	56 96       	adiw	r26, 0x16	; 22
    105c:	4d 91       	ld	r20, X+
	
	int32_t dT = rawTemp - (int32_t)(((int64_t)sensor->Tref) << 8);
	int32_t TEMP = (int32_t)(((int32_t)2000) + ((int32_t)(((int64_t)dT) * ((int64_t)sensor->TEMPSENS) >> 23)));
    105e:	5c 91       	ld	r21, X
    1060:	57 97       	sbiw	r26, 0x17	; 23
    1062:	24 2f       	mov	r18, r20
    1064:	35 2f       	mov	r19, r21
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	08 e0       	ldi	r16, 0x08	; 8
    1074:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    1078:	2d 83       	std	Y+5, r18	; 0x05
    107a:	3e 83       	std	Y+6, r19	; 0x06
    107c:	4f 83       	std	Y+7, r20	; 0x07
    107e:	58 87       	std	Y+8, r21	; 0x08
    1080:	69 87       	std	Y+9, r22	; 0x09
    1082:	7a 87       	std	Y+10, r23	; 0x0a
    1084:	8b 87       	std	Y+11, r24	; 0x0b
    1086:	9c 87       	std	Y+12, r25	; 0x0c
    1088:	97 01       	movw	r18, r14
    108a:	86 01       	movw	r16, r12
    108c:	8d 81       	ldd	r24, Y+5	; 0x05
    108e:	9e 81       	ldd	r25, Y+6	; 0x06
    1090:	af 81       	ldd	r26, Y+7	; 0x07
    1092:	b8 85       	ldd	r27, Y+8	; 0x08
    1094:	08 1b       	sub	r16, r24
    1096:	19 0b       	sbc	r17, r25
    1098:	2a 0b       	sbc	r18, r26
    109a:	3b 0b       	sbc	r19, r27
    109c:	0d 83       	std	Y+5, r16	; 0x05
    109e:	1e 83       	std	Y+6, r17	; 0x06
    10a0:	2f 83       	std	Y+7, r18	; 0x07
    10a2:	38 87       	std	Y+8, r19	; 0x08
    10a4:	33 0f       	add	r19, r19
    10a6:	00 0b       	sbc	r16, r16
    10a8:	10 2f       	mov	r17, r16
    10aa:	98 01       	movw	r18, r16
    10ac:	09 8b       	std	Y+17, r16	; 0x11
    10ae:	1a 8b       	std	Y+18, r17	; 0x12
    10b0:	2b 8b       	std	Y+19, r18	; 0x13
    10b2:	3c 8b       	std	Y+20, r19	; 0x14
    10b4:	d4 01       	movw	r26, r8
    10b6:	58 96       	adiw	r26, 0x18	; 24
    10b8:	4d 91       	ld	r20, X+
    10ba:	5c 91       	ld	r21, X
    10bc:	59 97       	sbiw	r26, 0x19	; 25
    10be:	ad 80       	ldd	r10, Y+5	; 0x05
    10c0:	be 80       	ldd	r11, Y+6	; 0x06
    10c2:	cf 80       	ldd	r12, Y+7	; 0x07
    10c4:	d8 84       	ldd	r13, Y+8	; 0x08
    10c6:	e9 88       	ldd	r14, Y+17	; 0x11
    10c8:	fe 2c       	mov	r15, r14
    10ca:	0e 2d       	mov	r16, r14
    10cc:	1e 2d       	mov	r17, r14
    10ce:	24 2f       	mov	r18, r20
    10d0:	35 2f       	mov	r19, r21
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
    10e2:	07 e1       	ldi	r16, 0x17	; 23
    10e4:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    10e8:	82 2f       	mov	r24, r18
    10ea:	93 2f       	mov	r25, r19
    10ec:	a4 2f       	mov	r26, r20
    10ee:	b5 2f       	mov	r27, r21
    10f0:	8d 87       	std	Y+13, r24	; 0x0d
    10f2:	9e 87       	std	Y+14, r25	; 0x0e
    10f4:	af 87       	std	Y+15, r26	; 0x0f
    10f6:	b8 8b       	std	Y+16, r27	; 0x10
    10f8:	8c 01       	movw	r16, r24
    10fa:	9d 01       	movw	r18, r26
    10fc:	00 53       	subi	r16, 0x30	; 48
    10fe:	18 4f       	sbci	r17, 0xF8	; 248
    1100:	2f 4f       	sbci	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	0d 8b       	std	Y+21, r16	; 0x15
    1106:	1e 8b       	std	Y+22, r17	; 0x16
    1108:	2f 8b       	std	Y+23, r18	; 0x17
    110a:	38 8f       	std	Y+24, r19	; 0x18
    110c:	00 3d       	cpi	r16, 0xD0	; 208
    110e:	17 40       	sbci	r17, 0x07	; 7
    1110:	21 05       	cpc	r18, r1
	
	int32_t T2 = 0;
	int64_t OFF2 = 0;
	int64_t SENS2 = 0;
	
	if (TEMP < 2000)
    1112:	31 05       	cpc	r19, r1
    1114:	0c f0       	brlt	.+2      	; 0x1118 <readMS56XX+0x2a2>
    1116:	87 c0       	rjmp	.+270    	; 0x1226 <readMS56XX+0x3b0>
    1118:	fe 2c       	mov	r15, r14
    111a:	0e 2d       	mov	r16, r14
    111c:	1e 2d       	mov	r17, r14
	{
		T2 = ((int64_t)dT) * ((int64_t)dT) / ((int64_t)2147483648);
    111e:	2a 2d       	mov	r18, r10
    1120:	3b 2d       	mov	r19, r11
    1122:	4c 2d       	mov	r20, r12
    1124:	5d 2d       	mov	r21, r13
    1126:	60 2f       	mov	r22, r16
    1128:	70 2f       	mov	r23, r16
    112a:	80 2f       	mov	r24, r16
    112c:	9e 2d       	mov	r25, r14
    112e:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
    1132:	c2 2e       	mov	r12, r18
    1134:	d3 2e       	mov	r13, r19
    1136:	e4 2e       	mov	r14, r20
    1138:	f5 2e       	mov	r15, r21
    113a:	06 2f       	mov	r16, r22
    113c:	17 2f       	mov	r17, r23
    113e:	a8 2e       	mov	r10, r24
    1140:	b9 2e       	mov	r11, r25
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	0e 94 ae 12 	call	0x255c	; 0x255c <__cmpdi2_s8>
    1148:	84 f4       	brge	.+32     	; 0x116a <readMS56XX+0x2f4>
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	31 09       	sbc	r19, r1
    114e:	41 09       	sbc	r20, r1
    1150:	50 48       	sbci	r21, 0x80	; 128
    1152:	6f 4f       	sbci	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	8f 4f       	sbci	r24, 0xFF	; 255
    1158:	9f 4f       	sbci	r25, 0xFF	; 255
    115a:	c2 2e       	mov	r12, r18
    115c:	d3 2e       	mov	r13, r19
    115e:	e4 2e       	mov	r14, r20
    1160:	f5 2e       	mov	r15, r21
    1162:	06 2f       	mov	r16, r22
    1164:	17 2f       	mov	r17, r23
    1166:	a8 2e       	mov	r10, r24
    1168:	b9 2e       	mov	r11, r25
    116a:	2c 2d       	mov	r18, r12
    116c:	3d 2d       	mov	r19, r13
    116e:	4e 2d       	mov	r20, r14
    1170:	5f 2d       	mov	r21, r15
    1172:	60 2f       	mov	r22, r16
    1174:	71 2f       	mov	r23, r17
    1176:	8a 2d       	mov	r24, r10
    1178:	9b 2d       	mov	r25, r11
    117a:	0f e1       	ldi	r16, 0x1F	; 31
    117c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    1180:	29 8f       	std	Y+25, r18	; 0x19
    1182:	3a 8f       	std	Y+26, r19	; 0x1a
    1184:	4b 8f       	std	Y+27, r20	; 0x1b
    1186:	5c 8f       	std	Y+28, r21	; 0x1c
    1188:	4d 84       	ldd	r4, Y+13	; 0x0d
    118a:	5e 84       	ldd	r5, Y+14	; 0x0e
    118c:	6f 84       	ldd	r6, Y+15	; 0x0f
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) >> 4;
    118e:	78 88       	ldd	r7, Y+16	; 0x10
    1190:	77 0c       	add	r7, r7
    1192:	44 08       	sbc	r4, r4
    1194:	54 2c       	mov	r5, r4
    1196:	32 01       	movw	r6, r4
    1198:	2d 85       	ldd	r18, Y+13	; 0x0d
    119a:	3e 85       	ldd	r19, Y+14	; 0x0e
    119c:	4f 85       	ldd	r20, Y+15	; 0x0f
    119e:	58 89       	ldd	r21, Y+16	; 0x10
    11a0:	64 2d       	mov	r22, r4
    11a2:	74 2d       	mov	r23, r4
    11a4:	84 2d       	mov	r24, r4
    11a6:	94 2d       	mov	r25, r4
    11a8:	02 e0       	ldi	r16, 0x02	; 2
    11aa:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    11ae:	a2 2e       	mov	r10, r18
    11b0:	b3 2e       	mov	r11, r19
    11b2:	c4 2e       	mov	r12, r20
    11b4:	d5 2e       	mov	r13, r21
    11b6:	e6 2e       	mov	r14, r22
    11b8:	f7 2e       	mov	r15, r23
    11ba:	e8 2f       	mov	r30, r24
    11bc:	19 2f       	mov	r17, r25
    11be:	04 e0       	ldi	r16, 0x04	; 4
    11c0:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    11c4:	0e 2f       	mov	r16, r30
    11c6:	0e 94 a5 12 	call	0x254a	; 0x254a <__subdi3>
    11ca:	ad 84       	ldd	r10, Y+13	; 0x0d
    11cc:	be 84       	ldd	r11, Y+14	; 0x0e
    11ce:	cf 84       	ldd	r12, Y+15	; 0x0f
    11d0:	d8 88       	ldd	r13, Y+16	; 0x10
    11d2:	e4 2c       	mov	r14, r4
    11d4:	f4 2c       	mov	r15, r4
    11d6:	04 2d       	mov	r16, r4
    11d8:	14 2d       	mov	r17, r4
    11da:	0e 94 9c 12 	call	0x2538	; 0x2538 <__adddi3>
    11de:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
    11e2:	04 e0       	ldi	r16, 0x04	; 4
    11e4:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    11e8:	2d 8f       	std	Y+29, r18	; 0x1d
    11ea:	3e 8f       	std	Y+30, r19	; 0x1e
    11ec:	4f 8f       	std	Y+31, r20	; 0x1f
    11ee:	58 a3       	std	Y+32, r21	; 0x20
    11f0:	69 a3       	std	Y+33, r22	; 0x21
    11f2:	7a a3       	std	Y+34, r23	; 0x22
    11f4:	8b a3       	std	Y+35, r24	; 0x23
    11f6:	29 2e       	mov	r2, r25
    11f8:	2a 2d       	mov	r18, r10
    11fa:	3b 2d       	mov	r19, r11
    11fc:	4c 2d       	mov	r20, r12
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
    11fe:	5d 2d       	mov	r21, r13
    1200:	64 2d       	mov	r22, r4
    1202:	74 2d       	mov	r23, r4
    1204:	84 2d       	mov	r24, r4
    1206:	94 2d       	mov	r25, r4
    1208:	01 e0       	ldi	r16, 0x01	; 1
    120a:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    120e:	04 2d       	mov	r16, r4
    1210:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
    1214:	2d 87       	std	Y+13, r18	; 0x0d
    1216:	3c a3       	std	Y+36, r19	; 0x24
    1218:	4d a3       	std	Y+37, r20	; 0x25
    121a:	5e a3       	std	Y+38, r21	; 0x26
    121c:	6f a3       	std	Y+39, r22	; 0x27
    121e:	78 a7       	std	Y+40, r23	; 0x28
    1220:	89 a7       	std	Y+41, r24	; 0x29
    1222:	9a a7       	std	Y+42, r25	; 0x2a
    1224:	14 c0       	rjmp	.+40     	; 0x124e <readMS56XX+0x3d8>
    1226:	1d 86       	std	Y+13, r1	; 0x0d
    1228:	1c a2       	std	Y+36, r1	; 0x24
    122a:	1d a2       	std	Y+37, r1	; 0x25
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
		SENS2 = 0;	
    122c:	1e a2       	std	Y+38, r1	; 0x26
    122e:	1f a2       	std	Y+39, r1	; 0x27
    1230:	18 a6       	std	Y+40, r1	; 0x28
    1232:	19 a6       	std	Y+41, r1	; 0x29
    1234:	1a a6       	std	Y+42, r1	; 0x2a
    1236:	1d 8e       	std	Y+29, r1	; 0x1d
    1238:	1e 8e       	std	Y+30, r1	; 0x1e
    123a:	1f 8e       	std	Y+31, r1	; 0x1f
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
		OFF2 = 0;
    123c:	18 a2       	std	Y+32, r1	; 0x20
    123e:	19 a2       	std	Y+33, r1	; 0x21
    1240:	1a a2       	std	Y+34, r1	; 0x22
    1242:	1b a2       	std	Y+35, r1	; 0x23
    1244:	21 2c       	mov	r2, r1
    1246:	19 8e       	std	Y+25, r1	; 0x19
    1248:	1a 8e       	std	Y+26, r1	; 0x1a
    124a:	1b 8e       	std	Y+27, r1	; 0x1b
		OFF2 = ((int64_t)61) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000)) >> 4;
		SENS2 = ((int64_t)2) * ((int64_t)(TEMP - 2000)) * ((int64_t)(TEMP - 2000));
	}
	else
	{
	    T2 = 0;
    124c:	1c 8e       	std	Y+28, r1	; 0x1c
    124e:	8d 89       	ldd	r24, Y+21	; 0x15
    1250:	9e 89       	ldd	r25, Y+22	; 0x16
    1252:	af 89       	ldd	r26, Y+23	; 0x17
		OFF2 = 0;
		SENS2 = 0;	
	} 
	
	if (TEMP<-1500)
    1254:	b8 8d       	ldd	r27, Y+24	; 0x18
    1256:	84 32       	cpi	r24, 0x24	; 36
    1258:	ea ef       	ldi	r30, 0xFA	; 250
    125a:	9e 07       	cpc	r25, r30
    125c:	ef ef       	ldi	r30, 0xFF	; 255
    125e:	ae 07       	cpc	r26, r30
    1260:	be 07       	cpc	r27, r30
    1262:	0c f0       	brlt	.+2      	; 0x1266 <readMS56XX+0x3f0>
    1264:	5d c0       	rjmp	.+186    	; 0x1320 <readMS56XX+0x4aa>
    1266:	2d 89       	ldd	r18, Y+21	; 0x15
    1268:	3e 89       	ldd	r19, Y+22	; 0x16
    126a:	4f 89       	ldd	r20, Y+23	; 0x17
	{
		OFF2 += ((int64_t)15) * (((int64_t) TEMP) + ((int64_t) 1500))^2; 
    126c:	58 8d       	ldd	r21, Y+24	; 0x18
    126e:	6c 01       	movw	r12, r24
    1270:	7d 01       	movw	r14, r26
    1272:	ff 0c       	add	r15, r15
    1274:	cc 08       	sbc	r12, r12
    1276:	dc 2c       	mov	r13, r12
    1278:	76 01       	movw	r14, r12
    127a:	6c 2d       	mov	r22, r12
    127c:	7c 2d       	mov	r23, r12
    127e:	8c 2d       	mov	r24, r12
    1280:	9c 2d       	mov	r25, r12
    1282:	24 52       	subi	r18, 0x24	; 36
    1284:	3a 4f       	sbci	r19, 0xFA	; 250
    1286:	4f 4f       	sbci	r20, 0xFF	; 255
    1288:	5f 4f       	sbci	r21, 0xFF	; 255
    128a:	6f 4f       	sbci	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	32 2e       	mov	r3, r18
    1294:	43 2e       	mov	r4, r19
    1296:	54 2e       	mov	r5, r20
    1298:	65 2e       	mov	r6, r21
    129a:	76 2e       	mov	r7, r22
    129c:	b7 2f       	mov	r27, r23
    129e:	a8 2f       	mov	r26, r24
    12a0:	f9 2f       	mov	r31, r25
    12a2:	04 e0       	ldi	r16, 0x04	; 4
    12a4:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    12a8:	a3 2c       	mov	r10, r3
    12aa:	b4 2c       	mov	r11, r4
    12ac:	c5 2c       	mov	r12, r5
    12ae:	d6 2c       	mov	r13, r6
    12b0:	e7 2c       	mov	r14, r7
    12b2:	fb 2e       	mov	r15, r27
    12b4:	0a 2f       	mov	r16, r26
    12b6:	1f 2f       	mov	r17, r31
    12b8:	0e 94 a5 12 	call	0x254a	; 0x254a <__subdi3>
    12bc:	e2 e0       	ldi	r30, 0x02	; 2
    12be:	2e 27       	eor	r18, r30
    12c0:	ad 8c       	ldd	r10, Y+29	; 0x1d
    12c2:	be 8c       	ldd	r11, Y+30	; 0x1e
    12c4:	cf 8c       	ldd	r12, Y+31	; 0x1f
    12c6:	d8 a0       	ldd	r13, Y+32	; 0x20
    12c8:	e9 a0       	ldd	r14, Y+33	; 0x21
    12ca:	fa a0       	ldd	r15, Y+34	; 0x22
    12cc:	0b a1       	ldd	r16, Y+35	; 0x23
    12ce:	12 2d       	mov	r17, r2
    12d0:	0e 94 9c 12 	call	0x2538	; 0x2538 <__adddi3>
    12d4:	2d 8f       	std	Y+29, r18	; 0x1d
    12d6:	3e 8f       	std	Y+30, r19	; 0x1e
    12d8:	4f 8f       	std	Y+31, r20	; 0x1f
    12da:	58 a3       	std	Y+32, r21	; 0x20
    12dc:	69 a3       	std	Y+33, r22	; 0x21
    12de:	7a a3       	std	Y+34, r23	; 0x22
    12e0:	8b a3       	std	Y+35, r24	; 0x23
    12e2:	29 2e       	mov	r2, r25
    12e4:	23 2d       	mov	r18, r3
    12e6:	34 2d       	mov	r19, r4
    12e8:	45 2d       	mov	r20, r5
		SENS2 += ((int64_t) 8) * (((int64_t) TEMP) + ((int64_t) 1500) )^2;
    12ea:	56 2d       	mov	r21, r6
    12ec:	67 2d       	mov	r22, r7
    12ee:	7b 2f       	mov	r23, r27
    12f0:	8a 2f       	mov	r24, r26
    12f2:	9f 2f       	mov	r25, r31
    12f4:	03 e0       	ldi	r16, 0x03	; 3
    12f6:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    12fa:	2e 27       	eor	r18, r30
    12fc:	ad 84       	ldd	r10, Y+13	; 0x0d
    12fe:	bc a0       	ldd	r11, Y+36	; 0x24
    1300:	cd a0       	ldd	r12, Y+37	; 0x25
    1302:	de a0       	ldd	r13, Y+38	; 0x26
    1304:	ef a0       	ldd	r14, Y+39	; 0x27
    1306:	f8 a4       	ldd	r15, Y+40	; 0x28
    1308:	09 a5       	ldd	r16, Y+41	; 0x29
    130a:	1a a5       	ldd	r17, Y+42	; 0x2a
    130c:	0e 94 9c 12 	call	0x2538	; 0x2538 <__adddi3>
    1310:	2d 87       	std	Y+13, r18	; 0x0d
    1312:	3c a3       	std	Y+36, r19	; 0x24
    1314:	4d a3       	std	Y+37, r20	; 0x25
    1316:	5e a3       	std	Y+38, r21	; 0x26
    1318:	6f a3       	std	Y+39, r22	; 0x27
    131a:	78 a7       	std	Y+40, r23	; 0x28
    131c:	89 a7       	std	Y+41, r24	; 0x29
    131e:	9a a7       	std	Y+42, r25	; 0x2a
    1320:	d4 01       	movw	r26, r8
    1322:	13 96       	adiw	r26, 0x03	; 3
    1324:	8c 91       	ld	r24, X
	}
	uint8_t offshift1, offshift2, sens_shift1, sens_shift2;
	switch (sensor->model)
    1326:	13 97       	sbiw	r26, 0x03	; 3
    1328:	81 50       	subi	r24, 0x01	; 1
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	18 f0       	brcs	.+6      	; 0x1334 <readMS56XX+0x4be>
    132e:	1c 96       	adiw	r26, 0x0c	; 12
    1330:	1c 92       	st	X, r1
    1332:	f5 c0       	rjmp	.+490    	; 0x151e <readMS56XX+0x6a8>
			offshift2 = 6;
			sens_shift1 = 16;
			sens_shift2 = 7;
			break;
		default:
			sensor->data.valid = 0;
    1334:	f4 01       	movw	r30, r8
    1336:	44 89       	ldd	r20, Z+20	; 0x14
			return;
    1338:	55 89       	ldd	r21, Z+21	; 0x15
	}
	int64_t OFF = (((int64_t)sensor->OFFt1) << offshift1) +
    133a:	ad 80       	ldd	r10, Y+5	; 0x05
    133c:	be 80       	ldd	r11, Y+6	; 0x06
    133e:	cf 80       	ldd	r12, Y+7	; 0x07
    1340:	d8 84       	ldd	r13, Y+8	; 0x08
    1342:	e9 88       	ldd	r14, Y+17	; 0x11
    1344:	fe 2c       	mov	r15, r14
    1346:	0e 2d       	mov	r16, r14
    1348:	1e 2d       	mov	r17, r14
    134a:	24 2f       	mov	r18, r20
    134c:	35 2f       	mov	r19, r21
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 b6 11 	call	0x236c	; 0x236c <__muldi3>
    135e:	06 e0       	ldi	r16, 0x06	; 6
    1360:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    1364:	42 2e       	mov	r4, r18
    1366:	53 2e       	mov	r5, r19
    1368:	64 2e       	mov	r6, r20
    136a:	75 2e       	mov	r7, r21
    136c:	b6 2f       	mov	r27, r22
    136e:	a7 2f       	mov	r26, r23
    1370:	38 2e       	mov	r3, r24
    1372:	9b a7       	std	Y+43, r25	; 0x2b
    1374:	f4 01       	movw	r30, r8
    1376:	a0 88       	ldd	r10, Z+16	; 0x10
    1378:	b1 88       	ldd	r11, Z+17	; 0x11
    137a:	2a 2d       	mov	r18, r10
    137c:	3b 2d       	mov	r19, r11
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	01 e1       	ldi	r16, 0x11	; 17
    138c:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    1390:	a2 2e       	mov	r10, r18
    1392:	b3 2e       	mov	r11, r19
    1394:	c4 2e       	mov	r12, r20
    1396:	d5 2e       	mov	r13, r21
    1398:	e6 2e       	mov	r14, r22
    139a:	f7 2e       	mov	r15, r23
    139c:	08 2f       	mov	r16, r24
    139e:	19 2f       	mov	r17, r25
    13a0:	24 2d       	mov	r18, r4
    13a2:	35 2d       	mov	r19, r5
    13a4:	46 2d       	mov	r20, r6
    13a6:	57 2d       	mov	r21, r7
    13a8:	6b 2f       	mov	r22, r27
    13aa:	7a 2f       	mov	r23, r26
    13ac:	83 2d       	mov	r24, r3
    13ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    13b0:	0e 94 9c 12 	call	0x2538	; 0x2538 <__adddi3>
    13b4:	32 2e       	mov	r3, r18
    13b6:	3b a7       	std	Y+43, r19	; 0x2b
    13b8:	48 ab       	std	Y+48, r20	; 0x30
    13ba:	59 ab       	std	Y+49, r21	; 0x31
    13bc:	6a ab       	std	Y+50, r22	; 0x32
    13be:	7b ab       	std	Y+51, r23	; 0x33
    13c0:	8c ab       	std	Y+52, r24	; 0x34
    13c2:	9d ab       	std	Y+53, r25	; 0x35
    13c4:	42 89       	ldd	r20, Z+18	; 0x12
    13c6:	53 89       	ldd	r21, Z+19	; 0x13
	((((int64_t)sensor->TCO) * ((int64_t)dT)) >> offshift2);
	
	int64_t SENS = (((int64_t)sensor->SENSt1) << sens_shift1) + ((((int64_t)sensor->TCS) * ((int64_t)dT)) >> sens_shift2);
    13c8:	ad 80       	ldd	r10, Y+5	; 0x05
    13ca:	be 80       	ldd	r11, Y+6	; 0x06
    13cc:	cf 80       	ldd	r12, Y+7	; 0x07
    13ce:	d8 84       	ldd	r13, Y+8	; 0x08
    13d0:	e9 88       	ldd	r14, Y+17	; 0x11
    13d2:	fe 2c       	mov	r15, r14
    13d4:	0e 2d       	mov	r16, r14
    13d6:	1e 2d       	mov	r17, r14
    13d8:	24 2f       	mov	r18, r20
    13da:	35 2f       	mov	r19, r21
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	50 e0       	ldi	r21, 0x00	; 0
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	c1 d7       	rcall	.+3970   	; 0x236c <__muldi3>
    13ea:	07 e0       	ldi	r16, 0x07	; 7
    13ec:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    13f0:	42 2e       	mov	r4, r18
    13f2:	53 2e       	mov	r5, r19
    13f4:	64 2e       	mov	r6, r20
    13f6:	75 2e       	mov	r7, r21
    13f8:	b6 2f       	mov	r27, r22
    13fa:	a7 2f       	mov	r26, r23
    13fc:	8d 83       	std	Y+5, r24	; 0x05
    13fe:	99 8b       	std	Y+17, r25	; 0x11
    1400:	f4 01       	movw	r30, r8
    1402:	a6 84       	ldd	r10, Z+14	; 0x0e
    1404:	b7 84       	ldd	r11, Z+15	; 0x0f
    1406:	2a 2d       	mov	r18, r10
    1408:	3b 2d       	mov	r19, r11
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	60 e0       	ldi	r22, 0x00	; 0
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	00 e1       	ldi	r16, 0x10	; 16
    1418:	0e 94 65 12 	call	0x24ca	; 0x24ca <__ashldi3>
    141c:	a2 2e       	mov	r10, r18
    141e:	b3 2e       	mov	r11, r19
    1420:	c4 2e       	mov	r12, r20
    1422:	d5 2e       	mov	r13, r21
    1424:	e6 2e       	mov	r14, r22
    1426:	f7 2e       	mov	r15, r23
    1428:	08 2f       	mov	r16, r24
    142a:	19 2f       	mov	r17, r25
    142c:	24 2d       	mov	r18, r4
    142e:	35 2d       	mov	r19, r5
    1430:	46 2d       	mov	r20, r6
    1432:	57 2d       	mov	r21, r7
    1434:	6b 2f       	mov	r22, r27
    1436:	7a 2f       	mov	r23, r26
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	99 89       	ldd	r25, Y+17	; 0x11
    143c:	0e 94 9c 12 	call	0x2538	; 0x2538 <__adddi3>
    1440:	ad 84       	ldd	r10, Y+13	; 0x0d
    1442:	bc a0       	ldd	r11, Y+36	; 0x24
    1444:	cd a0       	ldd	r12, Y+37	; 0x25
	pressureSensorCalibration.TEMPSENS);*/
				
	/*printf("TEMP: %" PRIi32 "\n", TEMP);
	printf("Pressure: %" PRIi32 "\n", (int32_t)PRESSURE);*/
	
	sensor->data.pressure = (int32_t) PRESSURE; //In pascals
    1446:	de a0       	ldd	r13, Y+38	; 0x26
    1448:	ef a0       	ldd	r14, Y+39	; 0x27
    144a:	f8 a4       	ldd	r15, Y+40	; 0x28
    144c:	09 a5       	ldd	r16, Y+41	; 0x29
    144e:	1a a5       	ldd	r17, Y+42	; 0x2a
    1450:	0e 94 a5 12 	call	0x254a	; 0x254a <__subdi3>
    1454:	cc a4       	ldd	r12, Y+44	; 0x2c
    1456:	dd a4       	ldd	r13, Y+45	; 0x2d
    1458:	ee a4       	ldd	r14, Y+46	; 0x2e
    145a:	ff a4       	ldd	r15, Y+47	; 0x2f
    145c:	56 01       	movw	r10, r12
    145e:	67 01       	movw	r12, r14
    1460:	e1 2c       	mov	r14, r1
    1462:	f1 2c       	mov	r15, r1
    1464:	87 01       	movw	r16, r14
    1466:	ad 82       	std	Y+5, r10	; 0x05
    1468:	be 82       	std	Y+6, r11	; 0x06
    146a:	cf 82       	std	Y+7, r12	; 0x07
    146c:	d8 86       	std	Y+8, r13	; 0x08
    146e:	e9 86       	std	Y+9, r14	; 0x09
    1470:	fa 86       	std	Y+10, r15	; 0x0a
    1472:	0b 87       	std	Y+11, r16	; 0x0b
    1474:	1c 87       	std	Y+12, r17	; 0x0c
    1476:	e1 2c       	mov	r14, r1
    1478:	f1 2c       	mov	r15, r1
    147a:	00 e0       	ldi	r16, 0x00	; 0
    147c:	10 e0       	ldi	r17, 0x00	; 0
    147e:	76 d7       	rcall	.+3820   	; 0x236c <__muldi3>
    1480:	05 e1       	ldi	r16, 0x15	; 21
    1482:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    1486:	42 2e       	mov	r4, r18
    1488:	53 2e       	mov	r5, r19
    148a:	64 2e       	mov	r6, r20
    148c:	75 2e       	mov	r7, r21
    148e:	b6 2f       	mov	r27, r22
    1490:	a7 2f       	mov	r26, r23
    1492:	f8 2f       	mov	r31, r24
    1494:	e9 2f       	mov	r30, r25
    1496:	23 2d       	mov	r18, r3
    1498:	3b a5       	ldd	r19, Y+43	; 0x2b
    149a:	48 a9       	ldd	r20, Y+48	; 0x30
    149c:	59 a9       	ldd	r21, Y+49	; 0x31
    149e:	6a a9       	ldd	r22, Y+50	; 0x32
    14a0:	7b a9       	ldd	r23, Y+51	; 0x33
    14a2:	8c a9       	ldd	r24, Y+52	; 0x34
    14a4:	9d a9       	ldd	r25, Y+53	; 0x35
    14a6:	ad 8c       	ldd	r10, Y+29	; 0x1d
    14a8:	be 8c       	ldd	r11, Y+30	; 0x1e
    14aa:	cf 8c       	ldd	r12, Y+31	; 0x1f
    14ac:	d8 a0       	ldd	r13, Y+32	; 0x20
    14ae:	e9 a0       	ldd	r14, Y+33	; 0x21
    14b0:	fa a0       	ldd	r15, Y+34	; 0x22
    14b2:	0b a1       	ldd	r16, Y+35	; 0x23
    14b4:	12 2d       	mov	r17, r2
    14b6:	0e 94 a5 12 	call	0x254a	; 0x254a <__subdi3>
    14ba:	a2 2e       	mov	r10, r18
    14bc:	b3 2e       	mov	r11, r19
    14be:	c4 2e       	mov	r12, r20
    14c0:	d5 2e       	mov	r13, r21
    14c2:	e6 2e       	mov	r14, r22
    14c4:	f7 2e       	mov	r15, r23
    14c6:	08 2f       	mov	r16, r24
    14c8:	19 2f       	mov	r17, r25
    14ca:	24 2d       	mov	r18, r4
    14cc:	35 2d       	mov	r19, r5
    14ce:	46 2d       	mov	r20, r6
    14d0:	57 2d       	mov	r21, r7
    14d2:	6b 2f       	mov	r22, r27
    14d4:	7a 2f       	mov	r23, r26
    14d6:	8f 2f       	mov	r24, r31
    14d8:	9e 2f       	mov	r25, r30
    14da:	0e 94 a5 12 	call	0x254a	; 0x254a <__subdi3>
    14de:	0f e0       	ldi	r16, 0x0F	; 15
    14e0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <__ashrdi3>
    14e4:	d4 01       	movw	r26, r8
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	2c 93       	st	X, r18
    14ea:	14 97       	sbiw	r26, 0x04	; 4
    14ec:	15 96       	adiw	r26, 0x05	; 5
    14ee:	3c 93       	st	X, r19
    14f0:	15 97       	sbiw	r26, 0x05	; 5
    14f2:	16 96       	adiw	r26, 0x06	; 6
    14f4:	4c 93       	st	X, r20
    14f6:	16 97       	sbiw	r26, 0x06	; 6
    14f8:	17 96       	adiw	r26, 0x07	; 7
    14fa:	5c 93       	st	X, r21
    14fc:	8d 89       	ldd	r24, Y+21	; 0x15
    14fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1500:	af 89       	ldd	r26, Y+23	; 0x17
	sensor->data.temperature = TEMP; //In hundredths of degree celsius
    1502:	b8 8d       	ldd	r27, Y+24	; 0x18
    1504:	a9 8c       	ldd	r10, Y+25	; 0x19
    1506:	ba 8c       	ldd	r11, Y+26	; 0x1a
    1508:	cb 8c       	ldd	r12, Y+27	; 0x1b
    150a:	dc 8c       	ldd	r13, Y+28	; 0x1c
    150c:	8a 19       	sub	r24, r10
    150e:	9b 09       	sbc	r25, r11
    1510:	ac 09       	sbc	r26, r12
    1512:	bd 09       	sbc	r27, r13
    1514:	f4 01       	movw	r30, r8
    1516:	80 87       	std	Z+8, r24	; 0x08
    1518:	91 87       	std	Z+9, r25	; 0x09
    151a:	a2 87       	std	Z+10, r26	; 0x0a
    151c:	b3 87       	std	Z+11, r27	; 0x0b
    151e:	e5 96       	adiw	r28, 0x35	; 53
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	de bf       	out	0x3e, r29	; 62
 }
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	7f 90       	pop	r7
    153e:	6f 90       	pop	r6
    1540:	5f 90       	pop	r5
    1542:	4f 90       	pop	r4
    1544:	3f 90       	pop	r3
    1546:	2f 90       	pop	r2
    1548:	08 95       	ret

0000154a <spiread>:
 */

#include "SPI.h"

uint8_t spiread(SPI_t* targetspi)
{
    154a:	fc 01       	movw	r30, r24
	targetspi->DATA = 0xFE;
    154c:	8e ef       	ldi	r24, 0xFE	; 254
    154e:	83 83       	std	Z+3, r24	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait until data actually comes in
    1550:	92 81       	ldd	r25, Z+2	; 0x02
    1552:	99 23       	and	r25, r25
    1554:	ec f7       	brge	.-6      	; 0x1550 <spiread+0x6>
	return targetspi->DATA;
    1556:	83 81       	ldd	r24, Z+3	; 0x03

}
    1558:	08 95       	ret

0000155a <spiwrite>:

void spiwrite(SPI_t* targetspi, uint8_t data)
{
    155a:	fc 01       	movw	r30, r24
	targetspi->DATA = data;
    155c:	63 83       	std	Z+3, r22	; 0x03
	while (!(targetspi->STATUS >> 7)); //Wait for data to be sent
    155e:	92 81       	ldd	r25, Z+2	; 0x02
    1560:	99 23       	and	r25, r25
    1562:	ec f7       	brge	.-6      	; 0x155e <spiwrite+0x4>
}
    1564:	08 95       	ret

00001566 <spiselect>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1566:	e8 2f       	mov	r30, r24
    1568:	e6 95       	lsr	r30
    156a:	e6 95       	lsr	r30
    156c:	e6 95       	lsr	r30
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	e4 9f       	mul	r30, r20
    1572:	f0 01       	movw	r30, r0
    1574:	11 24       	eor	r1, r1
    1576:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1578:	87 70       	andi	r24, 0x07	; 7
    157a:	21 e0       	ldi	r18, 0x01	; 1
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <spiselect+0x20>
    1582:	44 0f       	add	r20, r20
    1584:	55 1f       	adc	r21, r21
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <spiselect+0x1c>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    158a:	46 83       	std	Z+6, r20	; 0x06
    158c:	08 95       	ret

0000158e <spideselect>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    158e:	e8 2f       	mov	r30, r24
    1590:	e6 95       	lsr	r30
    1592:	e6 95       	lsr	r30
    1594:	e6 95       	lsr	r30
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	e4 9f       	mul	r30, r20
    159a:	f0 01       	movw	r30, r0
    159c:	11 24       	eor	r1, r1
    159e:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    15a0:	87 70       	andi	r24, 0x07	; 7
    15a2:	21 e0       	ldi	r18, 0x01	; 1
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <spideselect+0x20>
    15aa:	44 0f       	add	r20, r20
    15ac:	55 1f       	adc	r21, r21
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <spideselect+0x1c>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    15b2:	45 83       	std	Z+5, r20	; 0x05
    15b4:	08 95       	ret

000015b6 <enable_select_pin>:
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    15b6:	e8 2f       	mov	r30, r24
    15b8:	e6 95       	lsr	r30
    15ba:	e6 95       	lsr	r30
    15bc:	e6 95       	lsr	r30
    15be:	90 e2       	ldi	r25, 0x20	; 32
    15c0:	e9 9f       	mul	r30, r25
    15c2:	f0 01       	movw	r30, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    15c8:	98 2f       	mov	r25, r24
    15ca:	97 70       	andi	r25, 0x07	; 7
    15cc:	21 e0       	ldi	r18, 0x01	; 1
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <enable_select_pin+0x20>
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	9a 95       	dec	r25
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <enable_select_pin+0x1c>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    15da:	21 83       	std	Z+1, r18	; 0x01
}

void enable_select_pin(ioport_pin_t pin)
{
	ioport_set_pin_dir(pin, IOPORT_DIR_OUTPUT);
	spideselect(pin); //Ensure we default to the deselected state
    15dc:	d8 cf       	rjmp	.-80     	; 0x158e <spideselect>
    15de:	08 95       	ret

000015e0 <initializespi>:
}

void initializespi(SPI_t* targetspi, PORT_t* port)
{
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	ec 01       	movw	r28, r24
    15ea:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <initializespi+0x12>
    15f0:	36 c1       	rjmp	.+620    	; 0x185e <initializespi+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    15f2:	80 3c       	cpi	r24, 0xC0	; 192
    15f4:	91 05       	cpc	r25, r1
    15f6:	21 f4       	brne	.+8      	; 0x1600 <initializespi+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    15f8:	60 e1       	ldi	r22, 0x10	; 16
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	1d db       	rcall	.-2502   	; 0xc38 <sysclk_enable_module>
    15fe:	2f c1       	rjmp	.+606    	; 0x185e <initializespi+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1600:	c0 34       	cpi	r28, 0x40	; 64
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	d8 07       	cpc	r29, r24
    1606:	21 f4       	brne	.+8      	; 0x1610 <initializespi+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1608:	68 e0       	ldi	r22, 0x08	; 8
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	15 db       	rcall	.-2518   	; 0xc38 <sysclk_enable_module>
    160e:	27 c1       	rjmp	.+590    	; 0x185e <initializespi+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1610:	c1 15       	cp	r28, r1
    1612:	e4 e0       	ldi	r30, 0x04	; 4
    1614:	de 07       	cpc	r29, r30
    1616:	21 f4       	brne	.+8      	; 0x1620 <initializespi+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0d db       	rcall	.-2534   	; 0xc38 <sysclk_enable_module>
    161e:	1f c1       	rjmp	.+574    	; 0x185e <initializespi+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1620:	c0 38       	cpi	r28, 0x80	; 128
    1622:	f1 e0       	ldi	r31, 0x01	; 1
    1624:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1626:	21 f4       	brne	.+8      	; 0x1630 <initializespi+0x50>
    1628:	62 e0       	ldi	r22, 0x02	; 2
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	05 db       	rcall	.-2550   	; 0xc38 <sysclk_enable_module>
    162e:	17 c1       	rjmp	.+558    	; 0x185e <initializespi+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1630:	c1 15       	cp	r28, r1
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1636:	21 f4       	brne	.+8      	; 0x1640 <initializespi+0x60>
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	fd da       	rcall	.-2566   	; 0xc38 <sysclk_enable_module>
    163e:	0f c1       	rjmp	.+542    	; 0x185e <initializespi+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1640:	c0 38       	cpi	r28, 0x80	; 128
    1642:	e3 e0       	ldi	r30, 0x03	; 3
    1644:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1646:	21 f4       	brne	.+8      	; 0x1650 <initializespi+0x70>
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	f5 da       	rcall	.-2582   	; 0xc38 <sysclk_enable_module>
    164e:	07 c1       	rjmp	.+526    	; 0x185e <initializespi+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1650:	c0 39       	cpi	r28, 0x90	; 144
    1652:	f3 e0       	ldi	r31, 0x03	; 3
    1654:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1656:	21 f4       	brne	.+8      	; 0x1660 <initializespi+0x80>
    1658:	61 e0       	ldi	r22, 0x01	; 1
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	ed da       	rcall	.-2598   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    165e:	ff c0       	rjmp	.+510    	; 0x185e <initializespi+0x27e>
    1660:	c1 15       	cp	r28, r1
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1666:	21 f4       	brne	.+8      	; 0x1670 <initializespi+0x90>
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	e5 da       	rcall	.-2614   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    166e:	f7 c0       	rjmp	.+494    	; 0x185e <initializespi+0x27e>
    1670:	c0 34       	cpi	r28, 0x40	; 64
    1672:	e2 e0       	ldi	r30, 0x02	; 2
    1674:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1676:	21 f4       	brne	.+8      	; 0x1680 <initializespi+0xa0>
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	dd da       	rcall	.-2630   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    167e:	ef c0       	rjmp	.+478    	; 0x185e <initializespi+0x27e>
    1680:	c1 15       	cp	r28, r1
    1682:	f3 e0       	ldi	r31, 0x03	; 3
    1684:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1686:	21 f4       	brne	.+8      	; 0x1690 <initializespi+0xb0>
    1688:	64 e0       	ldi	r22, 0x04	; 4
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	d5 da       	rcall	.-2646   	; 0xc38 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    168e:	e7 c0       	rjmp	.+462    	; 0x185e <initializespi+0x27e>
    1690:	c0 32       	cpi	r28, 0x20	; 32
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1696:	21 f4       	brne	.+8      	; 0x16a0 <initializespi+0xc0>
    1698:	64 e0       	ldi	r22, 0x04	; 4
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	cd da       	rcall	.-2662   	; 0xc38 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    169e:	df c0       	rjmp	.+446    	; 0x185e <initializespi+0x27e>
    16a0:	c1 15       	cp	r28, r1
    16a2:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    16a4:	de 07       	cpc	r29, r30
    16a6:	21 f4       	brne	.+8      	; 0x16b0 <initializespi+0xd0>
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	c5 da       	rcall	.-2678   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    16ae:	d7 c0       	rjmp	.+430    	; 0x185e <initializespi+0x27e>
    16b0:	c1 15       	cp	r28, r1
    16b2:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    16b4:	df 07       	cpc	r29, r31
    16b6:	21 f4       	brne	.+8      	; 0x16c0 <initializespi+0xe0>
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	84 e0       	ldi	r24, 0x04	; 4
    16bc:	bd da       	rcall	.-2694   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    16be:	cf c0       	rjmp	.+414    	; 0x185e <initializespi+0x27e>
    16c0:	c1 15       	cp	r28, r1
    16c2:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    16c4:	d8 07       	cpc	r29, r24
    16c6:	21 f4       	brne	.+8      	; 0x16d0 <initializespi+0xf0>
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	85 e0       	ldi	r24, 0x05	; 5
    16cc:	b5 da       	rcall	.-2710   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    16ce:	c7 c0       	rjmp	.+398    	; 0x185e <initializespi+0x27e>
    16d0:	c1 15       	cp	r28, r1
    16d2:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    16d4:	de 07       	cpc	r29, r30
    16d6:	21 f4       	brne	.+8      	; 0x16e0 <initializespi+0x100>
    16d8:	61 e0       	ldi	r22, 0x01	; 1
    16da:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    16dc:	ad da       	rcall	.-2726   	; 0xc38 <sysclk_enable_module>
    16de:	bf c0       	rjmp	.+382    	; 0x185e <initializespi+0x27e>
    16e0:	c0 34       	cpi	r28, 0x40	; 64
    16e2:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    16e4:	df 07       	cpc	r29, r31
    16e6:	21 f4       	brne	.+8      	; 0x16f0 <initializespi+0x110>
    16e8:	62 e0       	ldi	r22, 0x02	; 2
    16ea:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    16ec:	a5 da       	rcall	.-2742   	; 0xc38 <sysclk_enable_module>
    16ee:	b7 c0       	rjmp	.+366    	; 0x185e <initializespi+0x27e>
    16f0:	c0 34       	cpi	r28, 0x40	; 64
    16f2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    16f4:	d8 07       	cpc	r29, r24
    16f6:	21 f4       	brne	.+8      	; 0x1700 <initializespi+0x120>
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    16fc:	9d da       	rcall	.-2758   	; 0xc38 <sysclk_enable_module>
    16fe:	af c0       	rjmp	.+350    	; 0x185e <initializespi+0x27e>
    1700:	c0 34       	cpi	r28, 0x40	; 64
    1702:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1704:	de 07       	cpc	r29, r30
    1706:	21 f4       	brne	.+8      	; 0x1710 <initializespi+0x130>
    1708:	62 e0       	ldi	r22, 0x02	; 2
    170a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    170c:	95 da       	rcall	.-2774   	; 0xc38 <sysclk_enable_module>
    170e:	a7 c0       	rjmp	.+334    	; 0x185e <initializespi+0x27e>
    1710:	c0 34       	cpi	r28, 0x40	; 64
    1712:	fb e0       	ldi	r31, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1714:	df 07       	cpc	r29, r31
    1716:	21 f4       	brne	.+8      	; 0x1720 <initializespi+0x140>
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	86 e0       	ldi	r24, 0x06	; 6
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    171c:	8d da       	rcall	.-2790   	; 0xc38 <sysclk_enable_module>
    171e:	9f c0       	rjmp	.+318    	; 0x185e <initializespi+0x27e>
    1720:	c0 39       	cpi	r28, 0x90	; 144
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1722:	88 e0       	ldi	r24, 0x08	; 8
    1724:	d8 07       	cpc	r29, r24
    1726:	21 f4       	brne	.+8      	; 0x1730 <initializespi+0x150>
    1728:	64 e0       	ldi	r22, 0x04	; 4
    172a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    172c:	85 da       	rcall	.-2806   	; 0xc38 <sysclk_enable_module>
    172e:	97 c0       	rjmp	.+302    	; 0x185e <initializespi+0x27e>
    1730:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1732:	e9 e0       	ldi	r30, 0x09	; 9
    1734:	de 07       	cpc	r29, r30
    1736:	21 f4       	brne	.+8      	; 0x1740 <initializespi+0x160>
    1738:	64 e0       	ldi	r22, 0x04	; 4
    173a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    173c:	7d da       	rcall	.-2822   	; 0xc38 <sysclk_enable_module>
    173e:	8f c0       	rjmp	.+286    	; 0x185e <initializespi+0x27e>
    1740:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1742:	fa e0       	ldi	r31, 0x0A	; 10
    1744:	df 07       	cpc	r29, r31
    1746:	21 f4       	brne	.+8      	; 0x1750 <initializespi+0x170>
    1748:	64 e0       	ldi	r22, 0x04	; 4
    174a:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    174c:	75 da       	rcall	.-2838   	; 0xc38 <sysclk_enable_module>
    174e:	87 c0       	rjmp	.+270    	; 0x185e <initializespi+0x27e>
    1750:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1752:	8b e0       	ldi	r24, 0x0B	; 11
    1754:	d8 07       	cpc	r29, r24
    1756:	21 f4       	brne	.+8      	; 0x1760 <initializespi+0x180>
    1758:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    175a:	86 e0       	ldi	r24, 0x06	; 6
    175c:	6d da       	rcall	.-2854   	; 0xc38 <sysclk_enable_module>
    175e:	7f c0       	rjmp	.+254    	; 0x185e <initializespi+0x27e>
    1760:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1762:	e8 e0       	ldi	r30, 0x08	; 8
    1764:	de 07       	cpc	r29, r30
    1766:	21 f4       	brne	.+8      	; 0x1770 <initializespi+0x190>
    1768:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	65 da       	rcall	.-2870   	; 0xc38 <sysclk_enable_module>
    176e:	77 c0       	rjmp	.+238    	; 0x185e <initializespi+0x27e>
    1770:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1772:	f9 e0       	ldi	r31, 0x09	; 9
    1774:	df 07       	cpc	r29, r31
    1776:	21 f4       	brne	.+8      	; 0x1780 <initializespi+0x1a0>
    1778:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    177a:	84 e0       	ldi	r24, 0x04	; 4
    177c:	5d da       	rcall	.-2886   	; 0xc38 <sysclk_enable_module>
    177e:	6f c0       	rjmp	.+222    	; 0x185e <initializespi+0x27e>
    1780:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1782:	8a e0       	ldi	r24, 0x0A	; 10
    1784:	d8 07       	cpc	r29, r24
    1786:	21 f4       	brne	.+8      	; 0x1790 <initializespi+0x1b0>
    1788:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    178a:	85 e0       	ldi	r24, 0x05	; 5
    178c:	55 da       	rcall	.-2902   	; 0xc38 <sysclk_enable_module>
    178e:	67 c0       	rjmp	.+206    	; 0x185e <initializespi+0x27e>
    1790:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1792:	eb e0       	ldi	r30, 0x0B	; 11
    1794:	de 07       	cpc	r29, r30
    1796:	21 f4       	brne	.+8      	; 0x17a0 <initializespi+0x1c0>
    1798:	68 e0       	ldi	r22, 0x08	; 8
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    179a:	86 e0       	ldi	r24, 0x06	; 6
    179c:	4d da       	rcall	.-2918   	; 0xc38 <sysclk_enable_module>
    179e:	5f c0       	rjmp	.+190    	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    17a0:	c0 3a       	cpi	r28, 0xA0	; 160
    17a2:	f8 e0       	ldi	r31, 0x08	; 8
    17a4:	df 07       	cpc	r29, r31
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <initializespi+0x1d0>
    17a8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    17aa:	83 e0       	ldi	r24, 0x03	; 3
    17ac:	45 da       	rcall	.-2934   	; 0xc38 <sysclk_enable_module>
    17ae:	57 c0       	rjmp	.+174    	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    17b0:	c0 3a       	cpi	r28, 0xA0	; 160
    17b2:	89 e0       	ldi	r24, 0x09	; 9
    17b4:	d8 07       	cpc	r29, r24
    17b6:	21 f4       	brne	.+8      	; 0x17c0 <initializespi+0x1e0>
    17b8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    17ba:	84 e0       	ldi	r24, 0x04	; 4
    17bc:	3d da       	rcall	.-2950   	; 0xc38 <sysclk_enable_module>
    17be:	4f c0       	rjmp	.+158    	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    17c0:	c0 3a       	cpi	r28, 0xA0	; 160
    17c2:	ea e0       	ldi	r30, 0x0A	; 10
    17c4:	de 07       	cpc	r29, r30
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <initializespi+0x1f0>
    17c8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	35 da       	rcall	.-2966   	; 0xc38 <sysclk_enable_module>
    17ce:	47 c0       	rjmp	.+142    	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    17d0:	c0 3a       	cpi	r28, 0xA0	; 160
    17d2:	fb e0       	ldi	r31, 0x0B	; 11
    17d4:	df 07       	cpc	r29, r31
    17d6:	21 f4       	brne	.+8      	; 0x17e0 <initializespi+0x200>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    17d8:	60 e1       	ldi	r22, 0x10	; 16
    17da:	86 e0       	ldi	r24, 0x06	; 6
    17dc:	2d da       	rcall	.-2982   	; 0xc38 <sysclk_enable_module>
    17de:	3f c0       	rjmp	.+126    	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    17e0:	c0 3b       	cpi	r28, 0xB0	; 176
    17e2:	88 e0       	ldi	r24, 0x08	; 8
    17e4:	d8 07       	cpc	r29, r24
    17e6:	21 f4       	brne	.+8      	; 0x17f0 <initializespi+0x210>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    17e8:	60 e2       	ldi	r22, 0x20	; 32
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	25 da       	rcall	.-2998   	; 0xc38 <sysclk_enable_module>
    17ee:	37 c0       	rjmp	.+110    	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    17f0:	c0 3b       	cpi	r28, 0xB0	; 176
    17f2:	e9 e0       	ldi	r30, 0x09	; 9
    17f4:	de 07       	cpc	r29, r30
    17f6:	21 f4       	brne	.+8      	; 0x1800 <initializespi+0x220>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    17f8:	60 e2       	ldi	r22, 0x20	; 32
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	1d da       	rcall	.-3014   	; 0xc38 <sysclk_enable_module>
    17fe:	2f c0       	rjmp	.+94     	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1800:	c0 3b       	cpi	r28, 0xB0	; 176
    1802:	fa e0       	ldi	r31, 0x0A	; 10
    1804:	df 07       	cpc	r29, r31
    1806:	21 f4       	brne	.+8      	; 0x1810 <initializespi+0x230>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1808:	60 e2       	ldi	r22, 0x20	; 32
    180a:	85 e0       	ldi	r24, 0x05	; 5
    180c:	15 da       	rcall	.-3030   	; 0xc38 <sysclk_enable_module>
    180e:	27 c0       	rjmp	.+78     	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1810:	c0 3b       	cpi	r28, 0xB0	; 176
    1812:	8b e0       	ldi	r24, 0x0B	; 11
    1814:	d8 07       	cpc	r29, r24
    1816:	21 f4       	brne	.+8      	; 0x1820 <initializespi+0x240>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1818:	60 e2       	ldi	r22, 0x20	; 32
    181a:	86 e0       	ldi	r24, 0x06	; 6
    181c:	0d da       	rcall	.-3046   	; 0xc38 <sysclk_enable_module>
    181e:	1f c0       	rjmp	.+62     	; 0x185e <initializespi+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1820:	c0 38       	cpi	r28, 0x80	; 128
    1822:	e4 e0       	ldi	r30, 0x04	; 4
    1824:	de 07       	cpc	r29, r30
    1826:	21 f4       	brne	.+8      	; 0x1830 <initializespi+0x250>
    1828:	60 e4       	ldi	r22, 0x40	; 64
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	05 da       	rcall	.-3062   	; 0xc38 <sysclk_enable_module>
    182e:	17 c0       	rjmp	.+46     	; 0x185e <initializespi+0x27e>
    1830:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1832:	f4 e0       	ldi	r31, 0x04	; 4
    1834:	df 07       	cpc	r29, r31
    1836:	21 f4       	brne	.+8      	; 0x1840 <initializespi+0x260>
    1838:	60 e4       	ldi	r22, 0x40	; 64
    183a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    183c:	fd d9       	rcall	.-3078   	; 0xc38 <sysclk_enable_module>
    183e:	0f c0       	rjmp	.+30     	; 0x185e <initializespi+0x27e>
    1840:	c0 3a       	cpi	r28, 0xA0	; 160
    1842:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1844:	d8 07       	cpc	r29, r24
    1846:	21 f4       	brne	.+8      	; 0x1850 <initializespi+0x270>
    1848:	60 e4       	ldi	r22, 0x40	; 64
    184a:	85 e0       	ldi	r24, 0x05	; 5
    184c:	f5 d9       	rcall	.-3094   	; 0xc38 <sysclk_enable_module>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    184e:	07 c0       	rjmp	.+14     	; 0x185e <initializespi+0x27e>
    1850:	c0 3b       	cpi	r28, 0xB0	; 176
    1852:	e4 e0       	ldi	r30, 0x04	; 4
    1854:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1856:	19 f4       	brne	.+6      	; 0x185e <initializespi+0x27e>
    1858:	60 e4       	ldi	r22, 0x40	; 64
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	ed d9       	rcall	.-3110   	; 0xc38 <sysclk_enable_module>
	*	Initialize pins
	*		MOSI direction to out (Master out, slave in) (pin 5)
	*		MISO direction to in (Master in, slave out) (pin 6)
	*		SCK direction to out? (clock) (pin 7)
	*/
	port->DIRSET |= 0b10110000;  //4 (default SS), 5 (MOSI) & 7 (SCK) to out
    185e:	f8 01       	movw	r30, r16
    1860:	81 81       	ldd	r24, Z+1	; 0x01
    1862:	80 6b       	ori	r24, 0xB0	; 176
    1864:	81 83       	std	Z+1, r24	; 0x01
	port->DIRSET &= 0b10111111; //6 (MISO) in
    1866:	81 81       	ldd	r24, Z+1	; 0x01
    1868:	8f 7b       	andi	r24, 0xBF	; 191
    186a:	81 83       	std	Z+1, r24	; 0x01
	port->OUT |= 0b10110000; //Setting 4 to high deselects it, in case it isn't the select we're using
    186c:	84 81       	ldd	r24, Z+4	; 0x04
    186e:	80 6b       	ori	r24, 0xB0	; 176
    1870:	84 83       	std	Z+4, r24	; 0x04
	port->IN &= 0b10111111;
    1872:	80 85       	ldd	r24, Z+8	; 0x08
    1874:	8f 7b       	andi	r24, 0xBF	; 191
    1876:	80 87       	std	Z+8, r24	; 0x08
	*	6 coefficients are stored in PROM, use them for converting data from D1 and D2 into accurate temperature and pressure
	*	Clock polarity and phase modes 0 and 3 are both acceptable
	*
	*/

	targetspi->CTRL = 0b11010000;
    1878:	80 ed       	ldi	r24, 0xD0	; 208
    187a:	88 83       	st	Y, r24
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
    188c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <usart_getchar>
    1890:	88 83       	st	Y, r24
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	08 95       	ret

00001898 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    1898:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <usart_putchar>
}
    189c:	08 95       	ret

0000189e <uart_terminal_init>:

#include <asf.h>
#include "uart.h"

void uart_terminal_init()
{
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	27 97       	sbiw	r28, 0x07	; 7
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	de bf       	out	0x3e, r29	; 62
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    18ac:	60 e1       	ldi	r22, 0x10	; 16
    18ae:	83 e0       	ldi	r24, 0x03	; 3
    18b0:	c3 d9       	rcall	.-3194   	; 0xc38 <sysclk_enable_module>
		.charlength =	UART_TERMINAL_SERIAL_CHAR_LEN,
		.paritytype =	UART_TERMINAL_SERIAL_PARITY,
		.stopbits	=	UART_TERMINAL_SERIAL_STOP_BIT
	};
	
	UART_TERMINAL_PORT.DIR |= UART_TERMINAL_TX_PIN;	// set the USART transmit pin to output
    18b2:	e0 e4       	ldi	r30, 0x40	; 64
    18b4:	f6 e0       	ldi	r31, 0x06	; 6
    18b6:	80 81       	ld	r24, Z
    18b8:	88 60       	ori	r24, 0x08	; 8
    18ba:	80 83       	st	Z, r24
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
    18bc:	80 ea       	ldi	r24, 0xA0	; 160
    18be:	98 e0       	ldi	r25, 0x08	; 8
    18c0:	80 93 2a 20 	sts	0x202A, r24	; 0x80202a <stdio_base>
    18c4:	90 93 2b 20 	sts	0x202B, r25	; 0x80202b <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    18c8:	8c e4       	ldi	r24, 0x4C	; 76
    18ca:	9c e0       	ldi	r25, 0x0C	; 12
    18cc:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <ptr_put>
    18d0:	90 93 29 20 	sts	0x2029, r25	; 0x802029 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    18d4:	83 e4       	ldi	r24, 0x43	; 67
    18d6:	9c e0       	ldi	r25, 0x0C	; 12
    18d8:	80 93 22 20 	sts	0x2022, r24	; 0x802022 <__data_end>
    18dc:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
    18e0:	e6 e0       	ldi	r30, 0x06	; 6
    18e2:	f0 e2       	ldi	r31, 0x20	; 32
    18e4:	84 81       	ldd	r24, Z+4	; 0x04
    18e6:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
    18e8:	85 81       	ldd	r24, Z+5	; 0x05
    18ea:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
    18ec:	86 81       	ldd	r24, Z+6	; 0x06
    18ee:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	a2 81       	ldd	r26, Z+2	; 0x02
    18f6:	b3 81       	ldd	r27, Z+3	; 0x03
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	9a 83       	std	Y+2, r25	; 0x02
    18fc:	ab 83       	std	Y+3, r26	; 0x03
    18fe:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
    1900:	60 e1       	ldi	r22, 0x10	; 16
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	99 d9       	rcall	.-3278   	; 0xc38 <sysclk_enable_module>
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
    1906:	be 01       	movw	r22, r28
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	80 ea       	ldi	r24, 0xA0	; 160
    190e:	98 e0       	ldi	r25, 0x08	; 8
    1910:	0e 94 8c 02 	call	0x518	; 0x518 <usart_init_rs232>
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
    1914:	62 e5       	ldi	r22, 0x52	; 82
    1916:	71 e0       	ldi	r23, 0x01	; 1
    1918:	85 ed       	ldi	r24, 0xD5	; 213
    191a:	95 e0       	ldi	r25, 0x05	; 5
    191c:	3a d6       	rcall	.+3188   	; 0x2592 <fdevopen>
	
	stdio_serial_init(UART_TERMINAL_SERIAL, &usart_config); // function maps the serial output to printf, not necessary to know how it works
	
    191e:	27 96       	adiw	r28, 0x07	; 7
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	08 95       	ret

0000192a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    192a:	04 c0       	rjmp	.+8      	; 0x1934 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    192c:	61 50       	subi	r22, 0x01	; 1
    192e:	71 09       	sbc	r23, r1
    1930:	81 09       	sbc	r24, r1
    1932:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1934:	61 15       	cp	r22, r1
    1936:	71 05       	cpc	r23, r1
    1938:	81 05       	cpc	r24, r1
    193a:	91 05       	cpc	r25, r1
    193c:	b9 f7       	brne	.-18     	; 0x192c <__portable_avr_delay_cycles+0x2>
    193e:	08 95       	ret

00001940 <get_alt>:
		delay_ms(500);
	}
}

float get_alt(uint32_t init_press, uint32_t press, uint32_t temp)
{
    1940:	4f 92       	push	r4
    1942:	5f 92       	push	r5
    1944:	6f 92       	push	r6
    1946:	7f 92       	push	r7
    1948:	8f 92       	push	r8
    194a:	9f 92       	push	r9
    194c:	af 92       	push	r10
    194e:	bf 92       	push	r11
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	29 01       	movw	r4, r18
    195e:	3a 01       	movw	r6, r20
    1960:	47 01       	movw	r8, r14
    1962:	58 01       	movw	r10, r16
	float R = 287;
	float g = 9.80665;
	float pconst = 101325;
	return (((R * ((float)temp/100+273.15))/g)*log((float)init_press/(float)press)) * 3.28084; //return altitude in feet
    1964:	02 d3       	rcall	.+1540   	; 0x1f6a <__floatunsisf>
    1966:	6b 01       	movw	r12, r22
    1968:	7c 01       	movw	r14, r24
    196a:	c3 01       	movw	r24, r6
    196c:	b2 01       	movw	r22, r4
    196e:	fd d2       	rcall	.+1530   	; 0x1f6a <__floatunsisf>
    1970:	9b 01       	movw	r18, r22
    1972:	ac 01       	movw	r20, r24
    1974:	c7 01       	movw	r24, r14
    1976:	b6 01       	movw	r22, r12
    1978:	2a d2       	rcall	.+1108   	; 0x1dce <__divsf3>
    197a:	00 d4       	rcall	.+2048   	; 0x217c <log>
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
    1980:	c5 01       	movw	r24, r10
    1982:	b4 01       	movw	r22, r8
    1984:	f2 d2       	rcall	.+1508   	; 0x1f6a <__floatunsisf>
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	48 ec       	ldi	r20, 0xC8	; 200
    198c:	52 e4       	ldi	r21, 0x42	; 66
    198e:	1f d2       	rcall	.+1086   	; 0x1dce <__divsf3>
    1990:	23 e3       	ldi	r18, 0x33	; 51
    1992:	33 e9       	ldi	r19, 0x93	; 147
    1994:	48 e8       	ldi	r20, 0x88	; 136
    1996:	53 e4       	ldi	r21, 0x43	; 67
    1998:	b2 d1       	rcall	.+868    	; 0x1cfe <__addsf3>
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e8       	ldi	r19, 0x80	; 128
    199e:	4f e8       	ldi	r20, 0x8F	; 143
    19a0:	53 e4       	ldi	r21, 0x43	; 67
    19a2:	2c d4       	rcall	.+2136   	; 0x21fc <__mulsf3>
    19a4:	2a e0       	ldi	r18, 0x0A	; 10
    19a6:	38 ee       	ldi	r19, 0xE8	; 232
    19a8:	4c e1       	ldi	r20, 0x1C	; 28
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	10 d2       	rcall	.+1056   	; 0x1dce <__divsf3>
    19ae:	a7 01       	movw	r20, r14
    19b0:	96 01       	movw	r18, r12
    19b2:	24 d4       	rcall	.+2120   	; 0x21fc <__mulsf3>
    19b4:	28 e4       	ldi	r18, 0x48	; 72
    19b6:	39 ef       	ldi	r19, 0xF9	; 249
    19b8:	41 e5       	ldi	r20, 0x51	; 81
    19ba:	50 e4       	ldi	r21, 0x40	; 64
    19bc:	1f d4       	rcall	.+2110   	; 0x21fc <__mulsf3>
}
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	df 90       	pop	r13
    19c8:	cf 90       	pop	r12
    19ca:	bf 90       	pop	r11
    19cc:	af 90       	pop	r10
    19ce:	9f 90       	pop	r9
    19d0:	8f 90       	pop	r8
    19d2:	7f 90       	pop	r7
    19d4:	6f 90       	pop	r6
    19d6:	5f 90       	pop	r5
    19d8:	4f 90       	pop	r4
    19da:	08 95       	ret

000019dc <TCC0_init>:

void TCC0_init(uint16_t period, float duty)
{
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	8c 01       	movw	r16, r24
    19ee:	6a 01       	movw	r12, r20
    19f0:	7b 01       	movw	r14, r22
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	20 d9       	rcall	.-3520   	; 0xc38 <sysclk_enable_module>
	sysclk_enable_peripheral_clock(&TCC0);
	sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    19f8:	64 e0       	ldi	r22, 0x04	; 4
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	1d d9       	rcall	.-3526   	; 0xc38 <sysclk_enable_module>
	TCC0.CTRLA = 0x07;
    19fe:	c0 e0       	ldi	r28, 0x00	; 0
    1a00:	d8 e0       	ldi	r29, 0x08	; 8
    1a02:	87 e0       	ldi	r24, 0x07	; 7
    1a04:	88 83       	st	Y, r24
	TCC0.CTRLB = 0x23;
    1a06:	83 e2       	ldi	r24, 0x23	; 35
    1a08:	89 83       	std	Y+1, r24	; 0x01
	TCC0.PER = period;
    1a0a:	0e a3       	std	Y+38, r16	; 0x26
    1a0c:	1f a3       	std	Y+39, r17	; 0x27
	TCC0.CCB = TCC0.PER*duty;
    1a0e:	6e a1       	ldd	r22, Y+38	; 0x26
    1a10:	7f a1       	ldd	r23, Y+39	; 0x27
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a9 d2       	rcall	.+1362   	; 0x1f6a <__floatunsisf>
    1a18:	a7 01       	movw	r20, r14
    1a1a:	96 01       	movw	r18, r12
    1a1c:	ef d3       	rcall	.+2014   	; 0x21fc <__mulsf3>
    1a1e:	79 d2       	rcall	.+1266   	; 0x1f12 <__fixunssfsi>
    1a20:	6a a7       	std	Y+42, r22	; 0x2a
    1a22:	7b a7       	std	Y+43, r23	; 0x2b
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	ff 90       	pop	r15
    1a2e:	ef 90       	pop	r14
    1a30:	df 90       	pop	r13
    1a32:	cf 90       	pop	r12
    1a34:	08 95       	ret

00001a36 <main>:

float get_alt(uint32_t init_press, uint32_t press, uint32_t temp);
void TCC0_init(uint16_t period, float duty);

int main (void)
{	/* Insert system clock initialization code here (sysclk_init()). */
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	6f 97       	sbiw	r28, 0x1f	; 31
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	de bf       	out	0x3e, r29	; 62

	sysclk_init();
    1a44:	c4 d8       	rcall	.-3704   	; 0xbce <sysclk_init>
// 	PORTE.DIR = 0b00010000;
// 	PORTE.OUT = 0b00010000;
// 	while (1);
	PORTE.DIR |= HOTWIRE | BUZZ; // hotwire and buzzer dir
    1a46:	e0 e8       	ldi	r30, 0x80	; 128
    1a48:	f6 e0       	ldi	r31, 0x06	; 6
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 61       	ori	r24, 0x11	; 17
    1a4e:	80 83       	st	Z, r24
	PORTE.OUT &= ~(HOTWIRE | BUZZ); // hotwire and buzzer low
    1a50:	84 81       	ldd	r24, Z+4	; 0x04
    1a52:	8e 7e       	andi	r24, 0xEE	; 238
    1a54:	84 83       	std	Z+4, r24	; 0x04
// 	PORTE.OUT |= BUZZ; // buzz
// 	while(1);
	
	PORTC.DIR |= LED; // LED dir
    1a56:	e0 e4       	ldi	r30, 0x40	; 64
    1a58:	f6 e0       	ldi	r31, 0x06	; 6
    1a5a:	80 81       	ld	r24, Z
    1a5c:	82 60       	ori	r24, 0x02	; 2
    1a5e:	80 83       	st	Z, r24
	PORTC.OUT |= LED; // LED high
    1a60:	84 81       	ldd	r24, Z+4	; 0x04
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	84 83       	std	Z+4, r24	; 0x04
	
	MS56XX_t pressure_sensor = define_new_MS56XX_default_OSR(MS5607, &SPIC, PRESSURE_SELECT_PIN);
    1a66:	24 e1       	ldi	r18, 0x14	; 20
    1a68:	40 ec       	ldi	r20, 0xC0	; 192
    1a6a:	58 e0       	ldi	r21, 0x08	; 8
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	ce 01       	movw	r24, r28
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	3d d9       	rcall	.-3462   	; 0xcee <define_new_MS56XX_default_OSR>
	
	initializespi(&SPIC, &PORTC);
    1a74:	60 e4       	ldi	r22, 0x40	; 64
    1a76:	76 e0       	ldi	r23, 0x06	; 6
    1a78:	80 ec       	ldi	r24, 0xC0	; 192
    1a7a:	98 e0       	ldi	r25, 0x08	; 8
	enable_select_pin(pressure_sensor.select_pin);
    1a7c:	b1 dd       	rcall	.-1182   	; 0x15e0 <initializespi>
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
	
	//Pressure sensor initialization routine, also reads calibration data from sensor
	calibratePressureSensor(&pressure_sensor);
    1a80:	9a dd       	rcall	.-1228   	; 0x15b6 <enable_select_pin>
    1a82:	ce 01       	movw	r24, r28
    1a84:	01 96       	adiw	r24, 0x01	; 1
	
	readMS56XX(&pressure_sensor);
    1a86:	52 d9       	rcall	.-3420   	; 0xd2c <calibratePressureSensor>
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
    1a8c:	f4 d9       	rcall	.-3096   	; 0xe76 <readMS56XX>
	
	uint32_t init_press = pressure_sensor.data.pressure;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	af 81       	ldd	r26, Y+7	; 0x07
    1a94:	b8 85       	ldd	r27, Y+8	; 0x08
    1a96:	8c 8f       	std	Y+28, r24	; 0x1c
    1a98:	9d 8f       	std	Y+29, r25	; 0x1d
    1a9a:	ae 8f       	std	Y+30, r26	; 0x1e

	/* Insert application code here, after the board has been initialized. */

	uart_terminal_init();
    1a9c:	bf 8f       	std	Y+31, r27	; 0x1f
	
	float alt = 0;
	uint8_t flight_state = 0;
	
	TCC0_init(62499,.5);
    1a9e:	ff de       	rcall	.-514    	; 0x189e <uart_terminal_init>
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	7f e3       	ldi	r23, 0x3F	; 63
    1aa8:	83 e2       	ldi	r24, 0x23	; 35
    1aaa:	94 ef       	ldi	r25, 0xF4	; 244
    1aac:	97 df       	rcall	.-210    	; 0x19dc <TCC0_init>
	/* Insert application code here, after the board has been initialized. */

	uart_terminal_init();
	
	float alt = 0;
	uint8_t flight_state = 0;
    1aae:	1b 8e       	std	Y+27, r1	; 0x1b

			case 1:
				readMS56XX(&pressure_sensor);
				alt = get_alt(init_press, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
				
				printf("FS0, %lu, %lu, %lu\n", alt, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1ab0:	0f 2e       	mov	r0, r31
    1ab2:	fd e0       	ldi	r31, 0x0D	; 13
    1ab4:	cf 2e       	mov	r12, r31
    1ab6:	f0 e2       	ldi	r31, 0x20	; 32
    1ab8:	df 2e       	mov	r13, r31
    1aba:	f0 2d       	mov	r31, r0
				
				if(alt > 700)
				{
					TCC0_init(6294,.10);
					
					PORTE.OUT |= HOTWIRE; // cutdown
    1abc:	0f 2e       	mov	r0, r31
    1abe:	f0 e8       	ldi	r31, 0x80	; 128
    1ac0:	2f 2e       	mov	r2, r31
    1ac2:	f6 e0       	ldi	r31, 0x06	; 6
    1ac4:	3f 2e       	mov	r3, r31
    1ac6:	f0 2d       	mov	r31, r0
	
	TCC0_init(62499,.5);
	
	while(1)
	{
		switch(flight_state)
    1ac8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1aca:	91 30       	cpi	r25, 0x01	; 1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <main+0x9a>
    1ace:	4b c0       	rjmp	.+150    	; 0x1b66 <main+0x130>
    1ad0:	38 f0       	brcs	.+14     	; 0x1ae0 <main+0xaa>
    1ad2:	92 30       	cpi	r25, 0x02	; 2
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <main+0xa2>
    1ad6:	9a c0       	rjmp	.+308    	; 0x1c0c <main+0x1d6>
    1ad8:	93 30       	cpi	r25, 0x03	; 3
    1ada:	09 f4       	brne	.+2      	; 0x1ade <main+0xa8>
    1adc:	e0 c0       	rjmp	.+448    	; 0x1c9e <main+0x268>
		{
			case 0:
				readMS56XX(&pressure_sensor);
    1ade:	08 c1       	rjmp	.+528    	; 0x1cf0 <main+0x2ba>
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	01 96       	adiw	r24, 0x01	; 1
    1ae4:	c8 d9       	rcall	.-3184   	; 0xe76 <readMS56XX>
				alt = get_alt(init_press, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1ae6:	79 84       	ldd	r7, Y+9	; 0x09
    1ae8:	6a 84       	ldd	r6, Y+10	; 0x0a
    1aea:	5b 84       	ldd	r5, Y+11	; 0x0b
    1aec:	4c 84       	ldd	r4, Y+12	; 0x0c
    1aee:	bd 80       	ldd	r11, Y+5	; 0x05
    1af0:	ae 80       	ldd	r10, Y+6	; 0x06
    1af2:	9f 80       	ldd	r9, Y+7	; 0x07
    1af4:	88 84       	ldd	r8, Y+8	; 0x08
    1af6:	e7 2c       	mov	r14, r7
    1af8:	f6 2c       	mov	r15, r6
    1afa:	05 2d       	mov	r16, r5
    1afc:	14 2d       	mov	r17, r4
    1afe:	2b 2d       	mov	r18, r11
    1b00:	3a 2d       	mov	r19, r10
    1b02:	49 2d       	mov	r20, r9
    1b04:	58 2d       	mov	r21, r8
    1b06:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b08:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1b0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b0c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b0e:	18 df       	rcall	.-464    	; 0x1940 <get_alt>
    1b10:	e6 2e       	mov	r14, r22
    1b12:	f7 2e       	mov	r15, r23
    1b14:	08 2f       	mov	r16, r24
    1b16:	19 2f       	mov	r17, r25
				
				printf("FS0, %lu, %lu, %lu\n", alt, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1b18:	4f 92       	push	r4
    1b1a:	5f 92       	push	r5
    1b1c:	6f 92       	push	r6
    1b1e:	7f 92       	push	r7
    1b20:	8f 92       	push	r8
    1b22:	9f 92       	push	r9
    1b24:	af 92       	push	r10
    1b26:	bf 92       	push	r11
    1b28:	9f 93       	push	r25
    1b2a:	8f 93       	push	r24
    1b2c:	7f 93       	push	r23
    1b2e:	6f 93       	push	r22
    1b30:	df 92       	push	r13
    1b32:	cf 92       	push	r12
    1b34:	78 d5       	rcall	.+2800   	; 0x2626 <printf>
				
				if(alt > 30)
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 ef       	ldi	r20, 0xF0	; 240
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	6e 2d       	mov	r22, r14
    1b44:	7f 2d       	mov	r23, r15
    1b46:	80 2f       	mov	r24, r16
    1b48:	91 2f       	mov	r25, r17
    1b4a:	0f d3       	rcall	.+1566   	; 0x216a <__gesf2>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <main+0x11c>
    1b50:	cf c0       	rjmp	.+414    	; 0x1cf0 <main+0x2ba>
				{
					TCC0_init(31249,.1);
    1b52:	4d ec       	ldi	r20, 0xCD	; 205
    1b54:	5c ec       	ldi	r21, 0xCC	; 204
    1b56:	6c ec       	ldi	r22, 0xCC	; 204
    1b58:	7d e3       	ldi	r23, 0x3D	; 61
    1b5a:	81 e1       	ldi	r24, 0x11	; 17
    1b5c:	9a e7       	ldi	r25, 0x7A	; 122
    1b5e:	3e df       	rcall	.-388    	; 0x19dc <TCC0_init>
					flight_state = 1;
    1b60:	b1 e0       	ldi	r27, 0x01	; 1
    1b62:	bb 8f       	std	Y+27, r27	; 0x1b
    1b64:	c5 c0       	rjmp	.+394    	; 0x1cf0 <main+0x2ba>
				}
			break;

			case 1:
				readMS56XX(&pressure_sensor);
    1b66:	ce 01       	movw	r24, r28
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	85 d9       	rcall	.-3318   	; 0xe76 <readMS56XX>
    1b6c:	79 84       	ldd	r7, Y+9	; 0x09
				alt = get_alt(init_press, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1b6e:	6a 84       	ldd	r6, Y+10	; 0x0a
    1b70:	5b 84       	ldd	r5, Y+11	; 0x0b
    1b72:	4c 84       	ldd	r4, Y+12	; 0x0c
    1b74:	bd 80       	ldd	r11, Y+5	; 0x05
    1b76:	ae 80       	ldd	r10, Y+6	; 0x06
    1b78:	9f 80       	ldd	r9, Y+7	; 0x07
    1b7a:	88 84       	ldd	r8, Y+8	; 0x08
    1b7c:	e7 2c       	mov	r14, r7
    1b7e:	f6 2c       	mov	r15, r6
    1b80:	05 2d       	mov	r16, r5
    1b82:	14 2d       	mov	r17, r4
    1b84:	2b 2d       	mov	r18, r11
    1b86:	3a 2d       	mov	r19, r10
    1b88:	49 2d       	mov	r20, r9
    1b8a:	58 2d       	mov	r21, r8
    1b8c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1b8e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1b90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b92:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1b94:	d5 de       	rcall	.-598    	; 0x1940 <get_alt>
    1b96:	e6 2e       	mov	r14, r22
    1b98:	f7 2e       	mov	r15, r23
    1b9a:	08 2f       	mov	r16, r24
    1b9c:	19 2f       	mov	r17, r25
    1b9e:	4f 92       	push	r4
				
				printf("FS0, %lu, %lu, %lu\n", alt, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1ba0:	5f 92       	push	r5
    1ba2:	6f 92       	push	r6
    1ba4:	7f 92       	push	r7
    1ba6:	8f 92       	push	r8
    1ba8:	9f 92       	push	r9
    1baa:	af 92       	push	r10
    1bac:	bf 92       	push	r11
    1bae:	9f 93       	push	r25
    1bb0:	8f 93       	push	r24
    1bb2:	7f 93       	push	r23
    1bb4:	6f 93       	push	r22
    1bb6:	df 92       	push	r13
    1bb8:	cf 92       	push	r12
    1bba:	35 d5       	rcall	.+2666   	; 0x2626 <printf>
    1bbc:	cd bf       	out	0x3d, r28	; 61
				
				if(alt > 700)
    1bbe:	de bf       	out	0x3e, r29	; 62
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4f e2       	ldi	r20, 0x2F	; 47
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	6e 2d       	mov	r22, r14
    1bca:	7f 2d       	mov	r23, r15
    1bcc:	80 2f       	mov	r24, r16
    1bce:	91 2f       	mov	r25, r17
    1bd0:	cc d2       	rcall	.+1432   	; 0x216a <__gesf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	0c f0       	brlt	.+2      	; 0x1bd8 <main+0x1a2>
    1bd6:	8c c0       	rjmp	.+280    	; 0x1cf0 <main+0x2ba>
    1bd8:	4d ec       	ldi	r20, 0xCD	; 205
				{
					TCC0_init(6294,.10);
    1bda:	5c ec       	ldi	r21, 0xCC	; 204
    1bdc:	6c ec       	ldi	r22, 0xCC	; 204
    1bde:	7d e3       	ldi	r23, 0x3D	; 61
    1be0:	86 e9       	ldi	r24, 0x96	; 150
    1be2:	98 e1       	ldi	r25, 0x18	; 24
    1be4:	fb de       	rcall	.-522    	; 0x19dc <TCC0_init>
    1be6:	d1 01       	movw	r26, r2
					
					PORTE.OUT |= HOTWIRE; // cutdown
    1be8:	14 96       	adiw	r26, 0x04	; 4
    1bea:	8c 91       	ld	r24, X
    1bec:	14 97       	sbiw	r26, 0x04	; 4
    1bee:	81 60       	ori	r24, 0x01	; 1
    1bf0:	14 96       	adiw	r26, 0x04	; 4
    1bf2:	8c 93       	st	X, r24
					delay_ms(4000);
    1bf4:	66 e5       	ldi	r22, 0x56	; 86
    1bf6:	75 e8       	ldi	r23, 0x85	; 133
    1bf8:	85 e4       	ldi	r24, 0x45	; 69
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	96 de       	rcall	.-724    	; 0x192a <__portable_avr_delay_cycles>
    1bfe:	f1 01       	movw	r30, r2
					PORTE.OUT &= ~HOTWIRE;
    1c00:	84 81       	ldd	r24, Z+4	; 0x04
    1c02:	8e 7f       	andi	r24, 0xFE	; 254
    1c04:	84 83       	std	Z+4, r24	; 0x04
    1c06:	f2 e0       	ldi	r31, 0x02	; 2
					
					flight_state = 2;
    1c08:	fb 8f       	std	Y+27, r31	; 0x1b
    1c0a:	72 c0       	rjmp	.+228    	; 0x1cf0 <main+0x2ba>
    1c0c:	ce 01       	movw	r24, r28
				}
			break;
			
			case 2:
				readMS56XX(&pressure_sensor);
    1c0e:	01 96       	adiw	r24, 0x01	; 1
    1c10:	32 d9       	rcall	.-3484   	; 0xe76 <readMS56XX>
    1c12:	79 84       	ldd	r7, Y+9	; 0x09
    1c14:	6a 84       	ldd	r6, Y+10	; 0x0a
				alt = get_alt(init_press, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1c16:	5b 84       	ldd	r5, Y+11	; 0x0b
    1c18:	4c 84       	ldd	r4, Y+12	; 0x0c
    1c1a:	bd 80       	ldd	r11, Y+5	; 0x05
    1c1c:	ae 80       	ldd	r10, Y+6	; 0x06
    1c1e:	9f 80       	ldd	r9, Y+7	; 0x07
    1c20:	88 84       	ldd	r8, Y+8	; 0x08
    1c22:	e7 2c       	mov	r14, r7
    1c24:	f6 2c       	mov	r15, r6
    1c26:	05 2d       	mov	r16, r5
    1c28:	14 2d       	mov	r17, r4
    1c2a:	2b 2d       	mov	r18, r11
    1c2c:	3a 2d       	mov	r19, r10
    1c2e:	49 2d       	mov	r20, r9
    1c30:	58 2d       	mov	r21, r8
    1c32:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1c34:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1c36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c3a:	82 de       	rcall	.-764    	; 0x1940 <get_alt>
    1c3c:	e6 2e       	mov	r14, r22
    1c3e:	f7 2e       	mov	r15, r23
    1c40:	08 2f       	mov	r16, r24
    1c42:	19 2f       	mov	r17, r25
    1c44:	4f 92       	push	r4
			
				printf("FS0, %lu, %lu, %lu\n", alt, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1c46:	5f 92       	push	r5
    1c48:	6f 92       	push	r6
    1c4a:	7f 92       	push	r7
    1c4c:	8f 92       	push	r8
    1c4e:	9f 92       	push	r9
    1c50:	af 92       	push	r10
    1c52:	bf 92       	push	r11
    1c54:	9f 93       	push	r25
    1c56:	8f 93       	push	r24
    1c58:	7f 93       	push	r23
    1c5a:	6f 93       	push	r22
    1c5c:	df 92       	push	r13
    1c5e:	cf 92       	push	r12
    1c60:	e2 d4       	rcall	.+2500   	; 0x2626 <printf>
				
				if(alt < 50)
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	48 e4       	ldi	r20, 0x48	; 72
    1c6c:	52 e4       	ldi	r21, 0x42	; 66
    1c6e:	6e 2d       	mov	r22, r14
    1c70:	7f 2d       	mov	r23, r15
    1c72:	80 2f       	mov	r24, r16
    1c74:	91 2f       	mov	r25, r17
    1c76:	a7 d0       	rcall	.+334    	; 0x1dc6 <__cmpsf2>
    1c78:	88 23       	and	r24, r24
    1c7a:	d4 f5       	brge	.+116    	; 0x1cf0 <main+0x2ba>
				{
					TCC0_init(62499,.1);
    1c7c:	4d ec       	ldi	r20, 0xCD	; 205
    1c7e:	5c ec       	ldi	r21, 0xCC	; 204
    1c80:	6c ec       	ldi	r22, 0xCC	; 204
    1c82:	7d e3       	ldi	r23, 0x3D	; 61
    1c84:	83 e2       	ldi	r24, 0x23	; 35
    1c86:	94 ef       	ldi	r25, 0xF4	; 244
    1c88:	a9 de       	rcall	.-686    	; 0x19dc <TCC0_init>
    1c8a:	d1 01       	movw	r26, r2
					
					PORTE.OUT |= BUZZ; // buzz
    1c8c:	14 96       	adiw	r26, 0x04	; 4
    1c8e:	8c 91       	ld	r24, X
    1c90:	14 97       	sbiw	r26, 0x04	; 4
    1c92:	80 61       	ori	r24, 0x10	; 16
    1c94:	14 96       	adiw	r26, 0x04	; 4
    1c96:	8c 93       	st	X, r24
    1c98:	b3 e0       	ldi	r27, 0x03	; 3
					
					flight_state = 3;
    1c9a:	bb 8f       	std	Y+27, r27	; 0x1b
    1c9c:	29 c0       	rjmp	.+82     	; 0x1cf0 <main+0x2ba>
				}
			break;
			
			case 3:
				readMS56XX(&pressure_sensor);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	e9 d8       	rcall	.-3630   	; 0xe76 <readMS56XX>
    1ca4:	79 84       	ldd	r7, Y+9	; 0x09
				alt = get_alt(init_press, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1ca6:	6a 84       	ldd	r6, Y+10	; 0x0a
    1ca8:	5b 84       	ldd	r5, Y+11	; 0x0b
    1caa:	4c 84       	ldd	r4, Y+12	; 0x0c
    1cac:	bd 80       	ldd	r11, Y+5	; 0x05
    1cae:	ae 80       	ldd	r10, Y+6	; 0x06
    1cb0:	9f 80       	ldd	r9, Y+7	; 0x07
    1cb2:	88 84       	ldd	r8, Y+8	; 0x08
    1cb4:	e7 2c       	mov	r14, r7
    1cb6:	f6 2c       	mov	r15, r6
    1cb8:	05 2d       	mov	r16, r5
    1cba:	14 2d       	mov	r17, r4
    1cbc:	2b 2d       	mov	r18, r11
    1cbe:	3a 2d       	mov	r19, r10
    1cc0:	49 2d       	mov	r20, r9
    1cc2:	58 2d       	mov	r21, r8
    1cc4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1cc6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    1cc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ccc:	39 de       	rcall	.-910    	; 0x1940 <get_alt>
				
				printf("FS0, %lu, %lu, %lu\n", alt, pressure_sensor.data.pressure, pressure_sensor.data.temperature);
    1cce:	4f 92       	push	r4
    1cd0:	5f 92       	push	r5
    1cd2:	6f 92       	push	r6
    1cd4:	7f 92       	push	r7
    1cd6:	8f 92       	push	r8
    1cd8:	9f 92       	push	r9
    1cda:	af 92       	push	r10
    1cdc:	bf 92       	push	r11
    1cde:	9f 93       	push	r25
    1ce0:	8f 93       	push	r24
    1ce2:	7f 93       	push	r23
    1ce4:	6f 93       	push	r22
    1ce6:	df 92       	push	r13
    1ce8:	cf 92       	push	r12
    1cea:	9d d4       	rcall	.+2362   	; 0x2626 <printf>
    1cec:	cd bf       	out	0x3d, r28	; 61
			break;
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	6b ea       	ldi	r22, 0xAB	; 171
		}
		delay_ms(500);
    1cf2:	70 eb       	ldi	r23, 0xB0	; 176
    1cf4:	88 e2       	ldi	r24, 0x28	; 40
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	18 de       	rcall	.-976    	; 0x192a <__portable_avr_delay_cycles>
    1cfa:	e6 ce       	rjmp	.-564    	; 0x1ac8 <main+0x92>

00001cfc <__subsf3>:
    1cfc:	50 58       	subi	r21, 0x80	; 128

00001cfe <__addsf3>:
	}
    1cfe:	bb 27       	eor	r27, r27
    1d00:	aa 27       	eor	r26, r26
    1d02:	0e d0       	rcall	.+28     	; 0x1d20 <__addsf3x>
    1d04:	f8 c1       	rjmp	.+1008   	; 0x20f6 <__fp_round>
    1d06:	e9 d1       	rcall	.+978    	; 0x20da <__fp_pscA>
    1d08:	30 f0       	brcs	.+12     	; 0x1d16 <__addsf3+0x18>
    1d0a:	ee d1       	rcall	.+988    	; 0x20e8 <__fp_pscB>
    1d0c:	20 f0       	brcs	.+8      	; 0x1d16 <__addsf3+0x18>
    1d0e:	31 f4       	brne	.+12     	; 0x1d1c <__addsf3+0x1e>
    1d10:	9f 3f       	cpi	r25, 0xFF	; 255
    1d12:	11 f4       	brne	.+4      	; 0x1d18 <__addsf3+0x1a>
    1d14:	1e f4       	brtc	.+6      	; 0x1d1c <__addsf3+0x1e>
    1d16:	ce c1       	rjmp	.+924    	; 0x20b4 <__fp_nan>
    1d18:	0e f4       	brtc	.+2      	; 0x1d1c <__addsf3+0x1e>
    1d1a:	e0 95       	com	r30
    1d1c:	e7 fb       	bst	r30, 7
    1d1e:	c4 c1       	rjmp	.+904    	; 0x20a8 <__fp_inf>

00001d20 <__addsf3x>:
    1d20:	e9 2f       	mov	r30, r25
    1d22:	fa d1       	rcall	.+1012   	; 0x2118 <__fp_split3>
    1d24:	80 f3       	brcs	.-32     	; 0x1d06 <__addsf3+0x8>
    1d26:	ba 17       	cp	r27, r26
    1d28:	62 07       	cpc	r22, r18
    1d2a:	73 07       	cpc	r23, r19
    1d2c:	84 07       	cpc	r24, r20
    1d2e:	95 07       	cpc	r25, r21
    1d30:	18 f0       	brcs	.+6      	; 0x1d38 <__addsf3x+0x18>
    1d32:	71 f4       	brne	.+28     	; 0x1d50 <__addsf3x+0x30>
    1d34:	9e f5       	brtc	.+102    	; 0x1d9c <__addsf3x+0x7c>
    1d36:	12 c2       	rjmp	.+1060   	; 0x215c <__fp_zero>
    1d38:	0e f4       	brtc	.+2      	; 0x1d3c <__addsf3x+0x1c>
    1d3a:	e0 95       	com	r30
    1d3c:	0b 2e       	mov	r0, r27
    1d3e:	ba 2f       	mov	r27, r26
    1d40:	a0 2d       	mov	r26, r0
    1d42:	0b 01       	movw	r0, r22
    1d44:	b9 01       	movw	r22, r18
    1d46:	90 01       	movw	r18, r0
    1d48:	0c 01       	movw	r0, r24
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	a0 01       	movw	r20, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	ff 27       	eor	r31, r31
    1d52:	59 1b       	sub	r21, r25
    1d54:	99 f0       	breq	.+38     	; 0x1d7c <__addsf3x+0x5c>
    1d56:	59 3f       	cpi	r21, 0xF9	; 249
    1d58:	50 f4       	brcc	.+20     	; 0x1d6e <__addsf3x+0x4e>
    1d5a:	50 3e       	cpi	r21, 0xE0	; 224
    1d5c:	68 f1       	brcs	.+90     	; 0x1db8 <__addsf3x+0x98>
    1d5e:	1a 16       	cp	r1, r26
    1d60:	f0 40       	sbci	r31, 0x00	; 0
    1d62:	a2 2f       	mov	r26, r18
    1d64:	23 2f       	mov	r18, r19
    1d66:	34 2f       	mov	r19, r20
    1d68:	44 27       	eor	r20, r20
    1d6a:	58 5f       	subi	r21, 0xF8	; 248
    1d6c:	f3 cf       	rjmp	.-26     	; 0x1d54 <__addsf3x+0x34>
    1d6e:	46 95       	lsr	r20
    1d70:	37 95       	ror	r19
    1d72:	27 95       	ror	r18
    1d74:	a7 95       	ror	r26
    1d76:	f0 40       	sbci	r31, 0x00	; 0
    1d78:	53 95       	inc	r21
    1d7a:	c9 f7       	brne	.-14     	; 0x1d6e <__addsf3x+0x4e>
    1d7c:	7e f4       	brtc	.+30     	; 0x1d9c <__addsf3x+0x7c>
    1d7e:	1f 16       	cp	r1, r31
    1d80:	ba 0b       	sbc	r27, r26
    1d82:	62 0b       	sbc	r22, r18
    1d84:	73 0b       	sbc	r23, r19
    1d86:	84 0b       	sbc	r24, r20
    1d88:	ba f0       	brmi	.+46     	; 0x1db8 <__addsf3x+0x98>
    1d8a:	91 50       	subi	r25, 0x01	; 1
    1d8c:	a1 f0       	breq	.+40     	; 0x1db6 <__addsf3x+0x96>
    1d8e:	ff 0f       	add	r31, r31
    1d90:	bb 1f       	adc	r27, r27
    1d92:	66 1f       	adc	r22, r22
    1d94:	77 1f       	adc	r23, r23
    1d96:	88 1f       	adc	r24, r24
    1d98:	c2 f7       	brpl	.-16     	; 0x1d8a <__addsf3x+0x6a>
    1d9a:	0e c0       	rjmp	.+28     	; 0x1db8 <__addsf3x+0x98>
    1d9c:	ba 0f       	add	r27, r26
    1d9e:	62 1f       	adc	r22, r18
    1da0:	73 1f       	adc	r23, r19
    1da2:	84 1f       	adc	r24, r20
    1da4:	48 f4       	brcc	.+18     	; 0x1db8 <__addsf3x+0x98>
    1da6:	87 95       	ror	r24
    1da8:	77 95       	ror	r23
    1daa:	67 95       	ror	r22
    1dac:	b7 95       	ror	r27
    1dae:	f7 95       	ror	r31
    1db0:	9e 3f       	cpi	r25, 0xFE	; 254
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <__addsf3x+0x96>
    1db4:	b3 cf       	rjmp	.-154    	; 0x1d1c <__addsf3+0x1e>
    1db6:	93 95       	inc	r25
    1db8:	88 0f       	add	r24, r24
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <__addsf3x+0x9e>
    1dbc:	99 27       	eor	r25, r25
    1dbe:	ee 0f       	add	r30, r30
    1dc0:	97 95       	ror	r25
    1dc2:	87 95       	ror	r24
    1dc4:	08 95       	ret

00001dc6 <__cmpsf2>:
    1dc6:	4c d1       	rcall	.+664    	; 0x2060 <__fp_cmp>
    1dc8:	08 f4       	brcc	.+2      	; 0x1dcc <__cmpsf2+0x6>
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	08 95       	ret

00001dce <__divsf3>:
    1dce:	0c d0       	rcall	.+24     	; 0x1de8 <__divsf3x>
    1dd0:	92 c1       	rjmp	.+804    	; 0x20f6 <__fp_round>
    1dd2:	8a d1       	rcall	.+788    	; 0x20e8 <__fp_pscB>
    1dd4:	40 f0       	brcs	.+16     	; 0x1de6 <__divsf3+0x18>
    1dd6:	81 d1       	rcall	.+770    	; 0x20da <__fp_pscA>
    1dd8:	30 f0       	brcs	.+12     	; 0x1de6 <__divsf3+0x18>
    1dda:	21 f4       	brne	.+8      	; 0x1de4 <__divsf3+0x16>
    1ddc:	5f 3f       	cpi	r21, 0xFF	; 255
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <__divsf3+0x18>
    1de0:	63 c1       	rjmp	.+710    	; 0x20a8 <__fp_inf>
    1de2:	51 11       	cpse	r21, r1
    1de4:	bc c1       	rjmp	.+888    	; 0x215e <__fp_szero>
    1de6:	66 c1       	rjmp	.+716    	; 0x20b4 <__fp_nan>

00001de8 <__divsf3x>:
    1de8:	97 d1       	rcall	.+814    	; 0x2118 <__fp_split3>
    1dea:	98 f3       	brcs	.-26     	; 0x1dd2 <__divsf3+0x4>

00001dec <__divsf3_pse>:
    1dec:	99 23       	and	r25, r25
    1dee:	c9 f3       	breq	.-14     	; 0x1de2 <__divsf3+0x14>
    1df0:	55 23       	and	r21, r21
    1df2:	b1 f3       	breq	.-20     	; 0x1de0 <__divsf3+0x12>
    1df4:	95 1b       	sub	r25, r21
    1df6:	55 0b       	sbc	r21, r21
    1df8:	bb 27       	eor	r27, r27
    1dfa:	aa 27       	eor	r26, r26
    1dfc:	62 17       	cp	r22, r18
    1dfe:	73 07       	cpc	r23, r19
    1e00:	84 07       	cpc	r24, r20
    1e02:	38 f0       	brcs	.+14     	; 0x1e12 <__divsf3_pse+0x26>
    1e04:	9f 5f       	subi	r25, 0xFF	; 255
    1e06:	5f 4f       	sbci	r21, 0xFF	; 255
    1e08:	22 0f       	add	r18, r18
    1e0a:	33 1f       	adc	r19, r19
    1e0c:	44 1f       	adc	r20, r20
    1e0e:	aa 1f       	adc	r26, r26
    1e10:	a9 f3       	breq	.-22     	; 0x1dfc <__divsf3_pse+0x10>
    1e12:	33 d0       	rcall	.+102    	; 0x1e7a <__divsf3_pse+0x8e>
    1e14:	0e 2e       	mov	r0, r30
    1e16:	3a f0       	brmi	.+14     	; 0x1e26 <__divsf3_pse+0x3a>
    1e18:	e0 e8       	ldi	r30, 0x80	; 128
    1e1a:	30 d0       	rcall	.+96     	; 0x1e7c <__divsf3_pse+0x90>
    1e1c:	91 50       	subi	r25, 0x01	; 1
    1e1e:	50 40       	sbci	r21, 0x00	; 0
    1e20:	e6 95       	lsr	r30
    1e22:	00 1c       	adc	r0, r0
    1e24:	ca f7       	brpl	.-14     	; 0x1e18 <__divsf3_pse+0x2c>
    1e26:	29 d0       	rcall	.+82     	; 0x1e7a <__divsf3_pse+0x8e>
    1e28:	fe 2f       	mov	r31, r30
    1e2a:	27 d0       	rcall	.+78     	; 0x1e7a <__divsf3_pse+0x8e>
    1e2c:	66 0f       	add	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	88 1f       	adc	r24, r24
    1e32:	bb 1f       	adc	r27, r27
    1e34:	26 17       	cp	r18, r22
    1e36:	37 07       	cpc	r19, r23
    1e38:	48 07       	cpc	r20, r24
    1e3a:	ab 07       	cpc	r26, r27
    1e3c:	b0 e8       	ldi	r27, 0x80	; 128
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <__divsf3_pse+0x56>
    1e40:	bb 0b       	sbc	r27, r27
    1e42:	80 2d       	mov	r24, r0
    1e44:	bf 01       	movw	r22, r30
    1e46:	ff 27       	eor	r31, r31
    1e48:	93 58       	subi	r25, 0x83	; 131
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	2a f0       	brmi	.+10     	; 0x1e58 <__divsf3_pse+0x6c>
    1e4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e50:	51 05       	cpc	r21, r1
    1e52:	68 f0       	brcs	.+26     	; 0x1e6e <__divsf3_pse+0x82>
    1e54:	29 c1       	rjmp	.+594    	; 0x20a8 <__fp_inf>
    1e56:	83 c1       	rjmp	.+774    	; 0x215e <__fp_szero>
    1e58:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5a:	ec f3       	brlt	.-6      	; 0x1e56 <__divsf3_pse+0x6a>
    1e5c:	98 3e       	cpi	r25, 0xE8	; 232
    1e5e:	dc f3       	brlt	.-10     	; 0x1e56 <__divsf3_pse+0x6a>
    1e60:	86 95       	lsr	r24
    1e62:	77 95       	ror	r23
    1e64:	67 95       	ror	r22
    1e66:	b7 95       	ror	r27
    1e68:	f7 95       	ror	r31
    1e6a:	9f 5f       	subi	r25, 0xFF	; 255
    1e6c:	c9 f7       	brne	.-14     	; 0x1e60 <__divsf3_pse+0x74>
    1e6e:	88 0f       	add	r24, r24
    1e70:	91 1d       	adc	r25, r1
    1e72:	96 95       	lsr	r25
    1e74:	87 95       	ror	r24
    1e76:	97 f9       	bld	r25, 7
    1e78:	08 95       	ret
    1e7a:	e1 e0       	ldi	r30, 0x01	; 1
    1e7c:	66 0f       	add	r22, r22
    1e7e:	77 1f       	adc	r23, r23
    1e80:	88 1f       	adc	r24, r24
    1e82:	bb 1f       	adc	r27, r27
    1e84:	62 17       	cp	r22, r18
    1e86:	73 07       	cpc	r23, r19
    1e88:	84 07       	cpc	r24, r20
    1e8a:	ba 07       	cpc	r27, r26
    1e8c:	20 f0       	brcs	.+8      	; 0x1e96 <__divsf3_pse+0xaa>
    1e8e:	62 1b       	sub	r22, r18
    1e90:	73 0b       	sbc	r23, r19
    1e92:	84 0b       	sbc	r24, r20
    1e94:	ba 0b       	sbc	r27, r26
    1e96:	ee 1f       	adc	r30, r30
    1e98:	88 f7       	brcc	.-30     	; 0x1e7c <__divsf3_pse+0x90>
    1e9a:	e0 95       	com	r30
    1e9c:	08 95       	ret

00001e9e <__fixsfdi>:
    1e9e:	be e3       	ldi	r27, 0x3E	; 62
    1ea0:	04 d0       	rcall	.+8      	; 0x1eaa <__fixunssfdi+0x2>
    1ea2:	08 f4       	brcc	.+2      	; 0x1ea6 <__fixsfdi+0x8>
    1ea4:	90 e8       	ldi	r25, 0x80	; 128
    1ea6:	08 95       	ret

00001ea8 <__fixunssfdi>:
    1ea8:	bf e3       	ldi	r27, 0x3F	; 63
    1eaa:	22 27       	eor	r18, r18
    1eac:	33 27       	eor	r19, r19
    1eae:	a9 01       	movw	r20, r18
    1eb0:	3b d1       	rcall	.+630    	; 0x2128 <__fp_splitA>
    1eb2:	58 f1       	brcs	.+86     	; 0x1f0a <__fixunssfdi+0x62>
    1eb4:	9f 57       	subi	r25, 0x7F	; 127
    1eb6:	40 f1       	brcs	.+80     	; 0x1f08 <__fixunssfdi+0x60>
    1eb8:	b9 17       	cp	r27, r25
    1eba:	38 f1       	brcs	.+78     	; 0x1f0a <__fixunssfdi+0x62>
    1ebc:	bf e3       	ldi	r27, 0x3F	; 63
    1ebe:	b9 1b       	sub	r27, r25
    1ec0:	99 27       	eor	r25, r25
    1ec2:	b8 50       	subi	r27, 0x08	; 8
    1ec4:	3a f4       	brpl	.+14     	; 0x1ed4 <__fixunssfdi+0x2c>
    1ec6:	66 0f       	add	r22, r22
    1ec8:	77 1f       	adc	r23, r23
    1eca:	88 1f       	adc	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	b3 95       	inc	r27
    1ed0:	d2 f3       	brmi	.-12     	; 0x1ec6 <__fixunssfdi+0x1e>
    1ed2:	16 c0       	rjmp	.+44     	; 0x1f00 <__fixunssfdi+0x58>
    1ed4:	b8 50       	subi	r27, 0x08	; 8
    1ed6:	4a f0       	brmi	.+18     	; 0x1eea <__fixunssfdi+0x42>
    1ed8:	23 2f       	mov	r18, r19
    1eda:	34 2f       	mov	r19, r20
    1edc:	45 2f       	mov	r20, r21
    1ede:	56 2f       	mov	r21, r22
    1ee0:	67 2f       	mov	r22, r23
    1ee2:	78 2f       	mov	r23, r24
    1ee4:	88 27       	eor	r24, r24
    1ee6:	b8 50       	subi	r27, 0x08	; 8
    1ee8:	ba f7       	brpl	.-18     	; 0x1ed8 <__fixunssfdi+0x30>
    1eea:	b8 5f       	subi	r27, 0xF8	; 248
    1eec:	49 f0       	breq	.+18     	; 0x1f00 <__fixunssfdi+0x58>
    1eee:	86 95       	lsr	r24
    1ef0:	77 95       	ror	r23
    1ef2:	67 95       	ror	r22
    1ef4:	57 95       	ror	r21
    1ef6:	47 95       	ror	r20
    1ef8:	37 95       	ror	r19
    1efa:	27 95       	ror	r18
    1efc:	ba 95       	dec	r27
    1efe:	b9 f7       	brne	.-18     	; 0x1eee <__fixunssfdi+0x46>
    1f00:	0e f4       	brtc	.+2      	; 0x1f04 <__fixunssfdi+0x5c>
    1f02:	db d0       	rcall	.+438    	; 0x20ba <__fp_negdi>
    1f04:	88 94       	clc
    1f06:	08 95       	ret
    1f08:	88 94       	clc
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	cb 01       	movw	r24, r22
    1f10:	08 95       	ret

00001f12 <__fixunssfsi>:
    1f12:	0a d1       	rcall	.+532    	; 0x2128 <__fp_splitA>
    1f14:	88 f0       	brcs	.+34     	; 0x1f38 <__fixunssfsi+0x26>
    1f16:	9f 57       	subi	r25, 0x7F	; 127
    1f18:	90 f0       	brcs	.+36     	; 0x1f3e <__fixunssfsi+0x2c>
    1f1a:	b9 2f       	mov	r27, r25
    1f1c:	99 27       	eor	r25, r25
    1f1e:	b7 51       	subi	r27, 0x17	; 23
    1f20:	a0 f0       	brcs	.+40     	; 0x1f4a <__fixunssfsi+0x38>
    1f22:	d1 f0       	breq	.+52     	; 0x1f58 <__fixunssfsi+0x46>
    1f24:	66 0f       	add	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	1a f0       	brmi	.+6      	; 0x1f34 <__fixunssfsi+0x22>
    1f2e:	ba 95       	dec	r27
    1f30:	c9 f7       	brne	.-14     	; 0x1f24 <__fixunssfsi+0x12>
    1f32:	12 c0       	rjmp	.+36     	; 0x1f58 <__fixunssfsi+0x46>
    1f34:	b1 30       	cpi	r27, 0x01	; 1
    1f36:	81 f0       	breq	.+32     	; 0x1f58 <__fixunssfsi+0x46>
    1f38:	11 d1       	rcall	.+546    	; 0x215c <__fp_zero>
    1f3a:	b1 e0       	ldi	r27, 0x01	; 1
    1f3c:	08 95       	ret
    1f3e:	0e c1       	rjmp	.+540    	; 0x215c <__fp_zero>
    1f40:	67 2f       	mov	r22, r23
    1f42:	78 2f       	mov	r23, r24
    1f44:	88 27       	eor	r24, r24
    1f46:	b8 5f       	subi	r27, 0xF8	; 248
    1f48:	39 f0       	breq	.+14     	; 0x1f58 <__fixunssfsi+0x46>
    1f4a:	b9 3f       	cpi	r27, 0xF9	; 249
    1f4c:	cc f3       	brlt	.-14     	; 0x1f40 <__fixunssfsi+0x2e>
    1f4e:	86 95       	lsr	r24
    1f50:	77 95       	ror	r23
    1f52:	67 95       	ror	r22
    1f54:	b3 95       	inc	r27
    1f56:	d9 f7       	brne	.-10     	; 0x1f4e <__fixunssfsi+0x3c>
    1f58:	3e f4       	brtc	.+14     	; 0x1f68 <__fixunssfsi+0x56>
    1f5a:	90 95       	com	r25
    1f5c:	80 95       	com	r24
    1f5e:	70 95       	com	r23
    1f60:	61 95       	neg	r22
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	8f 4f       	sbci	r24, 0xFF	; 255
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	08 95       	ret

00001f6a <__floatunsisf>:
    1f6a:	e8 94       	clt
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <__floatsisf+0x12>

00001f6e <__floatsisf>:
    1f6e:	97 fb       	bst	r25, 7
    1f70:	3e f4       	brtc	.+14     	; 0x1f80 <__floatsisf+0x12>
    1f72:	90 95       	com	r25
    1f74:	80 95       	com	r24
    1f76:	70 95       	com	r23
    1f78:	61 95       	neg	r22
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f80:	99 23       	and	r25, r25
    1f82:	a9 f0       	breq	.+42     	; 0x1fae <__floatsisf+0x40>
    1f84:	f9 2f       	mov	r31, r25
    1f86:	96 e9       	ldi	r25, 0x96	; 150
    1f88:	bb 27       	eor	r27, r27
    1f8a:	93 95       	inc	r25
    1f8c:	f6 95       	lsr	r31
    1f8e:	87 95       	ror	r24
    1f90:	77 95       	ror	r23
    1f92:	67 95       	ror	r22
    1f94:	b7 95       	ror	r27
    1f96:	f1 11       	cpse	r31, r1
    1f98:	f8 cf       	rjmp	.-16     	; 0x1f8a <__floatsisf+0x1c>
    1f9a:	fa f4       	brpl	.+62     	; 0x1fda <__floatsisf+0x6c>
    1f9c:	bb 0f       	add	r27, r27
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <__floatsisf+0x36>
    1fa0:	60 ff       	sbrs	r22, 0
    1fa2:	1b c0       	rjmp	.+54     	; 0x1fda <__floatsisf+0x6c>
    1fa4:	6f 5f       	subi	r22, 0xFF	; 255
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1faa:	9f 4f       	sbci	r25, 0xFF	; 255
    1fac:	16 c0       	rjmp	.+44     	; 0x1fda <__floatsisf+0x6c>
    1fae:	88 23       	and	r24, r24
    1fb0:	11 f0       	breq	.+4      	; 0x1fb6 <__floatsisf+0x48>
    1fb2:	96 e9       	ldi	r25, 0x96	; 150
    1fb4:	11 c0       	rjmp	.+34     	; 0x1fd8 <__floatsisf+0x6a>
    1fb6:	77 23       	and	r23, r23
    1fb8:	21 f0       	breq	.+8      	; 0x1fc2 <__floatsisf+0x54>
    1fba:	9e e8       	ldi	r25, 0x8E	; 142
    1fbc:	87 2f       	mov	r24, r23
    1fbe:	76 2f       	mov	r23, r22
    1fc0:	05 c0       	rjmp	.+10     	; 0x1fcc <__floatsisf+0x5e>
    1fc2:	66 23       	and	r22, r22
    1fc4:	71 f0       	breq	.+28     	; 0x1fe2 <__floatsisf+0x74>
    1fc6:	96 e8       	ldi	r25, 0x86	; 134
    1fc8:	86 2f       	mov	r24, r22
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	60 e0       	ldi	r22, 0x00	; 0
    1fce:	2a f0       	brmi	.+10     	; 0x1fda <__floatsisf+0x6c>
    1fd0:	9a 95       	dec	r25
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	da f7       	brpl	.-10     	; 0x1fd0 <__floatsisf+0x62>
    1fda:	88 0f       	add	r24, r24
    1fdc:	96 95       	lsr	r25
    1fde:	87 95       	ror	r24
    1fe0:	97 f9       	bld	r25, 7
    1fe2:	08 95       	ret

00001fe4 <__floatundisf>:
    1fe4:	e8 94       	clt

00001fe6 <__fp_di2sf>:
    1fe6:	f9 2f       	mov	r31, r25
    1fe8:	96 eb       	ldi	r25, 0xB6	; 182
    1fea:	ff 23       	and	r31, r31
    1fec:	81 f0       	breq	.+32     	; 0x200e <__fp_di2sf+0x28>
    1fee:	12 16       	cp	r1, r18
    1ff0:	13 06       	cpc	r1, r19
    1ff2:	14 06       	cpc	r1, r20
    1ff4:	44 0b       	sbc	r20, r20
    1ff6:	93 95       	inc	r25
    1ff8:	f6 95       	lsr	r31
    1ffa:	87 95       	ror	r24
    1ffc:	77 95       	ror	r23
    1ffe:	67 95       	ror	r22
    2000:	57 95       	ror	r21
    2002:	40 40       	sbci	r20, 0x00	; 0
    2004:	ff 23       	and	r31, r31
    2006:	b9 f7       	brne	.-18     	; 0x1ff6 <__fp_di2sf+0x10>
    2008:	1b c0       	rjmp	.+54     	; 0x2040 <__fp_di2sf+0x5a>
    200a:	99 27       	eor	r25, r25
    200c:	08 95       	ret
    200e:	88 23       	and	r24, r24
    2010:	51 f4       	brne	.+20     	; 0x2026 <__fp_di2sf+0x40>
    2012:	98 50       	subi	r25, 0x08	; 8
    2014:	d2 f7       	brpl	.-12     	; 0x200a <__fp_di2sf+0x24>
    2016:	87 2b       	or	r24, r23
    2018:	76 2f       	mov	r23, r22
    201a:	65 2f       	mov	r22, r21
    201c:	54 2f       	mov	r21, r20
    201e:	43 2f       	mov	r20, r19
    2020:	32 2f       	mov	r19, r18
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	b1 f3       	breq	.-20     	; 0x2012 <__fp_di2sf+0x2c>
    2026:	12 16       	cp	r1, r18
    2028:	13 06       	cpc	r1, r19
    202a:	14 06       	cpc	r1, r20
    202c:	44 0b       	sbc	r20, r20
    202e:	88 23       	and	r24, r24
    2030:	3a f0       	brmi	.+14     	; 0x2040 <__fp_di2sf+0x5a>
    2032:	9a 95       	dec	r25
    2034:	44 0f       	add	r20, r20
    2036:	55 1f       	adc	r21, r21
    2038:	66 1f       	adc	r22, r22
    203a:	77 1f       	adc	r23, r23
    203c:	88 1f       	adc	r24, r24
    203e:	ca f7       	brpl	.-14     	; 0x2032 <__fp_di2sf+0x4c>
    2040:	55 23       	and	r21, r21
    2042:	4a f4       	brpl	.+18     	; 0x2056 <__fp_di2sf+0x70>
    2044:	44 0f       	add	r20, r20
    2046:	55 1f       	adc	r21, r21
    2048:	11 f4       	brne	.+4      	; 0x204e <__fp_di2sf+0x68>
    204a:	60 ff       	sbrs	r22, 0
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <__fp_di2sf+0x70>
    204e:	6f 5f       	subi	r22, 0xFF	; 255
    2050:	7f 4f       	sbci	r23, 0xFF	; 255
    2052:	8f 4f       	sbci	r24, 0xFF	; 255
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	88 0f       	add	r24, r24
    2058:	96 95       	lsr	r25
    205a:	87 95       	ror	r24
    205c:	97 f9       	bld	r25, 7
    205e:	08 95       	ret

00002060 <__fp_cmp>:
    2060:	99 0f       	add	r25, r25
    2062:	00 08       	sbc	r0, r0
    2064:	55 0f       	add	r21, r21
    2066:	aa 0b       	sbc	r26, r26
    2068:	e0 e8       	ldi	r30, 0x80	; 128
    206a:	fe ef       	ldi	r31, 0xFE	; 254
    206c:	16 16       	cp	r1, r22
    206e:	17 06       	cpc	r1, r23
    2070:	e8 07       	cpc	r30, r24
    2072:	f9 07       	cpc	r31, r25
    2074:	c0 f0       	brcs	.+48     	; 0x20a6 <__fp_cmp+0x46>
    2076:	12 16       	cp	r1, r18
    2078:	13 06       	cpc	r1, r19
    207a:	e4 07       	cpc	r30, r20
    207c:	f5 07       	cpc	r31, r21
    207e:	98 f0       	brcs	.+38     	; 0x20a6 <__fp_cmp+0x46>
    2080:	62 1b       	sub	r22, r18
    2082:	73 0b       	sbc	r23, r19
    2084:	84 0b       	sbc	r24, r20
    2086:	95 0b       	sbc	r25, r21
    2088:	39 f4       	brne	.+14     	; 0x2098 <__fp_cmp+0x38>
    208a:	0a 26       	eor	r0, r26
    208c:	61 f0       	breq	.+24     	; 0x20a6 <__fp_cmp+0x46>
    208e:	23 2b       	or	r18, r19
    2090:	24 2b       	or	r18, r20
    2092:	25 2b       	or	r18, r21
    2094:	21 f4       	brne	.+8      	; 0x209e <__fp_cmp+0x3e>
    2096:	08 95       	ret
    2098:	0a 26       	eor	r0, r26
    209a:	09 f4       	brne	.+2      	; 0x209e <__fp_cmp+0x3e>
    209c:	a1 40       	sbci	r26, 0x01	; 1
    209e:	a6 95       	lsr	r26
    20a0:	8f ef       	ldi	r24, 0xFF	; 255
    20a2:	81 1d       	adc	r24, r1
    20a4:	81 1d       	adc	r24, r1
    20a6:	08 95       	ret

000020a8 <__fp_inf>:
    20a8:	97 f9       	bld	r25, 7
    20aa:	9f 67       	ori	r25, 0x7F	; 127
    20ac:	80 e8       	ldi	r24, 0x80	; 128
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	08 95       	ret

000020b4 <__fp_nan>:
    20b4:	9f ef       	ldi	r25, 0xFF	; 255
    20b6:	80 ec       	ldi	r24, 0xC0	; 192
    20b8:	08 95       	ret

000020ba <__fp_negdi>:
    20ba:	90 95       	com	r25
    20bc:	80 95       	com	r24
    20be:	70 95       	com	r23
    20c0:	60 95       	com	r22
    20c2:	50 95       	com	r21
    20c4:	40 95       	com	r20
    20c6:	30 95       	com	r19
    20c8:	21 95       	neg	r18
    20ca:	3f 4f       	sbci	r19, 0xFF	; 255
    20cc:	4f 4f       	sbci	r20, 0xFF	; 255
    20ce:	5f 4f       	sbci	r21, 0xFF	; 255
    20d0:	6f 4f       	sbci	r22, 0xFF	; 255
    20d2:	7f 4f       	sbci	r23, 0xFF	; 255
    20d4:	8f 4f       	sbci	r24, 0xFF	; 255
    20d6:	9f 4f       	sbci	r25, 0xFF	; 255
    20d8:	08 95       	ret

000020da <__fp_pscA>:
    20da:	00 24       	eor	r0, r0
    20dc:	0a 94       	dec	r0
    20de:	16 16       	cp	r1, r22
    20e0:	17 06       	cpc	r1, r23
    20e2:	18 06       	cpc	r1, r24
    20e4:	09 06       	cpc	r0, r25
    20e6:	08 95       	ret

000020e8 <__fp_pscB>:
    20e8:	00 24       	eor	r0, r0
    20ea:	0a 94       	dec	r0
    20ec:	12 16       	cp	r1, r18
    20ee:	13 06       	cpc	r1, r19
    20f0:	14 06       	cpc	r1, r20
    20f2:	05 06       	cpc	r0, r21
    20f4:	08 95       	ret

000020f6 <__fp_round>:
    20f6:	09 2e       	mov	r0, r25
    20f8:	03 94       	inc	r0
    20fa:	00 0c       	add	r0, r0
    20fc:	11 f4       	brne	.+4      	; 0x2102 <__fp_round+0xc>
    20fe:	88 23       	and	r24, r24
    2100:	52 f0       	brmi	.+20     	; 0x2116 <__fp_round+0x20>
    2102:	bb 0f       	add	r27, r27
    2104:	40 f4       	brcc	.+16     	; 0x2116 <__fp_round+0x20>
    2106:	bf 2b       	or	r27, r31
    2108:	11 f4       	brne	.+4      	; 0x210e <__fp_round+0x18>
    210a:	60 ff       	sbrs	r22, 0
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <__fp_round+0x20>
    210e:	6f 5f       	subi	r22, 0xFF	; 255
    2110:	7f 4f       	sbci	r23, 0xFF	; 255
    2112:	8f 4f       	sbci	r24, 0xFF	; 255
    2114:	9f 4f       	sbci	r25, 0xFF	; 255
    2116:	08 95       	ret

00002118 <__fp_split3>:
    2118:	57 fd       	sbrc	r21, 7
    211a:	90 58       	subi	r25, 0x80	; 128
    211c:	44 0f       	add	r20, r20
    211e:	55 1f       	adc	r21, r21
    2120:	59 f0       	breq	.+22     	; 0x2138 <__fp_splitA+0x10>
    2122:	5f 3f       	cpi	r21, 0xFF	; 255
    2124:	71 f0       	breq	.+28     	; 0x2142 <__fp_splitA+0x1a>
    2126:	47 95       	ror	r20

00002128 <__fp_splitA>:
    2128:	88 0f       	add	r24, r24
    212a:	97 fb       	bst	r25, 7
    212c:	99 1f       	adc	r25, r25
    212e:	61 f0       	breq	.+24     	; 0x2148 <__fp_splitA+0x20>
    2130:	9f 3f       	cpi	r25, 0xFF	; 255
    2132:	79 f0       	breq	.+30     	; 0x2152 <__fp_splitA+0x2a>
    2134:	87 95       	ror	r24
    2136:	08 95       	ret
    2138:	12 16       	cp	r1, r18
    213a:	13 06       	cpc	r1, r19
    213c:	14 06       	cpc	r1, r20
    213e:	55 1f       	adc	r21, r21
    2140:	f2 cf       	rjmp	.-28     	; 0x2126 <__fp_split3+0xe>
    2142:	46 95       	lsr	r20
    2144:	f1 df       	rcall	.-30     	; 0x2128 <__fp_splitA>
    2146:	08 c0       	rjmp	.+16     	; 0x2158 <__fp_splitA+0x30>
    2148:	16 16       	cp	r1, r22
    214a:	17 06       	cpc	r1, r23
    214c:	18 06       	cpc	r1, r24
    214e:	99 1f       	adc	r25, r25
    2150:	f1 cf       	rjmp	.-30     	; 0x2134 <__fp_splitA+0xc>
    2152:	86 95       	lsr	r24
    2154:	71 05       	cpc	r23, r1
    2156:	61 05       	cpc	r22, r1
    2158:	08 94       	sec
    215a:	08 95       	ret

0000215c <__fp_zero>:
    215c:	e8 94       	clt

0000215e <__fp_szero>:
    215e:	bb 27       	eor	r27, r27
    2160:	66 27       	eor	r22, r22
    2162:	77 27       	eor	r23, r23
    2164:	cb 01       	movw	r24, r22
    2166:	97 f9       	bld	r25, 7
    2168:	08 95       	ret

0000216a <__gesf2>:
    216a:	7a df       	rcall	.-268    	; 0x2060 <__fp_cmp>
    216c:	08 f4       	brcc	.+2      	; 0x2170 <__gesf2+0x6>
    216e:	8f ef       	ldi	r24, 0xFF	; 255
    2170:	08 95       	ret
    2172:	0e f0       	brts	.+2      	; 0x2176 <__gesf2+0xc>
    2174:	a6 c0       	rjmp	.+332    	; 0x22c2 <__fp_mpack>
    2176:	9e cf       	rjmp	.-196    	; 0x20b4 <__fp_nan>
    2178:	68 94       	set
    217a:	96 cf       	rjmp	.-212    	; 0x20a8 <__fp_inf>

0000217c <log>:
    217c:	d5 df       	rcall	.-86     	; 0x2128 <__fp_splitA>
    217e:	c8 f3       	brcs	.-14     	; 0x2172 <__gesf2+0x8>
    2180:	99 23       	and	r25, r25
    2182:	d1 f3       	breq	.-12     	; 0x2178 <__gesf2+0xe>
    2184:	c6 f3       	brts	.-16     	; 0x2176 <__gesf2+0xc>
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	1f 93       	push	r17
    218c:	0f 93       	push	r16
    218e:	ff 92       	push	r15
    2190:	c9 2f       	mov	r28, r25
    2192:	dd 27       	eor	r29, r29
    2194:	88 23       	and	r24, r24
    2196:	2a f0       	brmi	.+10     	; 0x21a2 <log+0x26>
    2198:	21 97       	sbiw	r28, 0x01	; 1
    219a:	66 0f       	add	r22, r22
    219c:	77 1f       	adc	r23, r23
    219e:	88 1f       	adc	r24, r24
    21a0:	da f7       	brpl	.-10     	; 0x2198 <log+0x1c>
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e8       	ldi	r20, 0x80	; 128
    21a8:	5f eb       	ldi	r21, 0xBF	; 191
    21aa:	9f e3       	ldi	r25, 0x3F	; 63
    21ac:	88 39       	cpi	r24, 0x98	; 152
    21ae:	20 f0       	brcs	.+8      	; 0x21b8 <log+0x3c>
    21b0:	80 3e       	cpi	r24, 0xE0	; 224
    21b2:	30 f0       	brcs	.+12     	; 0x21c0 <log+0x44>
    21b4:	21 96       	adiw	r28, 0x01	; 1
    21b6:	8f 77       	andi	r24, 0x7F	; 127
    21b8:	a2 dd       	rcall	.-1212   	; 0x1cfe <__addsf3>
    21ba:	ec ef       	ldi	r30, 0xFC	; 252
    21bc:	f1 e0       	ldi	r31, 0x01	; 1
    21be:	03 c0       	rjmp	.+6      	; 0x21c6 <log+0x4a>
    21c0:	9e dd       	rcall	.-1220   	; 0x1cfe <__addsf3>
    21c2:	e9 e2       	ldi	r30, 0x29	; 41
    21c4:	f2 e0       	ldi	r31, 0x02	; 2
    21c6:	8b d0       	rcall	.+278    	; 0x22de <__fp_powser>
    21c8:	8b 01       	movw	r16, r22
    21ca:	be 01       	movw	r22, r28
    21cc:	ec 01       	movw	r28, r24
    21ce:	fb 2e       	mov	r15, r27
    21d0:	6f 57       	subi	r22, 0x7F	; 127
    21d2:	71 09       	sbc	r23, r1
    21d4:	75 95       	asr	r23
    21d6:	77 1f       	adc	r23, r23
    21d8:	88 0b       	sbc	r24, r24
    21da:	99 0b       	sbc	r25, r25
    21dc:	c8 de       	rcall	.-624    	; 0x1f6e <__floatsisf>
    21de:	28 e1       	ldi	r18, 0x18	; 24
    21e0:	32 e7       	ldi	r19, 0x72	; 114
    21e2:	41 e3       	ldi	r20, 0x31	; 49
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	16 d0       	rcall	.+44     	; 0x2214 <__mulsf3x>
    21e8:	af 2d       	mov	r26, r15
    21ea:	98 01       	movw	r18, r16
    21ec:	ae 01       	movw	r20, r28
    21ee:	ff 90       	pop	r15
    21f0:	0f 91       	pop	r16
    21f2:	1f 91       	pop	r17
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	93 dd       	rcall	.-1242   	; 0x1d20 <__addsf3x>
    21fa:	7d cf       	rjmp	.-262    	; 0x20f6 <__fp_round>

000021fc <__mulsf3>:
    21fc:	0b d0       	rcall	.+22     	; 0x2214 <__mulsf3x>
    21fe:	7b cf       	rjmp	.-266    	; 0x20f6 <__fp_round>
    2200:	6c df       	rcall	.-296    	; 0x20da <__fp_pscA>
    2202:	28 f0       	brcs	.+10     	; 0x220e <__mulsf3+0x12>
    2204:	71 df       	rcall	.-286    	; 0x20e8 <__fp_pscB>
    2206:	18 f0       	brcs	.+6      	; 0x220e <__mulsf3+0x12>
    2208:	95 23       	and	r25, r21
    220a:	09 f0       	breq	.+2      	; 0x220e <__mulsf3+0x12>
    220c:	4d cf       	rjmp	.-358    	; 0x20a8 <__fp_inf>
    220e:	52 cf       	rjmp	.-348    	; 0x20b4 <__fp_nan>
    2210:	11 24       	eor	r1, r1
    2212:	a5 cf       	rjmp	.-182    	; 0x215e <__fp_szero>

00002214 <__mulsf3x>:
    2214:	81 df       	rcall	.-254    	; 0x2118 <__fp_split3>
    2216:	a0 f3       	brcs	.-24     	; 0x2200 <__mulsf3+0x4>

00002218 <__mulsf3_pse>:
    2218:	95 9f       	mul	r25, r21
    221a:	d1 f3       	breq	.-12     	; 0x2210 <__mulsf3+0x14>
    221c:	95 0f       	add	r25, r21
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	55 1f       	adc	r21, r21
    2222:	62 9f       	mul	r22, r18
    2224:	f0 01       	movw	r30, r0
    2226:	72 9f       	mul	r23, r18
    2228:	bb 27       	eor	r27, r27
    222a:	f0 0d       	add	r31, r0
    222c:	b1 1d       	adc	r27, r1
    222e:	63 9f       	mul	r22, r19
    2230:	aa 27       	eor	r26, r26
    2232:	f0 0d       	add	r31, r0
    2234:	b1 1d       	adc	r27, r1
    2236:	aa 1f       	adc	r26, r26
    2238:	64 9f       	mul	r22, r20
    223a:	66 27       	eor	r22, r22
    223c:	b0 0d       	add	r27, r0
    223e:	a1 1d       	adc	r26, r1
    2240:	66 1f       	adc	r22, r22
    2242:	82 9f       	mul	r24, r18
    2244:	22 27       	eor	r18, r18
    2246:	b0 0d       	add	r27, r0
    2248:	a1 1d       	adc	r26, r1
    224a:	62 1f       	adc	r22, r18
    224c:	73 9f       	mul	r23, r19
    224e:	b0 0d       	add	r27, r0
    2250:	a1 1d       	adc	r26, r1
    2252:	62 1f       	adc	r22, r18
    2254:	83 9f       	mul	r24, r19
    2256:	a0 0d       	add	r26, r0
    2258:	61 1d       	adc	r22, r1
    225a:	22 1f       	adc	r18, r18
    225c:	74 9f       	mul	r23, r20
    225e:	33 27       	eor	r19, r19
    2260:	a0 0d       	add	r26, r0
    2262:	61 1d       	adc	r22, r1
    2264:	23 1f       	adc	r18, r19
    2266:	84 9f       	mul	r24, r20
    2268:	60 0d       	add	r22, r0
    226a:	21 1d       	adc	r18, r1
    226c:	82 2f       	mov	r24, r18
    226e:	76 2f       	mov	r23, r22
    2270:	6a 2f       	mov	r22, r26
    2272:	11 24       	eor	r1, r1
    2274:	9f 57       	subi	r25, 0x7F	; 127
    2276:	50 40       	sbci	r21, 0x00	; 0
    2278:	8a f0       	brmi	.+34     	; 0x229c <__mulsf3_pse+0x84>
    227a:	e1 f0       	breq	.+56     	; 0x22b4 <__mulsf3_pse+0x9c>
    227c:	88 23       	and	r24, r24
    227e:	4a f0       	brmi	.+18     	; 0x2292 <__mulsf3_pse+0x7a>
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	bb 1f       	adc	r27, r27
    2286:	66 1f       	adc	r22, r22
    2288:	77 1f       	adc	r23, r23
    228a:	88 1f       	adc	r24, r24
    228c:	91 50       	subi	r25, 0x01	; 1
    228e:	50 40       	sbci	r21, 0x00	; 0
    2290:	a9 f7       	brne	.-22     	; 0x227c <__mulsf3_pse+0x64>
    2292:	9e 3f       	cpi	r25, 0xFE	; 254
    2294:	51 05       	cpc	r21, r1
    2296:	70 f0       	brcs	.+28     	; 0x22b4 <__mulsf3_pse+0x9c>
    2298:	07 cf       	rjmp	.-498    	; 0x20a8 <__fp_inf>
    229a:	61 cf       	rjmp	.-318    	; 0x215e <__fp_szero>
    229c:	5f 3f       	cpi	r21, 0xFF	; 255
    229e:	ec f3       	brlt	.-6      	; 0x229a <__mulsf3_pse+0x82>
    22a0:	98 3e       	cpi	r25, 0xE8	; 232
    22a2:	dc f3       	brlt	.-10     	; 0x229a <__mulsf3_pse+0x82>
    22a4:	86 95       	lsr	r24
    22a6:	77 95       	ror	r23
    22a8:	67 95       	ror	r22
    22aa:	b7 95       	ror	r27
    22ac:	f7 95       	ror	r31
    22ae:	e7 95       	ror	r30
    22b0:	9f 5f       	subi	r25, 0xFF	; 255
    22b2:	c1 f7       	brne	.-16     	; 0x22a4 <__mulsf3_pse+0x8c>
    22b4:	fe 2b       	or	r31, r30
    22b6:	88 0f       	add	r24, r24
    22b8:	91 1d       	adc	r25, r1
    22ba:	96 95       	lsr	r25
    22bc:	87 95       	ror	r24
    22be:	97 f9       	bld	r25, 7
    22c0:	08 95       	ret

000022c2 <__fp_mpack>:
    22c2:	9f 3f       	cpi	r25, 0xFF	; 255
    22c4:	31 f0       	breq	.+12     	; 0x22d2 <__fp_mpack_finite+0xc>

000022c6 <__fp_mpack_finite>:
    22c6:	91 50       	subi	r25, 0x01	; 1
    22c8:	20 f4       	brcc	.+8      	; 0x22d2 <__fp_mpack_finite+0xc>
    22ca:	87 95       	ror	r24
    22cc:	77 95       	ror	r23
    22ce:	67 95       	ror	r22
    22d0:	b7 95       	ror	r27
    22d2:	88 0f       	add	r24, r24
    22d4:	91 1d       	adc	r25, r1
    22d6:	96 95       	lsr	r25
    22d8:	87 95       	ror	r24
    22da:	97 f9       	bld	r25, 7
    22dc:	08 95       	ret

000022de <__fp_powser>:
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	1f 93       	push	r17
    22e4:	0f 93       	push	r16
    22e6:	ff 92       	push	r15
    22e8:	ef 92       	push	r14
    22ea:	df 92       	push	r13
    22ec:	7b 01       	movw	r14, r22
    22ee:	8c 01       	movw	r16, r24
    22f0:	68 94       	set
    22f2:	05 c0       	rjmp	.+10     	; 0x22fe <__fp_powser+0x20>
    22f4:	da 2e       	mov	r13, r26
    22f6:	ef 01       	movw	r28, r30
    22f8:	8d df       	rcall	.-230    	; 0x2214 <__mulsf3x>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e8 94       	clt
    22fe:	a5 91       	lpm	r26, Z+
    2300:	25 91       	lpm	r18, Z+
    2302:	35 91       	lpm	r19, Z+
    2304:	45 91       	lpm	r20, Z+
    2306:	55 91       	lpm	r21, Z+
    2308:	ae f3       	brts	.-22     	; 0x22f4 <__fp_powser+0x16>
    230a:	ef 01       	movw	r28, r30
    230c:	09 dd       	rcall	.-1518   	; 0x1d20 <__addsf3x>
    230e:	fe 01       	movw	r30, r28
    2310:	97 01       	movw	r18, r14
    2312:	a8 01       	movw	r20, r16
    2314:	da 94       	dec	r13
    2316:	79 f7       	brne	.-34     	; 0x22f6 <__fp_powser+0x18>
    2318:	df 90       	pop	r13
    231a:	ef 90       	pop	r14
    231c:	ff 90       	pop	r15
    231e:	0f 91       	pop	r16
    2320:	1f 91       	pop	r17
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <__udivmodsi4>:
    2328:	a1 e2       	ldi	r26, 0x21	; 33
    232a:	1a 2e       	mov	r1, r26
    232c:	aa 1b       	sub	r26, r26
    232e:	bb 1b       	sub	r27, r27
    2330:	fd 01       	movw	r30, r26
    2332:	0d c0       	rjmp	.+26     	; 0x234e <__udivmodsi4_ep>

00002334 <__udivmodsi4_loop>:
    2334:	aa 1f       	adc	r26, r26
    2336:	bb 1f       	adc	r27, r27
    2338:	ee 1f       	adc	r30, r30
    233a:	ff 1f       	adc	r31, r31
    233c:	a2 17       	cp	r26, r18
    233e:	b3 07       	cpc	r27, r19
    2340:	e4 07       	cpc	r30, r20
    2342:	f5 07       	cpc	r31, r21
    2344:	20 f0       	brcs	.+8      	; 0x234e <__udivmodsi4_ep>
    2346:	a2 1b       	sub	r26, r18
    2348:	b3 0b       	sbc	r27, r19
    234a:	e4 0b       	sbc	r30, r20
    234c:	f5 0b       	sbc	r31, r21

0000234e <__udivmodsi4_ep>:
    234e:	66 1f       	adc	r22, r22
    2350:	77 1f       	adc	r23, r23
    2352:	88 1f       	adc	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	1a 94       	dec	r1
    2358:	69 f7       	brne	.-38     	; 0x2334 <__udivmodsi4_loop>
    235a:	60 95       	com	r22
    235c:	70 95       	com	r23
    235e:	80 95       	com	r24
    2360:	90 95       	com	r25
    2362:	9b 01       	movw	r18, r22
    2364:	ac 01       	movw	r20, r24
    2366:	bd 01       	movw	r22, r26
    2368:	cf 01       	movw	r24, r30
    236a:	08 95       	ret

0000236c <__muldi3>:
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	1f 93       	push	r17
    2372:	0f 93       	push	r16
    2374:	9a 9d       	mul	r25, r10
    2376:	f0 2d       	mov	r31, r0
    2378:	21 9f       	mul	r18, r17
    237a:	f0 0d       	add	r31, r0
    237c:	8b 9d       	mul	r24, r11
    237e:	f0 0d       	add	r31, r0
    2380:	8a 9d       	mul	r24, r10
    2382:	e0 2d       	mov	r30, r0
    2384:	f1 0d       	add	r31, r1
    2386:	03 9f       	mul	r16, r19
    2388:	f0 0d       	add	r31, r0
    238a:	02 9f       	mul	r16, r18
    238c:	e0 0d       	add	r30, r0
    238e:	f1 1d       	adc	r31, r1
    2390:	4e 9d       	mul	r20, r14
    2392:	e0 0d       	add	r30, r0
    2394:	f1 1d       	adc	r31, r1
    2396:	5e 9d       	mul	r21, r14
    2398:	f0 0d       	add	r31, r0
    239a:	4f 9d       	mul	r20, r15
    239c:	f0 0d       	add	r31, r0
    239e:	7f 93       	push	r23
    23a0:	6f 93       	push	r22
    23a2:	bf 92       	push	r11
    23a4:	af 92       	push	r10
    23a6:	5f 93       	push	r21
    23a8:	4f 93       	push	r20
    23aa:	d5 01       	movw	r26, r10
    23ac:	e3 d0       	rcall	.+454    	; 0x2574 <__umulhisi3>
    23ae:	8b 01       	movw	r16, r22
    23b0:	ac 01       	movw	r20, r24
    23b2:	d7 01       	movw	r26, r14
    23b4:	df d0       	rcall	.+446    	; 0x2574 <__umulhisi3>
    23b6:	eb 01       	movw	r28, r22
    23b8:	e8 0f       	add	r30, r24
    23ba:	f9 1f       	adc	r31, r25
    23bc:	d6 01       	movw	r26, r12
    23be:	1f d0       	rcall	.+62     	; 0x23fe <__muldi3_6>
    23c0:	2f 91       	pop	r18
    23c2:	3f 91       	pop	r19
    23c4:	d6 01       	movw	r26, r12
    23c6:	d6 d0       	rcall	.+428    	; 0x2574 <__umulhisi3>
    23c8:	c6 0f       	add	r28, r22
    23ca:	d7 1f       	adc	r29, r23
    23cc:	e8 1f       	adc	r30, r24
    23ce:	f9 1f       	adc	r31, r25
    23d0:	af 91       	pop	r26
    23d2:	bf 91       	pop	r27
    23d4:	14 d0       	rcall	.+40     	; 0x23fe <__muldi3_6>
    23d6:	2f 91       	pop	r18
    23d8:	3f 91       	pop	r19
    23da:	cc d0       	rcall	.+408    	; 0x2574 <__umulhisi3>
    23dc:	c6 0f       	add	r28, r22
    23de:	d7 1f       	adc	r29, r23
    23e0:	e8 1f       	adc	r30, r24
    23e2:	f9 1f       	adc	r31, r25
    23e4:	d6 01       	movw	r26, r12
    23e6:	c6 d0       	rcall	.+396    	; 0x2574 <__umulhisi3>
    23e8:	e6 0f       	add	r30, r22
    23ea:	f7 1f       	adc	r31, r23
    23ec:	98 01       	movw	r18, r16
    23ee:	be 01       	movw	r22, r28
    23f0:	cf 01       	movw	r24, r30
    23f2:	11 24       	eor	r1, r1
    23f4:	0f 91       	pop	r16
    23f6:	1f 91       	pop	r17
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <__muldi3_6>:
    23fe:	ba d0       	rcall	.+372    	; 0x2574 <__umulhisi3>
    2400:	46 0f       	add	r20, r22
    2402:	57 1f       	adc	r21, r23
    2404:	c8 1f       	adc	r28, r24
    2406:	d9 1f       	adc	r29, r25
    2408:	08 f4       	brcc	.+2      	; 0x240c <__muldi3_6+0xe>
    240a:	31 96       	adiw	r30, 0x01	; 1
    240c:	08 95       	ret

0000240e <__umoddi3>:
    240e:	68 94       	set
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <__udivdi3_umoddi3>

00002412 <__udivdi3>:
    2412:	e8 94       	clt

00002414 <__udivdi3_umoddi3>:
    2414:	8f 92       	push	r8
    2416:	9f 92       	push	r9
    2418:	cf 93       	push	r28
    241a:	df 93       	push	r29
    241c:	05 d0       	rcall	.+10     	; 0x2428 <__udivmod64>
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	08 95       	ret

00002428 <__udivmod64>:
    2428:	88 24       	eor	r8, r8
    242a:	99 24       	eor	r9, r9
    242c:	f4 01       	movw	r30, r8
    242e:	e4 01       	movw	r28, r8
    2430:	b0 e4       	ldi	r27, 0x40	; 64
    2432:	9f 93       	push	r25
    2434:	aa 27       	eor	r26, r26
    2436:	9a 15       	cp	r25, r10
    2438:	8b 04       	cpc	r8, r11
    243a:	9c 04       	cpc	r9, r12
    243c:	ed 05       	cpc	r30, r13
    243e:	fe 05       	cpc	r31, r14
    2440:	cf 05       	cpc	r28, r15
    2442:	d0 07       	cpc	r29, r16
    2444:	a1 07       	cpc	r26, r17
    2446:	98 f4       	brcc	.+38     	; 0x246e <__udivmod64+0x46>
    2448:	ad 2f       	mov	r26, r29
    244a:	dc 2f       	mov	r29, r28
    244c:	cf 2f       	mov	r28, r31
    244e:	fe 2f       	mov	r31, r30
    2450:	e9 2d       	mov	r30, r9
    2452:	98 2c       	mov	r9, r8
    2454:	89 2e       	mov	r8, r25
    2456:	98 2f       	mov	r25, r24
    2458:	87 2f       	mov	r24, r23
    245a:	76 2f       	mov	r23, r22
    245c:	65 2f       	mov	r22, r21
    245e:	54 2f       	mov	r21, r20
    2460:	43 2f       	mov	r20, r19
    2462:	32 2f       	mov	r19, r18
    2464:	22 27       	eor	r18, r18
    2466:	b8 50       	subi	r27, 0x08	; 8
    2468:	31 f7       	brne	.-52     	; 0x2436 <__udivmod64+0xe>
    246a:	bf 91       	pop	r27
    246c:	27 c0       	rjmp	.+78     	; 0x24bc <__udivmod64+0x94>
    246e:	1b 2e       	mov	r1, r27
    2470:	bf 91       	pop	r27
    2472:	bb 27       	eor	r27, r27
    2474:	22 0f       	add	r18, r18
    2476:	33 1f       	adc	r19, r19
    2478:	44 1f       	adc	r20, r20
    247a:	55 1f       	adc	r21, r21
    247c:	66 1f       	adc	r22, r22
    247e:	77 1f       	adc	r23, r23
    2480:	88 1f       	adc	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	88 1c       	adc	r8, r8
    2486:	99 1c       	adc	r9, r9
    2488:	ee 1f       	adc	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	cc 1f       	adc	r28, r28
    248e:	dd 1f       	adc	r29, r29
    2490:	aa 1f       	adc	r26, r26
    2492:	bb 1f       	adc	r27, r27
    2494:	8a 14       	cp	r8, r10
    2496:	9b 04       	cpc	r9, r11
    2498:	ec 05       	cpc	r30, r12
    249a:	fd 05       	cpc	r31, r13
    249c:	ce 05       	cpc	r28, r14
    249e:	df 05       	cpc	r29, r15
    24a0:	a0 07       	cpc	r26, r16
    24a2:	b1 07       	cpc	r27, r17
    24a4:	48 f0       	brcs	.+18     	; 0x24b8 <__udivmod64+0x90>
    24a6:	8a 18       	sub	r8, r10
    24a8:	9b 08       	sbc	r9, r11
    24aa:	ec 09       	sbc	r30, r12
    24ac:	fd 09       	sbc	r31, r13
    24ae:	ce 09       	sbc	r28, r14
    24b0:	df 09       	sbc	r29, r15
    24b2:	a0 0b       	sbc	r26, r16
    24b4:	b1 0b       	sbc	r27, r17
    24b6:	21 60       	ori	r18, 0x01	; 1
    24b8:	1a 94       	dec	r1
    24ba:	e1 f6       	brne	.-72     	; 0x2474 <__udivmod64+0x4c>
    24bc:	2e f4       	brtc	.+10     	; 0x24c8 <__udivmod64+0xa0>
    24be:	94 01       	movw	r18, r8
    24c0:	af 01       	movw	r20, r30
    24c2:	be 01       	movw	r22, r28
    24c4:	cd 01       	movw	r24, r26
    24c6:	00 0c       	add	r0, r0
    24c8:	08 95       	ret

000024ca <__ashldi3>:
    24ca:	0f 93       	push	r16
    24cc:	08 30       	cpi	r16, 0x08	; 8
    24ce:	90 f0       	brcs	.+36     	; 0x24f4 <__ashldi3+0x2a>
    24d0:	98 2f       	mov	r25, r24
    24d2:	87 2f       	mov	r24, r23
    24d4:	76 2f       	mov	r23, r22
    24d6:	65 2f       	mov	r22, r21
    24d8:	54 2f       	mov	r21, r20
    24da:	43 2f       	mov	r20, r19
    24dc:	32 2f       	mov	r19, r18
    24de:	22 27       	eor	r18, r18
    24e0:	08 50       	subi	r16, 0x08	; 8
    24e2:	f4 cf       	rjmp	.-24     	; 0x24cc <__ashldi3+0x2>
    24e4:	22 0f       	add	r18, r18
    24e6:	33 1f       	adc	r19, r19
    24e8:	44 1f       	adc	r20, r20
    24ea:	55 1f       	adc	r21, r21
    24ec:	66 1f       	adc	r22, r22
    24ee:	77 1f       	adc	r23, r23
    24f0:	88 1f       	adc	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 95       	dec	r16
    24f6:	b2 f7       	brpl	.-20     	; 0x24e4 <__ashldi3+0x1a>
    24f8:	0f 91       	pop	r16
    24fa:	08 95       	ret

000024fc <__ashrdi3>:
    24fc:	97 fb       	bst	r25, 7
    24fe:	10 f8       	bld	r1, 0

00002500 <__lshrdi3>:
    2500:	16 94       	lsr	r1
    2502:	00 08       	sbc	r0, r0
    2504:	0f 93       	push	r16
    2506:	08 30       	cpi	r16, 0x08	; 8
    2508:	98 f0       	brcs	.+38     	; 0x2530 <__lshrdi3+0x30>
    250a:	08 50       	subi	r16, 0x08	; 8
    250c:	23 2f       	mov	r18, r19
    250e:	34 2f       	mov	r19, r20
    2510:	45 2f       	mov	r20, r21
    2512:	56 2f       	mov	r21, r22
    2514:	67 2f       	mov	r22, r23
    2516:	78 2f       	mov	r23, r24
    2518:	89 2f       	mov	r24, r25
    251a:	90 2d       	mov	r25, r0
    251c:	f4 cf       	rjmp	.-24     	; 0x2506 <__lshrdi3+0x6>
    251e:	05 94       	asr	r0
    2520:	97 95       	ror	r25
    2522:	87 95       	ror	r24
    2524:	77 95       	ror	r23
    2526:	67 95       	ror	r22
    2528:	57 95       	ror	r21
    252a:	47 95       	ror	r20
    252c:	37 95       	ror	r19
    252e:	27 95       	ror	r18
    2530:	0a 95       	dec	r16
    2532:	aa f7       	brpl	.-22     	; 0x251e <__lshrdi3+0x1e>
    2534:	0f 91       	pop	r16
    2536:	08 95       	ret

00002538 <__adddi3>:
    2538:	2a 0d       	add	r18, r10
    253a:	3b 1d       	adc	r19, r11
    253c:	4c 1d       	adc	r20, r12
    253e:	5d 1d       	adc	r21, r13
    2540:	6e 1d       	adc	r22, r14
    2542:	7f 1d       	adc	r23, r15
    2544:	80 1f       	adc	r24, r16
    2546:	91 1f       	adc	r25, r17
    2548:	08 95       	ret

0000254a <__subdi3>:
    254a:	2a 19       	sub	r18, r10
    254c:	3b 09       	sbc	r19, r11
    254e:	4c 09       	sbc	r20, r12
    2550:	5d 09       	sbc	r21, r13
    2552:	6e 09       	sbc	r22, r14
    2554:	7f 09       	sbc	r23, r15
    2556:	80 0b       	sbc	r24, r16
    2558:	91 0b       	sbc	r25, r17
    255a:	08 95       	ret

0000255c <__cmpdi2_s8>:
    255c:	00 24       	eor	r0, r0
    255e:	a7 fd       	sbrc	r26, 7
    2560:	00 94       	com	r0
    2562:	2a 17       	cp	r18, r26
    2564:	30 05       	cpc	r19, r0
    2566:	40 05       	cpc	r20, r0
    2568:	50 05       	cpc	r21, r0
    256a:	60 05       	cpc	r22, r0
    256c:	70 05       	cpc	r23, r0
    256e:	80 05       	cpc	r24, r0
    2570:	90 05       	cpc	r25, r0
    2572:	08 95       	ret

00002574 <__umulhisi3>:
    2574:	a2 9f       	mul	r26, r18
    2576:	b0 01       	movw	r22, r0
    2578:	b3 9f       	mul	r27, r19
    257a:	c0 01       	movw	r24, r0
    257c:	a3 9f       	mul	r26, r19
    257e:	70 0d       	add	r23, r0
    2580:	81 1d       	adc	r24, r1
    2582:	11 24       	eor	r1, r1
    2584:	91 1d       	adc	r25, r1
    2586:	b2 9f       	mul	r27, r18
    2588:	70 0d       	add	r23, r0
    258a:	81 1d       	adc	r24, r1
    258c:	11 24       	eor	r1, r1
    258e:	91 1d       	adc	r25, r1
    2590:	08 95       	ret

00002592 <fdevopen>:
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	31 f4       	brne	.+12     	; 0x25aa <fdevopen+0x18>
    259e:	61 15       	cp	r22, r1
    25a0:	71 05       	cpc	r23, r1
    25a2:	19 f4       	brne	.+6      	; 0x25aa <fdevopen+0x18>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	39 c0       	rjmp	.+114    	; 0x261c <fdevopen+0x8a>
    25aa:	8b 01       	movw	r16, r22
    25ac:	ec 01       	movw	r28, r24
    25ae:	6e e0       	ldi	r22, 0x0E	; 14
    25b0:	70 e0       	ldi	r23, 0x00	; 0
    25b2:	81 e0       	ldi	r24, 0x01	; 1
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	41 d2       	rcall	.+1154   	; 0x2a3a <calloc>
    25b8:	fc 01       	movw	r30, r24
    25ba:	89 2b       	or	r24, r25
    25bc:	99 f3       	breq	.-26     	; 0x25a4 <fdevopen+0x12>
    25be:	80 e8       	ldi	r24, 0x80	; 128
    25c0:	83 83       	std	Z+3, r24	; 0x03
    25c2:	01 15       	cp	r16, r1
    25c4:	11 05       	cpc	r17, r1
    25c6:	71 f0       	breq	.+28     	; 0x25e4 <fdevopen+0x52>
    25c8:	02 87       	std	Z+10, r16	; 0x0a
    25ca:	13 87       	std	Z+11, r17	; 0x0b
    25cc:	81 e8       	ldi	r24, 0x81	; 129
    25ce:	83 83       	std	Z+3, r24	; 0x03
    25d0:	80 91 2c 20 	lds	r24, 0x202C	; 0x80202c <__iob>
    25d4:	90 91 2d 20 	lds	r25, 0x202D	; 0x80202d <__iob+0x1>
    25d8:	89 2b       	or	r24, r25
    25da:	21 f4       	brne	.+8      	; 0x25e4 <fdevopen+0x52>
    25dc:	e0 93 2c 20 	sts	0x202C, r30	; 0x80202c <__iob>
    25e0:	f0 93 2d 20 	sts	0x202D, r31	; 0x80202d <__iob+0x1>
    25e4:	20 97       	sbiw	r28, 0x00	; 0
    25e6:	c9 f0       	breq	.+50     	; 0x261a <fdevopen+0x88>
    25e8:	c0 87       	std	Z+8, r28	; 0x08
    25ea:	d1 87       	std	Z+9, r29	; 0x09
    25ec:	83 81       	ldd	r24, Z+3	; 0x03
    25ee:	82 60       	ori	r24, 0x02	; 2
    25f0:	83 83       	std	Z+3, r24	; 0x03
    25f2:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <__iob+0x2>
    25f6:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <__iob+0x3>
    25fa:	89 2b       	or	r24, r25
    25fc:	71 f4       	brne	.+28     	; 0x261a <fdevopen+0x88>
    25fe:	e0 93 2e 20 	sts	0x202E, r30	; 0x80202e <__iob+0x2>
    2602:	f0 93 2f 20 	sts	0x202F, r31	; 0x80202f <__iob+0x3>
    2606:	80 91 30 20 	lds	r24, 0x2030	; 0x802030 <__iob+0x4>
    260a:	90 91 31 20 	lds	r25, 0x2031	; 0x802031 <__iob+0x5>
    260e:	89 2b       	or	r24, r25
    2610:	21 f4       	brne	.+8      	; 0x261a <fdevopen+0x88>
    2612:	e0 93 30 20 	sts	0x2030, r30	; 0x802030 <__iob+0x4>
    2616:	f0 93 31 20 	sts	0x2031, r31	; 0x802031 <__iob+0x5>
    261a:	cf 01       	movw	r24, r30
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	08 95       	ret

00002626 <printf>:
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	ae 01       	movw	r20, r28
    2630:	4a 5f       	subi	r20, 0xFA	; 250
    2632:	5f 4f       	sbci	r21, 0xFF	; 255
    2634:	fa 01       	movw	r30, r20
    2636:	61 91       	ld	r22, Z+
    2638:	71 91       	ld	r23, Z+
    263a:	af 01       	movw	r20, r30
    263c:	80 91 2e 20 	lds	r24, 0x202E	; 0x80202e <__iob+0x2>
    2640:	90 91 2f 20 	lds	r25, 0x202F	; 0x80202f <__iob+0x3>
    2644:	03 d0       	rcall	.+6      	; 0x264c <vfprintf>
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	08 95       	ret

0000264c <vfprintf>:
    264c:	2f 92       	push	r2
    264e:	3f 92       	push	r3
    2650:	4f 92       	push	r4
    2652:	5f 92       	push	r5
    2654:	6f 92       	push	r6
    2656:	7f 92       	push	r7
    2658:	8f 92       	push	r8
    265a:	9f 92       	push	r9
    265c:	af 92       	push	r10
    265e:	bf 92       	push	r11
    2660:	cf 92       	push	r12
    2662:	df 92       	push	r13
    2664:	ef 92       	push	r14
    2666:	ff 92       	push	r15
    2668:	0f 93       	push	r16
    266a:	1f 93       	push	r17
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	2b 97       	sbiw	r28, 0x0b	; 11
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	de bf       	out	0x3e, r29	; 62
    267a:	6c 01       	movw	r12, r24
    267c:	7b 01       	movw	r14, r22
    267e:	8a 01       	movw	r16, r20
    2680:	fc 01       	movw	r30, r24
    2682:	16 82       	std	Z+6, r1	; 0x06
    2684:	17 82       	std	Z+7, r1	; 0x07
    2686:	83 81       	ldd	r24, Z+3	; 0x03
    2688:	81 ff       	sbrs	r24, 1
    268a:	bf c1       	rjmp	.+894    	; 0x2a0a <vfprintf+0x3be>
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	3c 01       	movw	r6, r24
    2692:	f6 01       	movw	r30, r12
    2694:	93 81       	ldd	r25, Z+3	; 0x03
    2696:	f7 01       	movw	r30, r14
    2698:	93 fd       	sbrc	r25, 3
    269a:	85 91       	lpm	r24, Z+
    269c:	93 ff       	sbrs	r25, 3
    269e:	81 91       	ld	r24, Z+
    26a0:	7f 01       	movw	r14, r30
    26a2:	88 23       	and	r24, r24
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <vfprintf+0x5c>
    26a6:	ad c1       	rjmp	.+858    	; 0x2a02 <vfprintf+0x3b6>
    26a8:	85 32       	cpi	r24, 0x25	; 37
    26aa:	39 f4       	brne	.+14     	; 0x26ba <vfprintf+0x6e>
    26ac:	93 fd       	sbrc	r25, 3
    26ae:	85 91       	lpm	r24, Z+
    26b0:	93 ff       	sbrs	r25, 3
    26b2:	81 91       	ld	r24, Z+
    26b4:	7f 01       	movw	r14, r30
    26b6:	85 32       	cpi	r24, 0x25	; 37
    26b8:	21 f4       	brne	.+8      	; 0x26c2 <vfprintf+0x76>
    26ba:	b6 01       	movw	r22, r12
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	15 d3       	rcall	.+1578   	; 0x2cea <fputc>
    26c0:	e8 cf       	rjmp	.-48     	; 0x2692 <vfprintf+0x46>
    26c2:	91 2c       	mov	r9, r1
    26c4:	21 2c       	mov	r2, r1
    26c6:	31 2c       	mov	r3, r1
    26c8:	ff e1       	ldi	r31, 0x1F	; 31
    26ca:	f3 15       	cp	r31, r3
    26cc:	d8 f0       	brcs	.+54     	; 0x2704 <vfprintf+0xb8>
    26ce:	8b 32       	cpi	r24, 0x2B	; 43
    26d0:	79 f0       	breq	.+30     	; 0x26f0 <vfprintf+0xa4>
    26d2:	38 f4       	brcc	.+14     	; 0x26e2 <vfprintf+0x96>
    26d4:	80 32       	cpi	r24, 0x20	; 32
    26d6:	79 f0       	breq	.+30     	; 0x26f6 <vfprintf+0xaa>
    26d8:	83 32       	cpi	r24, 0x23	; 35
    26da:	a1 f4       	brne	.+40     	; 0x2704 <vfprintf+0xb8>
    26dc:	23 2d       	mov	r18, r3
    26de:	20 61       	ori	r18, 0x10	; 16
    26e0:	1d c0       	rjmp	.+58     	; 0x271c <vfprintf+0xd0>
    26e2:	8d 32       	cpi	r24, 0x2D	; 45
    26e4:	61 f0       	breq	.+24     	; 0x26fe <vfprintf+0xb2>
    26e6:	80 33       	cpi	r24, 0x30	; 48
    26e8:	69 f4       	brne	.+26     	; 0x2704 <vfprintf+0xb8>
    26ea:	23 2d       	mov	r18, r3
    26ec:	21 60       	ori	r18, 0x01	; 1
    26ee:	16 c0       	rjmp	.+44     	; 0x271c <vfprintf+0xd0>
    26f0:	83 2d       	mov	r24, r3
    26f2:	82 60       	ori	r24, 0x02	; 2
    26f4:	38 2e       	mov	r3, r24
    26f6:	e3 2d       	mov	r30, r3
    26f8:	e4 60       	ori	r30, 0x04	; 4
    26fa:	3e 2e       	mov	r3, r30
    26fc:	2a c0       	rjmp	.+84     	; 0x2752 <vfprintf+0x106>
    26fe:	f3 2d       	mov	r31, r3
    2700:	f8 60       	ori	r31, 0x08	; 8
    2702:	1d c0       	rjmp	.+58     	; 0x273e <vfprintf+0xf2>
    2704:	37 fc       	sbrc	r3, 7
    2706:	2d c0       	rjmp	.+90     	; 0x2762 <vfprintf+0x116>
    2708:	20 ed       	ldi	r18, 0xD0	; 208
    270a:	28 0f       	add	r18, r24
    270c:	2a 30       	cpi	r18, 0x0A	; 10
    270e:	40 f0       	brcs	.+16     	; 0x2720 <vfprintf+0xd4>
    2710:	8e 32       	cpi	r24, 0x2E	; 46
    2712:	b9 f4       	brne	.+46     	; 0x2742 <vfprintf+0xf6>
    2714:	36 fc       	sbrc	r3, 6
    2716:	75 c1       	rjmp	.+746    	; 0x2a02 <vfprintf+0x3b6>
    2718:	23 2d       	mov	r18, r3
    271a:	20 64       	ori	r18, 0x40	; 64
    271c:	32 2e       	mov	r3, r18
    271e:	19 c0       	rjmp	.+50     	; 0x2752 <vfprintf+0x106>
    2720:	36 fe       	sbrs	r3, 6
    2722:	06 c0       	rjmp	.+12     	; 0x2730 <vfprintf+0xe4>
    2724:	8a e0       	ldi	r24, 0x0A	; 10
    2726:	98 9e       	mul	r9, r24
    2728:	20 0d       	add	r18, r0
    272a:	11 24       	eor	r1, r1
    272c:	92 2e       	mov	r9, r18
    272e:	11 c0       	rjmp	.+34     	; 0x2752 <vfprintf+0x106>
    2730:	ea e0       	ldi	r30, 0x0A	; 10
    2732:	2e 9e       	mul	r2, r30
    2734:	20 0d       	add	r18, r0
    2736:	11 24       	eor	r1, r1
    2738:	22 2e       	mov	r2, r18
    273a:	f3 2d       	mov	r31, r3
    273c:	f0 62       	ori	r31, 0x20	; 32
    273e:	3f 2e       	mov	r3, r31
    2740:	08 c0       	rjmp	.+16     	; 0x2752 <vfprintf+0x106>
    2742:	8c 36       	cpi	r24, 0x6C	; 108
    2744:	21 f4       	brne	.+8      	; 0x274e <vfprintf+0x102>
    2746:	83 2d       	mov	r24, r3
    2748:	80 68       	ori	r24, 0x80	; 128
    274a:	38 2e       	mov	r3, r24
    274c:	02 c0       	rjmp	.+4      	; 0x2752 <vfprintf+0x106>
    274e:	88 36       	cpi	r24, 0x68	; 104
    2750:	41 f4       	brne	.+16     	; 0x2762 <vfprintf+0x116>
    2752:	f7 01       	movw	r30, r14
    2754:	93 fd       	sbrc	r25, 3
    2756:	85 91       	lpm	r24, Z+
    2758:	93 ff       	sbrs	r25, 3
    275a:	81 91       	ld	r24, Z+
    275c:	7f 01       	movw	r14, r30
    275e:	81 11       	cpse	r24, r1
    2760:	b3 cf       	rjmp	.-154    	; 0x26c8 <vfprintf+0x7c>
    2762:	98 2f       	mov	r25, r24
    2764:	9f 7d       	andi	r25, 0xDF	; 223
    2766:	95 54       	subi	r25, 0x45	; 69
    2768:	93 30       	cpi	r25, 0x03	; 3
    276a:	28 f4       	brcc	.+10     	; 0x2776 <vfprintf+0x12a>
    276c:	0c 5f       	subi	r16, 0xFC	; 252
    276e:	1f 4f       	sbci	r17, 0xFF	; 255
    2770:	9f e3       	ldi	r25, 0x3F	; 63
    2772:	99 83       	std	Y+1, r25	; 0x01
    2774:	0d c0       	rjmp	.+26     	; 0x2790 <vfprintf+0x144>
    2776:	83 36       	cpi	r24, 0x63	; 99
    2778:	31 f0       	breq	.+12     	; 0x2786 <vfprintf+0x13a>
    277a:	83 37       	cpi	r24, 0x73	; 115
    277c:	71 f0       	breq	.+28     	; 0x279a <vfprintf+0x14e>
    277e:	83 35       	cpi	r24, 0x53	; 83
    2780:	09 f0       	breq	.+2      	; 0x2784 <vfprintf+0x138>
    2782:	55 c0       	rjmp	.+170    	; 0x282e <vfprintf+0x1e2>
    2784:	20 c0       	rjmp	.+64     	; 0x27c6 <vfprintf+0x17a>
    2786:	f8 01       	movw	r30, r16
    2788:	80 81       	ld	r24, Z
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	0e 5f       	subi	r16, 0xFE	; 254
    278e:	1f 4f       	sbci	r17, 0xFF	; 255
    2790:	88 24       	eor	r8, r8
    2792:	83 94       	inc	r8
    2794:	91 2c       	mov	r9, r1
    2796:	53 01       	movw	r10, r6
    2798:	12 c0       	rjmp	.+36     	; 0x27be <vfprintf+0x172>
    279a:	28 01       	movw	r4, r16
    279c:	f2 e0       	ldi	r31, 0x02	; 2
    279e:	4f 0e       	add	r4, r31
    27a0:	51 1c       	adc	r5, r1
    27a2:	f8 01       	movw	r30, r16
    27a4:	a0 80       	ld	r10, Z
    27a6:	b1 80       	ldd	r11, Z+1	; 0x01
    27a8:	36 fe       	sbrs	r3, 6
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <vfprintf+0x166>
    27ac:	69 2d       	mov	r22, r9
    27ae:	70 e0       	ldi	r23, 0x00	; 0
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <vfprintf+0x16a>
    27b2:	6f ef       	ldi	r22, 0xFF	; 255
    27b4:	7f ef       	ldi	r23, 0xFF	; 255
    27b6:	c5 01       	movw	r24, r10
    27b8:	8d d2       	rcall	.+1306   	; 0x2cd4 <strnlen>
    27ba:	4c 01       	movw	r8, r24
    27bc:	82 01       	movw	r16, r4
    27be:	f3 2d       	mov	r31, r3
    27c0:	ff 77       	andi	r31, 0x7F	; 127
    27c2:	3f 2e       	mov	r3, r31
    27c4:	15 c0       	rjmp	.+42     	; 0x27f0 <vfprintf+0x1a4>
    27c6:	28 01       	movw	r4, r16
    27c8:	22 e0       	ldi	r18, 0x02	; 2
    27ca:	42 0e       	add	r4, r18
    27cc:	51 1c       	adc	r5, r1
    27ce:	f8 01       	movw	r30, r16
    27d0:	a0 80       	ld	r10, Z
    27d2:	b1 80       	ldd	r11, Z+1	; 0x01
    27d4:	36 fe       	sbrs	r3, 6
    27d6:	03 c0       	rjmp	.+6      	; 0x27de <vfprintf+0x192>
    27d8:	69 2d       	mov	r22, r9
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <vfprintf+0x196>
    27de:	6f ef       	ldi	r22, 0xFF	; 255
    27e0:	7f ef       	ldi	r23, 0xFF	; 255
    27e2:	c5 01       	movw	r24, r10
    27e4:	65 d2       	rcall	.+1226   	; 0x2cb0 <strnlen_P>
    27e6:	4c 01       	movw	r8, r24
    27e8:	f3 2d       	mov	r31, r3
    27ea:	f0 68       	ori	r31, 0x80	; 128
    27ec:	3f 2e       	mov	r3, r31
    27ee:	82 01       	movw	r16, r4
    27f0:	33 fc       	sbrc	r3, 3
    27f2:	19 c0       	rjmp	.+50     	; 0x2826 <vfprintf+0x1da>
    27f4:	82 2d       	mov	r24, r2
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	88 16       	cp	r8, r24
    27fa:	99 06       	cpc	r9, r25
    27fc:	a0 f4       	brcc	.+40     	; 0x2826 <vfprintf+0x1da>
    27fe:	b6 01       	movw	r22, r12
    2800:	80 e2       	ldi	r24, 0x20	; 32
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	72 d2       	rcall	.+1252   	; 0x2cea <fputc>
    2806:	2a 94       	dec	r2
    2808:	f5 cf       	rjmp	.-22     	; 0x27f4 <vfprintf+0x1a8>
    280a:	f5 01       	movw	r30, r10
    280c:	37 fc       	sbrc	r3, 7
    280e:	85 91       	lpm	r24, Z+
    2810:	37 fe       	sbrs	r3, 7
    2812:	81 91       	ld	r24, Z+
    2814:	5f 01       	movw	r10, r30
    2816:	b6 01       	movw	r22, r12
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	67 d2       	rcall	.+1230   	; 0x2cea <fputc>
    281c:	21 10       	cpse	r2, r1
    281e:	2a 94       	dec	r2
    2820:	21 e0       	ldi	r18, 0x01	; 1
    2822:	82 1a       	sub	r8, r18
    2824:	91 08       	sbc	r9, r1
    2826:	81 14       	cp	r8, r1
    2828:	91 04       	cpc	r9, r1
    282a:	79 f7       	brne	.-34     	; 0x280a <vfprintf+0x1be>
    282c:	e1 c0       	rjmp	.+450    	; 0x29f0 <vfprintf+0x3a4>
    282e:	84 36       	cpi	r24, 0x64	; 100
    2830:	11 f0       	breq	.+4      	; 0x2836 <vfprintf+0x1ea>
    2832:	89 36       	cpi	r24, 0x69	; 105
    2834:	39 f5       	brne	.+78     	; 0x2884 <vfprintf+0x238>
    2836:	f8 01       	movw	r30, r16
    2838:	37 fe       	sbrs	r3, 7
    283a:	07 c0       	rjmp	.+14     	; 0x284a <vfprintf+0x1fe>
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	0c 5f       	subi	r16, 0xFC	; 252
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	08 c0       	rjmp	.+16     	; 0x285a <vfprintf+0x20e>
    284a:	60 81       	ld	r22, Z
    284c:	71 81       	ldd	r23, Z+1	; 0x01
    284e:	07 2e       	mov	r0, r23
    2850:	00 0c       	add	r0, r0
    2852:	88 0b       	sbc	r24, r24
    2854:	99 0b       	sbc	r25, r25
    2856:	0e 5f       	subi	r16, 0xFE	; 254
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	f3 2d       	mov	r31, r3
    285c:	ff 76       	andi	r31, 0x6F	; 111
    285e:	3f 2e       	mov	r3, r31
    2860:	97 ff       	sbrs	r25, 7
    2862:	09 c0       	rjmp	.+18     	; 0x2876 <vfprintf+0x22a>
    2864:	90 95       	com	r25
    2866:	80 95       	com	r24
    2868:	70 95       	com	r23
    286a:	61 95       	neg	r22
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	8f 4f       	sbci	r24, 0xFF	; 255
    2870:	9f 4f       	sbci	r25, 0xFF	; 255
    2872:	f0 68       	ori	r31, 0x80	; 128
    2874:	3f 2e       	mov	r3, r31
    2876:	2a e0       	ldi	r18, 0x0A	; 10
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	a3 01       	movw	r20, r6
    287c:	72 d2       	rcall	.+1252   	; 0x2d62 <__ultoa_invert>
    287e:	88 2e       	mov	r8, r24
    2880:	86 18       	sub	r8, r6
    2882:	44 c0       	rjmp	.+136    	; 0x290c <vfprintf+0x2c0>
    2884:	85 37       	cpi	r24, 0x75	; 117
    2886:	31 f4       	brne	.+12     	; 0x2894 <vfprintf+0x248>
    2888:	23 2d       	mov	r18, r3
    288a:	2f 7e       	andi	r18, 0xEF	; 239
    288c:	b2 2e       	mov	r11, r18
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	25 c0       	rjmp	.+74     	; 0x28de <vfprintf+0x292>
    2894:	93 2d       	mov	r25, r3
    2896:	99 7f       	andi	r25, 0xF9	; 249
    2898:	b9 2e       	mov	r11, r25
    289a:	8f 36       	cpi	r24, 0x6F	; 111
    289c:	c1 f0       	breq	.+48     	; 0x28ce <vfprintf+0x282>
    289e:	18 f4       	brcc	.+6      	; 0x28a6 <vfprintf+0x25a>
    28a0:	88 35       	cpi	r24, 0x58	; 88
    28a2:	79 f0       	breq	.+30     	; 0x28c2 <vfprintf+0x276>
    28a4:	ae c0       	rjmp	.+348    	; 0x2a02 <vfprintf+0x3b6>
    28a6:	80 37       	cpi	r24, 0x70	; 112
    28a8:	19 f0       	breq	.+6      	; 0x28b0 <vfprintf+0x264>
    28aa:	88 37       	cpi	r24, 0x78	; 120
    28ac:	21 f0       	breq	.+8      	; 0x28b6 <vfprintf+0x26a>
    28ae:	a9 c0       	rjmp	.+338    	; 0x2a02 <vfprintf+0x3b6>
    28b0:	e9 2f       	mov	r30, r25
    28b2:	e0 61       	ori	r30, 0x10	; 16
    28b4:	be 2e       	mov	r11, r30
    28b6:	b4 fe       	sbrs	r11, 4
    28b8:	0d c0       	rjmp	.+26     	; 0x28d4 <vfprintf+0x288>
    28ba:	fb 2d       	mov	r31, r11
    28bc:	f4 60       	ori	r31, 0x04	; 4
    28be:	bf 2e       	mov	r11, r31
    28c0:	09 c0       	rjmp	.+18     	; 0x28d4 <vfprintf+0x288>
    28c2:	34 fe       	sbrs	r3, 4
    28c4:	0a c0       	rjmp	.+20     	; 0x28da <vfprintf+0x28e>
    28c6:	29 2f       	mov	r18, r25
    28c8:	26 60       	ori	r18, 0x06	; 6
    28ca:	b2 2e       	mov	r11, r18
    28cc:	06 c0       	rjmp	.+12     	; 0x28da <vfprintf+0x28e>
    28ce:	28 e0       	ldi	r18, 0x08	; 8
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	05 c0       	rjmp	.+10     	; 0x28de <vfprintf+0x292>
    28d4:	20 e1       	ldi	r18, 0x10	; 16
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <vfprintf+0x292>
    28da:	20 e1       	ldi	r18, 0x10	; 16
    28dc:	32 e0       	ldi	r19, 0x02	; 2
    28de:	f8 01       	movw	r30, r16
    28e0:	b7 fe       	sbrs	r11, 7
    28e2:	07 c0       	rjmp	.+14     	; 0x28f2 <vfprintf+0x2a6>
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	82 81       	ldd	r24, Z+2	; 0x02
    28ea:	93 81       	ldd	r25, Z+3	; 0x03
    28ec:	0c 5f       	subi	r16, 0xFC	; 252
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	06 c0       	rjmp	.+12     	; 0x28fe <vfprintf+0x2b2>
    28f2:	60 81       	ld	r22, Z
    28f4:	71 81       	ldd	r23, Z+1	; 0x01
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	0e 5f       	subi	r16, 0xFE	; 254
    28fc:	1f 4f       	sbci	r17, 0xFF	; 255
    28fe:	a3 01       	movw	r20, r6
    2900:	30 d2       	rcall	.+1120   	; 0x2d62 <__ultoa_invert>
    2902:	88 2e       	mov	r8, r24
    2904:	86 18       	sub	r8, r6
    2906:	fb 2d       	mov	r31, r11
    2908:	ff 77       	andi	r31, 0x7F	; 127
    290a:	3f 2e       	mov	r3, r31
    290c:	36 fe       	sbrs	r3, 6
    290e:	0d c0       	rjmp	.+26     	; 0x292a <vfprintf+0x2de>
    2910:	23 2d       	mov	r18, r3
    2912:	2e 7f       	andi	r18, 0xFE	; 254
    2914:	a2 2e       	mov	r10, r18
    2916:	89 14       	cp	r8, r9
    2918:	58 f4       	brcc	.+22     	; 0x2930 <vfprintf+0x2e4>
    291a:	34 fe       	sbrs	r3, 4
    291c:	0b c0       	rjmp	.+22     	; 0x2934 <vfprintf+0x2e8>
    291e:	32 fc       	sbrc	r3, 2
    2920:	09 c0       	rjmp	.+18     	; 0x2934 <vfprintf+0x2e8>
    2922:	83 2d       	mov	r24, r3
    2924:	8e 7e       	andi	r24, 0xEE	; 238
    2926:	a8 2e       	mov	r10, r24
    2928:	05 c0       	rjmp	.+10     	; 0x2934 <vfprintf+0x2e8>
    292a:	b8 2c       	mov	r11, r8
    292c:	a3 2c       	mov	r10, r3
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <vfprintf+0x2ea>
    2930:	b8 2c       	mov	r11, r8
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <vfprintf+0x2ea>
    2934:	b9 2c       	mov	r11, r9
    2936:	a4 fe       	sbrs	r10, 4
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <vfprintf+0x30c>
    293a:	fe 01       	movw	r30, r28
    293c:	e8 0d       	add	r30, r8
    293e:	f1 1d       	adc	r31, r1
    2940:	80 81       	ld	r24, Z
    2942:	80 33       	cpi	r24, 0x30	; 48
    2944:	21 f4       	brne	.+8      	; 0x294e <vfprintf+0x302>
    2946:	9a 2d       	mov	r25, r10
    2948:	99 7e       	andi	r25, 0xE9	; 233
    294a:	a9 2e       	mov	r10, r25
    294c:	09 c0       	rjmp	.+18     	; 0x2960 <vfprintf+0x314>
    294e:	a2 fe       	sbrs	r10, 2
    2950:	06 c0       	rjmp	.+12     	; 0x295e <vfprintf+0x312>
    2952:	b3 94       	inc	r11
    2954:	b3 94       	inc	r11
    2956:	04 c0       	rjmp	.+8      	; 0x2960 <vfprintf+0x314>
    2958:	8a 2d       	mov	r24, r10
    295a:	86 78       	andi	r24, 0x86	; 134
    295c:	09 f0       	breq	.+2      	; 0x2960 <vfprintf+0x314>
    295e:	b3 94       	inc	r11
    2960:	a3 fc       	sbrc	r10, 3
    2962:	10 c0       	rjmp	.+32     	; 0x2984 <vfprintf+0x338>
    2964:	a0 fe       	sbrs	r10, 0
    2966:	06 c0       	rjmp	.+12     	; 0x2974 <vfprintf+0x328>
    2968:	b2 14       	cp	r11, r2
    296a:	80 f4       	brcc	.+32     	; 0x298c <vfprintf+0x340>
    296c:	28 0c       	add	r2, r8
    296e:	92 2c       	mov	r9, r2
    2970:	9b 18       	sub	r9, r11
    2972:	0d c0       	rjmp	.+26     	; 0x298e <vfprintf+0x342>
    2974:	b2 14       	cp	r11, r2
    2976:	58 f4       	brcc	.+22     	; 0x298e <vfprintf+0x342>
    2978:	b6 01       	movw	r22, r12
    297a:	80 e2       	ldi	r24, 0x20	; 32
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	b5 d1       	rcall	.+874    	; 0x2cea <fputc>
    2980:	b3 94       	inc	r11
    2982:	f8 cf       	rjmp	.-16     	; 0x2974 <vfprintf+0x328>
    2984:	b2 14       	cp	r11, r2
    2986:	18 f4       	brcc	.+6      	; 0x298e <vfprintf+0x342>
    2988:	2b 18       	sub	r2, r11
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <vfprintf+0x344>
    298c:	98 2c       	mov	r9, r8
    298e:	21 2c       	mov	r2, r1
    2990:	a4 fe       	sbrs	r10, 4
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <vfprintf+0x366>
    2994:	b6 01       	movw	r22, r12
    2996:	80 e3       	ldi	r24, 0x30	; 48
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	a7 d1       	rcall	.+846    	; 0x2cea <fputc>
    299c:	a2 fe       	sbrs	r10, 2
    299e:	16 c0       	rjmp	.+44     	; 0x29cc <vfprintf+0x380>
    29a0:	a1 fc       	sbrc	r10, 1
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <vfprintf+0x35e>
    29a4:	88 e7       	ldi	r24, 0x78	; 120
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <vfprintf+0x362>
    29aa:	88 e5       	ldi	r24, 0x58	; 88
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	b6 01       	movw	r22, r12
    29b0:	0c c0       	rjmp	.+24     	; 0x29ca <vfprintf+0x37e>
    29b2:	8a 2d       	mov	r24, r10
    29b4:	86 78       	andi	r24, 0x86	; 134
    29b6:	51 f0       	breq	.+20     	; 0x29cc <vfprintf+0x380>
    29b8:	a1 fe       	sbrs	r10, 1
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <vfprintf+0x374>
    29bc:	8b e2       	ldi	r24, 0x2B	; 43
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <vfprintf+0x376>
    29c0:	80 e2       	ldi	r24, 0x20	; 32
    29c2:	a7 fc       	sbrc	r10, 7
    29c4:	8d e2       	ldi	r24, 0x2D	; 45
    29c6:	b6 01       	movw	r22, r12
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	8f d1       	rcall	.+798    	; 0x2cea <fputc>
    29cc:	89 14       	cp	r8, r9
    29ce:	30 f4       	brcc	.+12     	; 0x29dc <vfprintf+0x390>
    29d0:	b6 01       	movw	r22, r12
    29d2:	80 e3       	ldi	r24, 0x30	; 48
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	89 d1       	rcall	.+786    	; 0x2cea <fputc>
    29d8:	9a 94       	dec	r9
    29da:	f8 cf       	rjmp	.-16     	; 0x29cc <vfprintf+0x380>
    29dc:	8a 94       	dec	r8
    29de:	f3 01       	movw	r30, r6
    29e0:	e8 0d       	add	r30, r8
    29e2:	f1 1d       	adc	r31, r1
    29e4:	80 81       	ld	r24, Z
    29e6:	b6 01       	movw	r22, r12
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	7f d1       	rcall	.+766    	; 0x2cea <fputc>
    29ec:	81 10       	cpse	r8, r1
    29ee:	f6 cf       	rjmp	.-20     	; 0x29dc <vfprintf+0x390>
    29f0:	22 20       	and	r2, r2
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <vfprintf+0x3aa>
    29f4:	4e ce       	rjmp	.-868    	; 0x2692 <vfprintf+0x46>
    29f6:	b6 01       	movw	r22, r12
    29f8:	80 e2       	ldi	r24, 0x20	; 32
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	76 d1       	rcall	.+748    	; 0x2cea <fputc>
    29fe:	2a 94       	dec	r2
    2a00:	f7 cf       	rjmp	.-18     	; 0x29f0 <vfprintf+0x3a4>
    2a02:	f6 01       	movw	r30, r12
    2a04:	86 81       	ldd	r24, Z+6	; 0x06
    2a06:	97 81       	ldd	r25, Z+7	; 0x07
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <vfprintf+0x3c2>
    2a0a:	8f ef       	ldi	r24, 0xFF	; 255
    2a0c:	9f ef       	ldi	r25, 0xFF	; 255
    2a0e:	2b 96       	adiw	r28, 0x0b	; 11
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	de bf       	out	0x3e, r29	; 62
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	ef 90       	pop	r14
    2a20:	df 90       	pop	r13
    2a22:	cf 90       	pop	r12
    2a24:	bf 90       	pop	r11
    2a26:	af 90       	pop	r10
    2a28:	9f 90       	pop	r9
    2a2a:	8f 90       	pop	r8
    2a2c:	7f 90       	pop	r7
    2a2e:	6f 90       	pop	r6
    2a30:	5f 90       	pop	r5
    2a32:	4f 90       	pop	r4
    2a34:	3f 90       	pop	r3
    2a36:	2f 90       	pop	r2
    2a38:	08 95       	ret

00002a3a <calloc>:
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	86 9f       	mul	r24, r22
    2a44:	80 01       	movw	r16, r0
    2a46:	87 9f       	mul	r24, r23
    2a48:	10 0d       	add	r17, r0
    2a4a:	96 9f       	mul	r25, r22
    2a4c:	10 0d       	add	r17, r0
    2a4e:	11 24       	eor	r1, r1
    2a50:	c8 01       	movw	r24, r16
    2a52:	0d d0       	rcall	.+26     	; 0x2a6e <malloc>
    2a54:	ec 01       	movw	r28, r24
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	21 f0       	breq	.+8      	; 0x2a62 <calloc+0x28>
    2a5a:	a8 01       	movw	r20, r16
    2a5c:	60 e0       	ldi	r22, 0x00	; 0
    2a5e:	70 e0       	ldi	r23, 0x00	; 0
    2a60:	32 d1       	rcall	.+612    	; 0x2cc6 <memset>
    2a62:	ce 01       	movw	r24, r28
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	08 95       	ret

00002a6e <malloc>:
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	82 30       	cpi	r24, 0x02	; 2
    2a78:	91 05       	cpc	r25, r1
    2a7a:	10 f4       	brcc	.+4      	; 0x2a80 <malloc+0x12>
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	e0 91 34 20 	lds	r30, 0x2034	; 0x802034 <__flp>
    2a84:	f0 91 35 20 	lds	r31, 0x2035	; 0x802035 <__flp+0x1>
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	a0 e0       	ldi	r26, 0x00	; 0
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	30 97       	sbiw	r30, 0x00	; 0
    2a92:	19 f1       	breq	.+70     	; 0x2ada <malloc+0x6c>
    2a94:	40 81       	ld	r20, Z
    2a96:	51 81       	ldd	r21, Z+1	; 0x01
    2a98:	02 81       	ldd	r16, Z+2	; 0x02
    2a9a:	13 81       	ldd	r17, Z+3	; 0x03
    2a9c:	48 17       	cp	r20, r24
    2a9e:	59 07       	cpc	r21, r25
    2aa0:	c8 f0       	brcs	.+50     	; 0x2ad4 <malloc+0x66>
    2aa2:	84 17       	cp	r24, r20
    2aa4:	95 07       	cpc	r25, r21
    2aa6:	69 f4       	brne	.+26     	; 0x2ac2 <malloc+0x54>
    2aa8:	10 97       	sbiw	r26, 0x00	; 0
    2aaa:	31 f0       	breq	.+12     	; 0x2ab8 <malloc+0x4a>
    2aac:	12 96       	adiw	r26, 0x02	; 2
    2aae:	0c 93       	st	X, r16
    2ab0:	12 97       	sbiw	r26, 0x02	; 2
    2ab2:	13 96       	adiw	r26, 0x03	; 3
    2ab4:	1c 93       	st	X, r17
    2ab6:	27 c0       	rjmp	.+78     	; 0x2b06 <malloc+0x98>
    2ab8:	00 93 34 20 	sts	0x2034, r16	; 0x802034 <__flp>
    2abc:	10 93 35 20 	sts	0x2035, r17	; 0x802035 <__flp+0x1>
    2ac0:	22 c0       	rjmp	.+68     	; 0x2b06 <malloc+0x98>
    2ac2:	21 15       	cp	r18, r1
    2ac4:	31 05       	cpc	r19, r1
    2ac6:	19 f0       	breq	.+6      	; 0x2ace <malloc+0x60>
    2ac8:	42 17       	cp	r20, r18
    2aca:	53 07       	cpc	r21, r19
    2acc:	18 f4       	brcc	.+6      	; 0x2ad4 <malloc+0x66>
    2ace:	9a 01       	movw	r18, r20
    2ad0:	bd 01       	movw	r22, r26
    2ad2:	ef 01       	movw	r28, r30
    2ad4:	df 01       	movw	r26, r30
    2ad6:	f8 01       	movw	r30, r16
    2ad8:	db cf       	rjmp	.-74     	; 0x2a90 <malloc+0x22>
    2ada:	21 15       	cp	r18, r1
    2adc:	31 05       	cpc	r19, r1
    2ade:	f9 f0       	breq	.+62     	; 0x2b1e <malloc+0xb0>
    2ae0:	28 1b       	sub	r18, r24
    2ae2:	39 0b       	sbc	r19, r25
    2ae4:	24 30       	cpi	r18, 0x04	; 4
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	80 f4       	brcc	.+32     	; 0x2b0a <malloc+0x9c>
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	9b 81       	ldd	r25, Y+3	; 0x03
    2aee:	61 15       	cp	r22, r1
    2af0:	71 05       	cpc	r23, r1
    2af2:	21 f0       	breq	.+8      	; 0x2afc <malloc+0x8e>
    2af4:	fb 01       	movw	r30, r22
    2af6:	82 83       	std	Z+2, r24	; 0x02
    2af8:	93 83       	std	Z+3, r25	; 0x03
    2afa:	04 c0       	rjmp	.+8      	; 0x2b04 <malloc+0x96>
    2afc:	80 93 34 20 	sts	0x2034, r24	; 0x802034 <__flp>
    2b00:	90 93 35 20 	sts	0x2035, r25	; 0x802035 <__flp+0x1>
    2b04:	fe 01       	movw	r30, r28
    2b06:	32 96       	adiw	r30, 0x02	; 2
    2b08:	44 c0       	rjmp	.+136    	; 0x2b92 <malloc+0x124>
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e2 0f       	add	r30, r18
    2b0e:	f3 1f       	adc	r31, r19
    2b10:	81 93       	st	Z+, r24
    2b12:	91 93       	st	Z+, r25
    2b14:	22 50       	subi	r18, 0x02	; 2
    2b16:	31 09       	sbc	r19, r1
    2b18:	28 83       	st	Y, r18
    2b1a:	39 83       	std	Y+1, r19	; 0x01
    2b1c:	3a c0       	rjmp	.+116    	; 0x2b92 <malloc+0x124>
    2b1e:	20 91 32 20 	lds	r18, 0x2032	; 0x802032 <__brkval>
    2b22:	30 91 33 20 	lds	r19, 0x2033	; 0x802033 <__brkval+0x1>
    2b26:	23 2b       	or	r18, r19
    2b28:	41 f4       	brne	.+16     	; 0x2b3a <malloc+0xcc>
    2b2a:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    2b2e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2b32:	20 93 32 20 	sts	0x2032, r18	; 0x802032 <__brkval>
    2b36:	30 93 33 20 	sts	0x2033, r19	; 0x802033 <__brkval+0x1>
    2b3a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    2b3e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2b42:	21 15       	cp	r18, r1
    2b44:	31 05       	cpc	r19, r1
    2b46:	41 f4       	brne	.+16     	; 0x2b58 <malloc+0xea>
    2b48:	2d b7       	in	r18, 0x3d	; 61
    2b4a:	3e b7       	in	r19, 0x3e	; 62
    2b4c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2b50:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2b54:	24 1b       	sub	r18, r20
    2b56:	35 0b       	sbc	r19, r21
    2b58:	e0 91 32 20 	lds	r30, 0x2032	; 0x802032 <__brkval>
    2b5c:	f0 91 33 20 	lds	r31, 0x2033	; 0x802033 <__brkval+0x1>
    2b60:	e2 17       	cp	r30, r18
    2b62:	f3 07       	cpc	r31, r19
    2b64:	a0 f4       	brcc	.+40     	; 0x2b8e <malloc+0x120>
    2b66:	2e 1b       	sub	r18, r30
    2b68:	3f 0b       	sbc	r19, r31
    2b6a:	28 17       	cp	r18, r24
    2b6c:	39 07       	cpc	r19, r25
    2b6e:	78 f0       	brcs	.+30     	; 0x2b8e <malloc+0x120>
    2b70:	ac 01       	movw	r20, r24
    2b72:	4e 5f       	subi	r20, 0xFE	; 254
    2b74:	5f 4f       	sbci	r21, 0xFF	; 255
    2b76:	24 17       	cp	r18, r20
    2b78:	35 07       	cpc	r19, r21
    2b7a:	48 f0       	brcs	.+18     	; 0x2b8e <malloc+0x120>
    2b7c:	4e 0f       	add	r20, r30
    2b7e:	5f 1f       	adc	r21, r31
    2b80:	40 93 32 20 	sts	0x2032, r20	; 0x802032 <__brkval>
    2b84:	50 93 33 20 	sts	0x2033, r21	; 0x802033 <__brkval+0x1>
    2b88:	81 93       	st	Z+, r24
    2b8a:	91 93       	st	Z+, r25
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <malloc+0x124>
    2b8e:	e0 e0       	ldi	r30, 0x00	; 0
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	cf 01       	movw	r24, r30
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <free>:
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	09 f4       	brne	.+2      	; 0x2ba8 <free+0xa>
    2ba6:	81 c0       	rjmp	.+258    	; 0x2caa <free+0x10c>
    2ba8:	fc 01       	movw	r30, r24
    2baa:	32 97       	sbiw	r30, 0x02	; 2
    2bac:	12 82       	std	Z+2, r1	; 0x02
    2bae:	13 82       	std	Z+3, r1	; 0x03
    2bb0:	a0 91 34 20 	lds	r26, 0x2034	; 0x802034 <__flp>
    2bb4:	b0 91 35 20 	lds	r27, 0x2035	; 0x802035 <__flp+0x1>
    2bb8:	10 97       	sbiw	r26, 0x00	; 0
    2bba:	81 f4       	brne	.+32     	; 0x2bdc <free+0x3e>
    2bbc:	20 81       	ld	r18, Z
    2bbe:	31 81       	ldd	r19, Z+1	; 0x01
    2bc0:	82 0f       	add	r24, r18
    2bc2:	93 1f       	adc	r25, r19
    2bc4:	20 91 32 20 	lds	r18, 0x2032	; 0x802032 <__brkval>
    2bc8:	30 91 33 20 	lds	r19, 0x2033	; 0x802033 <__brkval+0x1>
    2bcc:	28 17       	cp	r18, r24
    2bce:	39 07       	cpc	r19, r25
    2bd0:	51 f5       	brne	.+84     	; 0x2c26 <free+0x88>
    2bd2:	e0 93 32 20 	sts	0x2032, r30	; 0x802032 <__brkval>
    2bd6:	f0 93 33 20 	sts	0x2033, r31	; 0x802033 <__brkval+0x1>
    2bda:	67 c0       	rjmp	.+206    	; 0x2caa <free+0x10c>
    2bdc:	ed 01       	movw	r28, r26
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	ce 17       	cp	r28, r30
    2be4:	df 07       	cpc	r29, r31
    2be6:	40 f4       	brcc	.+16     	; 0x2bf8 <free+0x5a>
    2be8:	4a 81       	ldd	r20, Y+2	; 0x02
    2bea:	5b 81       	ldd	r21, Y+3	; 0x03
    2bec:	9e 01       	movw	r18, r28
    2bee:	41 15       	cp	r20, r1
    2bf0:	51 05       	cpc	r21, r1
    2bf2:	f1 f0       	breq	.+60     	; 0x2c30 <free+0x92>
    2bf4:	ea 01       	movw	r28, r20
    2bf6:	f5 cf       	rjmp	.-22     	; 0x2be2 <free+0x44>
    2bf8:	c2 83       	std	Z+2, r28	; 0x02
    2bfa:	d3 83       	std	Z+3, r29	; 0x03
    2bfc:	40 81       	ld	r20, Z
    2bfe:	51 81       	ldd	r21, Z+1	; 0x01
    2c00:	84 0f       	add	r24, r20
    2c02:	95 1f       	adc	r25, r21
    2c04:	c8 17       	cp	r28, r24
    2c06:	d9 07       	cpc	r29, r25
    2c08:	59 f4       	brne	.+22     	; 0x2c20 <free+0x82>
    2c0a:	88 81       	ld	r24, Y
    2c0c:	99 81       	ldd	r25, Y+1	; 0x01
    2c0e:	84 0f       	add	r24, r20
    2c10:	95 1f       	adc	r25, r21
    2c12:	02 96       	adiw	r24, 0x02	; 2
    2c14:	80 83       	st	Z, r24
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	82 83       	std	Z+2, r24	; 0x02
    2c1e:	93 83       	std	Z+3, r25	; 0x03
    2c20:	21 15       	cp	r18, r1
    2c22:	31 05       	cpc	r19, r1
    2c24:	29 f4       	brne	.+10     	; 0x2c30 <free+0x92>
    2c26:	e0 93 34 20 	sts	0x2034, r30	; 0x802034 <__flp>
    2c2a:	f0 93 35 20 	sts	0x2035, r31	; 0x802035 <__flp+0x1>
    2c2e:	3d c0       	rjmp	.+122    	; 0x2caa <free+0x10c>
    2c30:	e9 01       	movw	r28, r18
    2c32:	ea 83       	std	Y+2, r30	; 0x02
    2c34:	fb 83       	std	Y+3, r31	; 0x03
    2c36:	49 91       	ld	r20, Y+
    2c38:	59 91       	ld	r21, Y+
    2c3a:	c4 0f       	add	r28, r20
    2c3c:	d5 1f       	adc	r29, r21
    2c3e:	ec 17       	cp	r30, r28
    2c40:	fd 07       	cpc	r31, r29
    2c42:	61 f4       	brne	.+24     	; 0x2c5c <free+0xbe>
    2c44:	80 81       	ld	r24, Z
    2c46:	91 81       	ldd	r25, Z+1	; 0x01
    2c48:	84 0f       	add	r24, r20
    2c4a:	95 1f       	adc	r25, r21
    2c4c:	02 96       	adiw	r24, 0x02	; 2
    2c4e:	e9 01       	movw	r28, r18
    2c50:	88 83       	st	Y, r24
    2c52:	99 83       	std	Y+1, r25	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	8a 83       	std	Y+2, r24	; 0x02
    2c5a:	9b 83       	std	Y+3, r25	; 0x03
    2c5c:	e0 e0       	ldi	r30, 0x00	; 0
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	12 96       	adiw	r26, 0x02	; 2
    2c62:	8d 91       	ld	r24, X+
    2c64:	9c 91       	ld	r25, X
    2c66:	13 97       	sbiw	r26, 0x03	; 3
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	19 f0       	breq	.+6      	; 0x2c72 <free+0xd4>
    2c6c:	fd 01       	movw	r30, r26
    2c6e:	dc 01       	movw	r26, r24
    2c70:	f7 cf       	rjmp	.-18     	; 0x2c60 <free+0xc2>
    2c72:	8d 91       	ld	r24, X+
    2c74:	9c 91       	ld	r25, X
    2c76:	11 97       	sbiw	r26, 0x01	; 1
    2c78:	9d 01       	movw	r18, r26
    2c7a:	2e 5f       	subi	r18, 0xFE	; 254
    2c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7e:	82 0f       	add	r24, r18
    2c80:	93 1f       	adc	r25, r19
    2c82:	20 91 32 20 	lds	r18, 0x2032	; 0x802032 <__brkval>
    2c86:	30 91 33 20 	lds	r19, 0x2033	; 0x802033 <__brkval+0x1>
    2c8a:	28 17       	cp	r18, r24
    2c8c:	39 07       	cpc	r19, r25
    2c8e:	69 f4       	brne	.+26     	; 0x2caa <free+0x10c>
    2c90:	30 97       	sbiw	r30, 0x00	; 0
    2c92:	29 f4       	brne	.+10     	; 0x2c9e <free+0x100>
    2c94:	10 92 34 20 	sts	0x2034, r1	; 0x802034 <__flp>
    2c98:	10 92 35 20 	sts	0x2035, r1	; 0x802035 <__flp+0x1>
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <free+0x104>
    2c9e:	12 82       	std	Z+2, r1	; 0x02
    2ca0:	13 82       	std	Z+3, r1	; 0x03
    2ca2:	a0 93 32 20 	sts	0x2032, r26	; 0x802032 <__brkval>
    2ca6:	b0 93 33 20 	sts	0x2033, r27	; 0x802033 <__brkval+0x1>
    2caa:	df 91       	pop	r29
    2cac:	cf 91       	pop	r28
    2cae:	08 95       	ret

00002cb0 <strnlen_P>:
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	05 90       	lpm	r0, Z+
    2cb4:	61 50       	subi	r22, 0x01	; 1
    2cb6:	70 40       	sbci	r23, 0x00	; 0
    2cb8:	01 10       	cpse	r0, r1
    2cba:	d8 f7       	brcc	.-10     	; 0x2cb2 <strnlen_P+0x2>
    2cbc:	80 95       	com	r24
    2cbe:	90 95       	com	r25
    2cc0:	8e 0f       	add	r24, r30
    2cc2:	9f 1f       	adc	r25, r31
    2cc4:	08 95       	ret

00002cc6 <memset>:
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	01 c0       	rjmp	.+2      	; 0x2ccc <memset+0x6>
    2cca:	6d 93       	st	X+, r22
    2ccc:	41 50       	subi	r20, 0x01	; 1
    2cce:	50 40       	sbci	r21, 0x00	; 0
    2cd0:	e0 f7       	brcc	.-8      	; 0x2cca <memset+0x4>
    2cd2:	08 95       	ret

00002cd4 <strnlen>:
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	61 50       	subi	r22, 0x01	; 1
    2cd8:	70 40       	sbci	r23, 0x00	; 0
    2cda:	01 90       	ld	r0, Z+
    2cdc:	01 10       	cpse	r0, r1
    2cde:	d8 f7       	brcc	.-10     	; 0x2cd6 <strnlen+0x2>
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	8e 0f       	add	r24, r30
    2ce6:	9f 1f       	adc	r25, r31
    2ce8:	08 95       	ret

00002cea <fputc>:
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	fb 01       	movw	r30, r22
    2cf4:	23 81       	ldd	r18, Z+3	; 0x03
    2cf6:	21 fd       	sbrc	r18, 1
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <fputc+0x16>
    2cfa:	8f ef       	ldi	r24, 0xFF	; 255
    2cfc:	9f ef       	ldi	r25, 0xFF	; 255
    2cfe:	2c c0       	rjmp	.+88     	; 0x2d58 <fputc+0x6e>
    2d00:	22 ff       	sbrs	r18, 2
    2d02:	16 c0       	rjmp	.+44     	; 0x2d30 <fputc+0x46>
    2d04:	46 81       	ldd	r20, Z+6	; 0x06
    2d06:	57 81       	ldd	r21, Z+7	; 0x07
    2d08:	24 81       	ldd	r18, Z+4	; 0x04
    2d0a:	35 81       	ldd	r19, Z+5	; 0x05
    2d0c:	42 17       	cp	r20, r18
    2d0e:	53 07       	cpc	r21, r19
    2d10:	44 f4       	brge	.+16     	; 0x2d22 <fputc+0x38>
    2d12:	a0 81       	ld	r26, Z
    2d14:	b1 81       	ldd	r27, Z+1	; 0x01
    2d16:	9d 01       	movw	r18, r26
    2d18:	2f 5f       	subi	r18, 0xFF	; 255
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	20 83       	st	Z, r18
    2d1e:	31 83       	std	Z+1, r19	; 0x01
    2d20:	8c 93       	st	X, r24
    2d22:	26 81       	ldd	r18, Z+6	; 0x06
    2d24:	37 81       	ldd	r19, Z+7	; 0x07
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	26 83       	std	Z+6, r18	; 0x06
    2d2c:	37 83       	std	Z+7, r19	; 0x07
    2d2e:	14 c0       	rjmp	.+40     	; 0x2d58 <fputc+0x6e>
    2d30:	8b 01       	movw	r16, r22
    2d32:	ec 01       	movw	r28, r24
    2d34:	fb 01       	movw	r30, r22
    2d36:	00 84       	ldd	r0, Z+8	; 0x08
    2d38:	f1 85       	ldd	r31, Z+9	; 0x09
    2d3a:	e0 2d       	mov	r30, r0
    2d3c:	19 95       	eicall
    2d3e:	89 2b       	or	r24, r25
    2d40:	e1 f6       	brne	.-72     	; 0x2cfa <fputc+0x10>
    2d42:	d8 01       	movw	r26, r16
    2d44:	16 96       	adiw	r26, 0x06	; 6
    2d46:	8d 91       	ld	r24, X+
    2d48:	9c 91       	ld	r25, X
    2d4a:	17 97       	sbiw	r26, 0x07	; 7
    2d4c:	01 96       	adiw	r24, 0x01	; 1
    2d4e:	16 96       	adiw	r26, 0x06	; 6
    2d50:	8d 93       	st	X+, r24
    2d52:	9c 93       	st	X, r25
    2d54:	17 97       	sbiw	r26, 0x07	; 7
    2d56:	ce 01       	movw	r24, r28
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	08 95       	ret

00002d62 <__ultoa_invert>:
    2d62:	fa 01       	movw	r30, r20
    2d64:	aa 27       	eor	r26, r26
    2d66:	28 30       	cpi	r18, 0x08	; 8
    2d68:	51 f1       	breq	.+84     	; 0x2dbe <__ultoa_invert+0x5c>
    2d6a:	20 31       	cpi	r18, 0x10	; 16
    2d6c:	81 f1       	breq	.+96     	; 0x2dce <__ultoa_invert+0x6c>
    2d6e:	e8 94       	clt
    2d70:	6f 93       	push	r22
    2d72:	6e 7f       	andi	r22, 0xFE	; 254
    2d74:	6e 5f       	subi	r22, 0xFE	; 254
    2d76:	7f 4f       	sbci	r23, 0xFF	; 255
    2d78:	8f 4f       	sbci	r24, 0xFF	; 255
    2d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7c:	af 4f       	sbci	r26, 0xFF	; 255
    2d7e:	b1 e0       	ldi	r27, 0x01	; 1
    2d80:	3e d0       	rcall	.+124    	; 0x2dfe <__ultoa_invert+0x9c>
    2d82:	b4 e0       	ldi	r27, 0x04	; 4
    2d84:	3c d0       	rcall	.+120    	; 0x2dfe <__ultoa_invert+0x9c>
    2d86:	67 0f       	add	r22, r23
    2d88:	78 1f       	adc	r23, r24
    2d8a:	89 1f       	adc	r24, r25
    2d8c:	9a 1f       	adc	r25, r26
    2d8e:	a1 1d       	adc	r26, r1
    2d90:	68 0f       	add	r22, r24
    2d92:	79 1f       	adc	r23, r25
    2d94:	8a 1f       	adc	r24, r26
    2d96:	91 1d       	adc	r25, r1
    2d98:	a1 1d       	adc	r26, r1
    2d9a:	6a 0f       	add	r22, r26
    2d9c:	71 1d       	adc	r23, r1
    2d9e:	81 1d       	adc	r24, r1
    2da0:	91 1d       	adc	r25, r1
    2da2:	a1 1d       	adc	r26, r1
    2da4:	20 d0       	rcall	.+64     	; 0x2de6 <__ultoa_invert+0x84>
    2da6:	09 f4       	brne	.+2      	; 0x2daa <__ultoa_invert+0x48>
    2da8:	68 94       	set
    2daa:	3f 91       	pop	r19
    2dac:	2a e0       	ldi	r18, 0x0A	; 10
    2dae:	26 9f       	mul	r18, r22
    2db0:	11 24       	eor	r1, r1
    2db2:	30 19       	sub	r19, r0
    2db4:	30 5d       	subi	r19, 0xD0	; 208
    2db6:	31 93       	st	Z+, r19
    2db8:	de f6       	brtc	.-74     	; 0x2d70 <__ultoa_invert+0xe>
    2dba:	cf 01       	movw	r24, r30
    2dbc:	08 95       	ret
    2dbe:	46 2f       	mov	r20, r22
    2dc0:	47 70       	andi	r20, 0x07	; 7
    2dc2:	40 5d       	subi	r20, 0xD0	; 208
    2dc4:	41 93       	st	Z+, r20
    2dc6:	b3 e0       	ldi	r27, 0x03	; 3
    2dc8:	0f d0       	rcall	.+30     	; 0x2de8 <__ultoa_invert+0x86>
    2dca:	c9 f7       	brne	.-14     	; 0x2dbe <__ultoa_invert+0x5c>
    2dcc:	f6 cf       	rjmp	.-20     	; 0x2dba <__ultoa_invert+0x58>
    2dce:	46 2f       	mov	r20, r22
    2dd0:	4f 70       	andi	r20, 0x0F	; 15
    2dd2:	40 5d       	subi	r20, 0xD0	; 208
    2dd4:	4a 33       	cpi	r20, 0x3A	; 58
    2dd6:	18 f0       	brcs	.+6      	; 0x2dde <__ultoa_invert+0x7c>
    2dd8:	49 5d       	subi	r20, 0xD9	; 217
    2dda:	31 fd       	sbrc	r19, 1
    2ddc:	40 52       	subi	r20, 0x20	; 32
    2dde:	41 93       	st	Z+, r20
    2de0:	02 d0       	rcall	.+4      	; 0x2de6 <__ultoa_invert+0x84>
    2de2:	a9 f7       	brne	.-22     	; 0x2dce <__ultoa_invert+0x6c>
    2de4:	ea cf       	rjmp	.-44     	; 0x2dba <__ultoa_invert+0x58>
    2de6:	b4 e0       	ldi	r27, 0x04	; 4
    2de8:	a6 95       	lsr	r26
    2dea:	97 95       	ror	r25
    2dec:	87 95       	ror	r24
    2dee:	77 95       	ror	r23
    2df0:	67 95       	ror	r22
    2df2:	ba 95       	dec	r27
    2df4:	c9 f7       	brne	.-14     	; 0x2de8 <__ultoa_invert+0x86>
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	61 05       	cpc	r22, r1
    2dfa:	71 05       	cpc	r23, r1
    2dfc:	08 95       	ret
    2dfe:	9b 01       	movw	r18, r22
    2e00:	ac 01       	movw	r20, r24
    2e02:	0a 2e       	mov	r0, r26
    2e04:	06 94       	lsr	r0
    2e06:	57 95       	ror	r21
    2e08:	47 95       	ror	r20
    2e0a:	37 95       	ror	r19
    2e0c:	27 95       	ror	r18
    2e0e:	ba 95       	dec	r27
    2e10:	c9 f7       	brne	.-14     	; 0x2e04 <__ultoa_invert+0xa2>
    2e12:	62 0f       	add	r22, r18
    2e14:	73 1f       	adc	r23, r19
    2e16:	84 1f       	adc	r24, r20
    2e18:	95 1f       	adc	r25, r21
    2e1a:	a0 1d       	adc	r26, r0
    2e1c:	08 95       	ret

00002e1e <_exit>:
    2e1e:	f8 94       	cli

00002e20 <__stop_program>:
    2e20:	ff cf       	rjmp	.-2      	; 0x2e20 <__stop_program>
